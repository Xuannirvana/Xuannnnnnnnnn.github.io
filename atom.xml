<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Komorebi</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-13T05:16:33.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jaelyn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 中的 this</title>
    <link href="http://yoursite.com/2017/10/15/this/"/>
    <id>http://yoursite.com/2017/10/15/this/</id>
    <published>2017-10-15T02:15:01.000Z</published>
    <updated>2017-10-13T05:16:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>this</code>在 JavaScript 中其实不算是太难的内容，但是仍然有很多人弄不清楚<code>this</code>的用法，大概是因为大部分人一直都没有全方位的去分析总结过关于<code>this</code>的可能出现的各种情况。因此，这篇文章我们对<code>this</code>进行一个全面的分析和总结。</p>
<a id="more"></a>
<h2 id="this-取值的确定"><a href="#this-取值的确定" class="headerlink" title="this 取值的确定"></a>this 取值的确定</h2><p>在前面<a href="https://runjaelyn.github.io/2017/10/04/VariableObject/" target="_blank" rel="external">《变量对象（Variable Object）》</a>一文中，我们讲执行上下文的生命周期的时候就提到过：执行上下文在创建的同时，其内部会确定<code>this</code>的指向。也就是说，<code>this</code>的指向，是在执行上下文创建的时候就已经确定了。而执行上下文，是在函数调用的时候创建的。因此，通过以上分析，我们得出一个非常重要的结论：</p>
<blockquote>
<p><code>this</code>的取值，是在函数被调用的时候确定的。</p>
</blockquote>
<p>知道了<code>this</code>的取值是在什么时候确定的，接下来我们重点来看一下，<code>this</code>都有哪些取值。</p>
<h2 id="指向-window-对象的-this"><a href="#指向-window-对象的-this" class="headerlink" title="指向 window 对象的 this"></a>指向 window 对象的 this</h2><h3 id="全局环境中的-this"><a href="#全局环境中的-this" class="headerlink" title="全局环境中的 this"></a>全局环境中的 this</h3><p>全局环境中的<code>this</code>，是一个比较特殊的存在，它指向的是<code>window</code>对象。因此，这种情况也相对简单，没有太多复杂的情况需要去考虑。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在全局环境中输出</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">this</span> );    <span class="comment">// window</span></div><div class="line"><span class="built_in">console</span>.log( <span class="built_in">window</span> === <span class="keyword">this</span> );   <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="普通函数调用时的-this"><a href="#普通函数调用时的-this" class="headerlink" title="普通函数调用时的 this"></a>普通函数调用时的 this</h3><p>除了全局环境中的<code>this</code>指向<code>window</code>之外，还有一种情况下<code>this</code>也指向<code>window</code>，就是普通函数的调用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="keyword">this</span> );    <span class="comment">// window</span></div><div class="line">	<span class="built_in">console</span>.log( <span class="keyword">this</span>.x );  <span class="comment">// 10</span></div><div class="line">&#125;</div><div class="line">fn();</div></pre></td></tr></table></figure>
<p>注意以下情况：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">	<span class="attr">x</span>:<span class="number">10</span>,</div><div class="line">	<span class="attr">fn</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;         </div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;             </div><div class="line">			<span class="built_in">console</span>.log(<span class="keyword">this</span>);      <span class="comment">// window      </span></div><div class="line">			<span class="built_in">console</span>.log(<span class="keyword">this</span>.x);    <span class="comment">// 20</span></div><div class="line">		&#125;</div><div class="line">		foo();</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">obj.fn();</div></pre></td></tr></table></figure>
<p>虽然函数<code>foo</code>是在<code>obj</code>对象内部定义的，但是它仍然是一个普通函数，因此内部的<code>this</code>指向的还是<code>window</code>。</p>
<h2 id="指向函数调用者的-this"><a href="#指向函数调用者的-this" class="headerlink" title="指向函数调用者的 this"></a>指向函数调用者的 this</h2><h3 id="函数作为对象的属性"><a href="#函数作为对象的属性" class="headerlink" title="函数作为对象的属性"></a>函数作为对象的属性</h3><p>当函数作为某个对象的一个属性并且被对象调用时，函数内的<code>this</code>指向该对象。</p>
<p>例一：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">	<span class="attr">x</span>: <span class="number">10</span>,</div><div class="line">	<span class="attr">fn</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>);    <span class="comment">// obj</span></div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.x);  <span class="comment">// 10 </span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">obj.fn();</div></pre></td></tr></table></figure>
<p>例二：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">	<span class="attr">x</span>: <span class="number">10</span>,</div><div class="line">	<span class="attr">fn</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>);     <span class="comment">// obj1</span></div><div class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.x);   <span class="comment">// 30</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj1 = &#123;</div><div class="line">	<span class="attr">x</span>: <span class="number">30</span></div><div class="line">&#125;</div><div class="line">obj1.fn = obj.fn;</div><div class="line">obj1.fn();</div></pre></td></tr></table></figure>
<h3 id="函数作为事件处理函数"><a href="#函数作为事件处理函数" class="headerlink" title="函数作为事件处理函数"></a>函数作为事件处理函数</h3><p>在给元素绑定事件的时候，都需要定义一个函数作为事件处理函数。那么，当我们操作元素来调用函数去执行事件的时候，函数内的<code>this</code>就指向了我们操作（例如：点击、双击等）的当前元素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"divEle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">divEle.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="keyword">this</span> );    <span class="comment">// &lt;div id="divEle"&gt;&lt;/div&gt;</span></div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<h2 id="自定义-this-的指向"><a href="#自定义-this-的指向" class="headerlink" title="自定义 this 的指向"></a>自定义 this 的指向</h2><p>有的时候，<code>this</code>默认的指向并不是我们需要的，所以这个时候，我们就希望能够自己手动的去设置<code>this</code>的指向。</p>
<h3 id="函数用-call-或-apply-调用"><a href="#函数用-call-或-apply-调用" class="headerlink" title="函数用 call 或 apply 调用"></a>函数用 call 或 apply 调用</h3><p>JavaScript 内部提供了一种机制，让我们可以自行手动设置<code>this</code>的指向。它们就是<code>call</code>和<code>apply</code>。对于这二者而言，它们的作用是完全一样的，只是接受参数的形式不太一样。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">函数名.call( 指定<span class="keyword">this</span>指向, 参数<span class="number">1</span>, 参数<span class="number">2.</span>.. )</div><div class="line">函数名.apply( 指定<span class="keyword">this</span>指向, [参数<span class="number">1</span>, 参数<span class="number">2.</span>..] )</div></pre></td></tr></table></figure>
<p>例一：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> username = <span class="string">"zhangsan"</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">	<span class="attr">username</span>: <span class="string">"lisi"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.username);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 普通调用</span></div><div class="line">sayName();           <span class="comment">// zhangsan</span></div><div class="line"><span class="comment">// 通过 call 调用</span></div><div class="line">sayName.call(obj);   <span class="comment">// lisi</span></div><div class="line"><span class="comment">// 通过 apply 调用</span></div><div class="line">sayName.apply(obj);  <span class="comment">// lisi</span></div></pre></td></tr></table></figure>
<p>结论：</p>
<ul>
<li>当函数没有参数时，用<code>call</code>和<code>apply</code>都可以，没有任何区别。</li>
<li>当参数数量确定时，用<code>call</code>。</li>
<li>但参数数量不确定时，用<code>apply</code>，参数可以通过<code>push</code>方法添加到数组餐后传递进去。</li>
</ul>
<h3 id="函数用-bind-调用"><a href="#函数用-bind-调用" class="headerlink" title="函数用 bind 调用"></a>函数用 bind 调用</h3><p><code>bind</code>和<code>call</code>、<code>apply</code>的用法有些不同。</p>
<p>例二：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> username = <span class="string">"zhangsan"</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">	<span class="attr">username</span>: <span class="string">"lisi"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.username);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 普通调用</span></div><div class="line">sayName();      <span class="comment">// zhangsan</span></div><div class="line"><span class="comment">// 通过 bind 调用</span></div><div class="line"><span class="keyword">var</span> fn = sayName.bind(obj);</div><div class="line">fn();           <span class="comment">// lisi</span></div></pre></td></tr></table></figure>
<p>我们看到，当函数通过<code>bind</code>调用后并不会立即执行，而是返回了一个修改过后的函数。因此，想要让函数执行，我们还必须再调用一次修改过后的函数。</p>
<h3 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h3><p><code>call</code>和<code>apply</code>都是改变上下文中的<code>this</code>并立即执行当前函数，<code>bind</code>方法是改变<code>this</code>之后可以自己决定什么时候去调用改变后的新函数。</p>
<h2 id="构造函数的-this"><a href="#构造函数的-this" class="headerlink" title="构造函数的 this"></a>构造函数的 this</h2><h3 id="函数内部的-this"><a href="#函数内部的-this" class="headerlink" title="函数内部的 this"></a>函数内部的 this</h3><p>在封装对象的时候，我们几乎都会用到<code>this</code>。但是，在这个过程中<code>this</code>的指向到底是什么样的呢？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// 这里的 this 指向了谁</span></div><div class="line">	<span class="keyword">this</span>.name = <span class="string">"zhangsan"</span>;</div><div class="line">	<span class="keyword">this</span>.age = <span class="number">20</span>;	</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> foo1 = <span class="keyword">new</span> Foo();</div></pre></td></tr></table></figure>
<p>我们在前面讲创建对象的时候就提到过，使用<code>new</code>操作符创建实例的对象的时候，会经历四个步骤：</p>
<ol>
<li>创建一个新对象；</li>
<li>将构造函数的作用域赋给新对象（因此<code>this</code>就指向了这个新对象）；</li>
<li>执行构造函数中的代码（为第 1 步创建出的新对象添加属性）；</li>
<li>返回新对象。</li>
</ol>
<p>也就是说，当<code>new</code>操作符调用构造函数时，<code>this</code>其实指向的是这个新创建的对象，最后又将新对象返回出来，被实例对象的变量<code>foo1</code>接受。因此，我们可以得出结论：</p>
<blockquote>
<p>构造函数中的<code>this</code>，指向<code>new</code>出来的实例对象。</p>
</blockquote>
<h3 id="原型-prototype-中的-this"><a href="#原型-prototype-中的-this" class="headerlink" title="原型 prototype 中的 this"></a>原型 prototype 中的 this</h3><p>构造函数中的<code>this</code>我们知道了，那么原型上的<code>this</code>呢？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name, age</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">Foo.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// 这里的 this 又指向了谁</span></div><div class="line">	<span class="built_in">console</span>.log( <span class="keyword">this</span>.name );</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> foo1 = <span class="keyword">new</span> Foo(<span class="string">"zhangsan"</span>, <span class="number">20</span>);</div><div class="line">foo1.sayName();</div></pre></td></tr></table></figure>
<p>根据我们前面讲<strong>指向函数调用者的 this</strong>中的定义，<code>foo1.sayName()</code>中最终是<code>foo1</code>调用了函数，因此，<code>sayName</code>中的<code>this</code>，指向<code>foo1</code>。也就是说：</p>
<blockquote>
<p>原型中的<code>this</code>，也指向的是当前实例对象。</p>
</blockquote>
<p>实际上不仅仅是在构造函数的<code>prototype</code>中，即便是在整个原型链中，<code>this</code>都是指向的当前实例对象。</p>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>我们在文章开篇一进来的时候，就让大家去记住一个结论：<code>this</code>的取值，是在函数被调用的时候确定的。实际上，这个结论在 ES6 出来以前是很适用的，但是 ES6 出来以后，这个结论就有一些问题了。</p>
<p>箭头函数中的<code>this</code>，是在定义时就确定了其取值，而不是在调用的时候。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">"zhangsan"</span>,</div><div class="line">	<span class="attr">sayName</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">		<span class="built_in">console</span>.log( <span class="keyword">this</span> )        <span class="comment">// window</span></div><div class="line">		<span class="built_in">console</span>.log( <span class="keyword">this</span>.name )   <span class="comment">// undefined</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">obj.sayName();</div></pre></td></tr></table></figure>
<p>什么叫做在定义的时候确定取值？也就是说：</p>
<blockquote>
<p>箭头函数定义哪个执行上下文中，那么，它的<code>this</code>就继承于这个执行上下文。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;this&lt;/code&gt;在 JavaScript 中其实不算是太难的内容，但是仍然有很多人弄不清楚&lt;code&gt;this&lt;/code&gt;的用法，大概是因为大部分人一直都没有全方位的去分析总结过关于&lt;code&gt;this&lt;/code&gt;的可能出现的各种情况。因此，这篇文章我们对&lt;code&gt;this&lt;/code&gt;进行一个全面的分析和总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="this" scheme="http://yoursite.com/tags/this/"/>
    
      <category term="箭头函数" scheme="http://yoursite.com/tags/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    
      <category term="call" scheme="http://yoursite.com/tags/call/"/>
    
      <category term="apply" scheme="http://yoursite.com/tags/apply/"/>
    
      <category term="bind" scheme="http://yoursite.com/tags/bind/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 数据属性和访问器属性</title>
    <link href="http://yoursite.com/2017/10/12/objectAttribute/"/>
    <id>http://yoursite.com/2017/10/12/objectAttribute/</id>
    <published>2017-10-12T02:15:01.000Z</published>
    <updated>2017-10-14T14:30:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，对象的属性分为两种类型：数据属性和访问器属性。</p>
<a id="more"></a>
<h2 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h2><p>它包含的是一个数据值的位置，在这可以对数据值进行读写。</p>
<h3 id="定义数据属性"><a href="#定义数据属性" class="headerlink" title="定义数据属性"></a>定义数据属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line">person.name = <span class="string">"zhangsan"</span>;</div></pre></td></tr></table></figure>
<p>在上面的代码中，我们通过赋值的方式给<code>person</code>对象添加了一个<code>name</code>的属性。</p>
<p>事实上，除了上面的这种方法之外，我们还可以使用<code>Object.defineProperty()</code>方法来定义一个对象的新属性或者修改其原有的属性。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.defineProperty(obj, prop, descriptor)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>obj</code>: 要操作其属性的目标对象</li>
<li><code>prop</code>：要定义或修改的属性名称</li>
<li><code>descriptor</code>：将被定义或修改的属性的描述符</li>
</ul>
<p>返回值：</p>
<p>返回传递给函数的对象，即第一个参数<code>obj</code>。</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> person = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</div><div class="line">	<span class="attr">value</span>: <span class="string">"zhangsan"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>既然两种方式都可以用来给对象添加属性，而第一种赋值操作明显更为简洁，那么我们为什么还要使用第二中方式来给对象添加属性呢？</p>
<p><strong>说明：</strong></p>
<p><code>Object.defineProperty()</code>方法允许精确添加或修改对象的属性。一般情况下，我们为对象添加属性是通过赋值来创建，并显示在属性枚举（<code>for...in</code>或<code>Object.keys</code>方法）中。但这种方式添加的属性值可以被修改，也可以被删除。而使用<code>Object.defineProperty()</code>方法，则可以通过设置其他的一些特性来限制属性是否能够被操作。例如：默认情况下，使用<code>Object.defineProperty()</code>增加的属性值是不可改变的。</p>
<p>所以，接下来，我们来看一下数据属性有哪些特性。</p>
<h3 id="数据属性的特性"><a href="#数据属性的特性" class="headerlink" title="数据属性的特性"></a>数据属性的特性</h3><p>每个对象的数据属性除了具有键值对的特性外，还包含了其他四个特性：</p>
<ul>
<li><strong>configurable</strong>：可配执性</li>
<li><strong>enumerable</strong>：枚举性</li>
<li><strong>writable</strong>：可读写性</li>
<li><strong>value</strong>：数据值</li>
</ul>
<h4 id="configurable"><a href="#configurable" class="headerlink" title="configurable"></a>configurable</h4><p>控制属性能否被删除。只有当属性的<code>configurable</code>特性的值为<code>true</code>时，该属性才能够被删除。（默认值为<code>false</code>，即不可删除）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</div><div class="line">	<span class="attr">configurable</span>: <span class="literal">false</span>, <span class="comment">// 不可删除</span></div><div class="line">	value: <span class="string">"zhangsan"</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 将 name 属性删除</span></div><div class="line"><span class="keyword">delete</span> person.name;</div><div class="line"><span class="built_in">console</span>.log( person.name );    <span class="comment">// zhangsan</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"age"</span>, &#123;</div><div class="line">	<span class="attr">configurable</span>: <span class="literal">true</span>, <span class="comment">// 可删除</span></div><div class="line">	value: <span class="number">20</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 将 age 属性删除</span></div><div class="line"><span class="keyword">delete</span> person.age;</div><div class="line"><span class="built_in">console</span>.log( person.age );    <span class="comment">// undefined</span></div><div class="line"><span class="comment">// 重新定义 age 属性</span></div><div class="line">person.age = <span class="number">30</span>;</div><div class="line"><span class="built_in">console</span>.log( person.age );    <span class="comment">// 30</span></div></pre></td></tr></table></figure>
<h4 id="enumerable"><a href="#enumerable" class="headerlink" title="enumerable"></a>enumerable</h4><p>控制属性能否被枚举（遍历）。只有当属性的<code>enumerable</code>特性的值为<code>true</code>时，该属性才会出现在对象的枚举属性中。（默认值为<code>false</code>，即不可枚举）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</div><div class="line">	<span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="comment">// 不可枚举</span></div><div class="line">	value: <span class="string">"zhangsan"</span></div><div class="line">&#125;)</div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"age"</span>, &#123;</div><div class="line">	<span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 可枚举</span></div><div class="line">	value: <span class="number">20</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> person)&#123;</div><div class="line">	<span class="built_in">console</span>.log( item );    <span class="comment">// age</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="writable"><a href="#writable" class="headerlink" title="writable"></a>writable</h4><p>控制属性能否被修改。只有当属性的<code>writable</code>特性的值为<code>true</code>时，该属性才能够通过赋值运算符对属性值进行修改。（默认值为<code>false</code>，即不可修改）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</div><div class="line">	<span class="attr">writable</span>: <span class="literal">false</span>, <span class="comment">// 不可修改</span></div><div class="line">	value: <span class="string">"zhangsan"</span></div><div class="line">&#125;)</div><div class="line">person.name = <span class="string">"lisi"</span>;</div><div class="line"><span class="built_in">console</span>.log(person.name);   <span class="comment">// zhangsan</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"age"</span>, &#123;</div><div class="line">	<span class="attr">writable</span>: <span class="literal">true</span>, <span class="comment">// 可修改</span></div><div class="line">	value: <span class="number">20</span></div><div class="line">&#125;)</div><div class="line">person.age = <span class="number">30</span>;</div><div class="line"><span class="built_in">console</span>.log(person.age);    <span class="comment">// 30</span></div></pre></td></tr></table></figure>
<h4 id="value"><a href="#value" class="headerlink" title="value"></a>value</h4><p>设置属性对应的值。可以是任何有效的 JavaScript 值（数值、对象、函数等）。默认值为<code>undefined</code>。</p>
<h2 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h2><p>这个属性不包含数据值，包含的是一对<code>get</code>和<code>set</code>方法。在读写访问器属性的时候，就是通过这两个方法来进行操作处理的。</p>
<h3 id="访问器属性的特性"><a href="#访问器属性的特性" class="headerlink" title="访问器属性的特性"></a>访问器属性的特性</h3><ul>
<li><strong>get</strong>：在读取对象属性时调用的函数（默认值为<code>undefined</code>）</li>
<li><strong>set</strong>：在写入对象属性时调用的函数（默认值为<code>undefined</code>）</li>
</ul>
<p>注意：访问器属性不能直接定义，需要通过<code>Object.defineProperty()</code>方法来定义。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"age"</span>, &#123;</div><div class="line">	get()&#123;</div><div class="line">		<span class="keyword">return</span> age;</div><div class="line">	&#125;,</div><div class="line">	set(...args)&#123;</div><div class="line">		age = args[<span class="number">0</span>]</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log( person.age );   <span class="comment">// 20</span></div><div class="line">person.age = <span class="number">30</span>;</div><div class="line"><span class="built_in">console</span>.log( person.age );   <span class="comment">// 30</span></div></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>当执行<code>person.age</code>时，实际上是在调用<code>age</code>属性的<code>get</code>方法。</li>
<li>当执行<code>person.age = 30</code>时，实际上是在调用<code>age</code>属性的<code>set</code>方法。</li>
</ul>
<h2 id="定义私有属性"><a href="#定义私有属性" class="headerlink" title="定义私有属性"></a>定义私有属性</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> _name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">	<span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">		_name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> _name;	</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>, <span class="number">21</span>);</div><div class="line"><span class="built_in">console</span>.log( person1 );  <span class="comment">// Person &#123;age: 21, setName: ƒ, getName: ƒ&#125;</span></div></pre></td></tr></table></figure>
<p>以上代码，构造函数<code>Person</code>有一个<code>name</code>属性和一个<code>age</code>属性。我们并没有直接将<code>name</code>属性添加到<code>this</code>身上，而是赋给了<code>Person</code>函数内部的<code>_name</code>属性。</p>
<p>根据函数的作用域关系，函数外部是无法访问函数内部定义的变量。因此可以让<code>name</code>属性变为私有。同时，如果希望外部能够获取或修改到<code>name</code>属性的值，添加<code>getName</code>和<code>setName</code>方法，通过方法的暴露来提供内部变量的访问。</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>除了以上方式，我们还可以使用<code>Object.defineProperty()</code>方法来定义私有属性。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> _name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">	<span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">"name"</span>, &#123;</div><div class="line">		get()&#123;</div><div class="line">			<span class="keyword">return</span> _name;</div><div class="line">		&#125;,</div><div class="line">		set(name)&#123;</div><div class="line">			_name = name;</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 JavaScript 中，对象的属性分为两种类型：数据属性和访问器属性。&lt;/p&gt;
    
    </summary>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="数据属性" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%B1%9E%E6%80%A7/"/>
    
      <category term="访问器属性" scheme="http://yoursite.com/tags/%E8%AE%BF%E9%97%AE%E5%99%A8%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>原型（prototype）</title>
    <link href="http://yoursite.com/2017/10/11/prototype/"/>
    <id>http://yoursite.com/2017/10/11/prototype/</id>
    <published>2017-10-11T02:15:01.000Z</published>
    <updated>2017-10-14T14:27:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在用构造函数创建对象的过程中我们遇到了一个问题：同一个构造函数的不同实例的相同方法是不一样的。所以我们后来用原型把构造函数中公共的属性和方法提取出来进行封装，达到让所有实例共享的目的。</p>
<p>这篇文章我们主要针对原型进行进一步的介绍。</p>
<a id="more"></a>
<h2 id="函数与对象的关系"><a href="#函数与对象的关系" class="headerlink" title="函数与对象的关系"></a>函数与对象的关系</h2><p>因为原型跟函数和对象都有关系，所以在讲解原型之前，我们先来弄清楚函数和对象的关系。</p>
<h3 id="函数属于对象"><a href="#函数属于对象" class="headerlink" title="函数属于对象"></a>函数属于对象</h3><p>函数其实对象中的一种，通过<code>instanceof</code>运算符可以判断。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="comment">// 返回 true，说明函数是对象类型</span></div><div class="line"><span class="built_in">console</span>.log( fn <span class="keyword">instanceof</span> <span class="built_in">Object</span> );   <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="函数创建对象"><a href="#函数创建对象" class="headerlink" title="函数创建对象"></a>函数创建对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">obj.a = <span class="number">20</span>;</div><div class="line">obj.b = <span class="number">30</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">arr[<span class="number">0</span>] = <span class="string">"hello"</span>;</div><div class="line">arr[<span class="number">1</span>] = <span class="string">"world"</span>;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>对象是由函数创建的，而函数却又是一种对象。</p>
</blockquote>
<h2 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h2><h3 id="函数与原型的关系"><a href="#函数与原型的关系" class="headerlink" title="函数与原型的关系"></a>函数与原型的关系</h3><p>JavaScript 中创建一个函数，就会自动创建一个<code>prototype</code>属性。也就是说：</p>
<blockquote>
<p><strong>每一个函数都有一个<code>prototype</code>属性，称为原型。</strong></p>
</blockquote>
<p>这个<code>prototype</code>属性的值实际上是一个对象，这个对象会自动获得一个<code>constructor</code>（构造函数）的属性，而这个属性指向当前函数本身。</p>
<p>我们通过一个代码例子来分析：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fkelhj1qrlj314k0fejtz.jpg" alt=""></p>
<h3 id="构造函数的属性和原型的属性的区别"><a href="#构造函数的属性和原型的属性的区别" class="headerlink" title="构造函数的属性和原型的属性的区别"></a>构造函数的属性和原型的属性的区别</h3><p>在讲创建对象的时候，我们提到了几种创建对象的方式。其中有两种：构造函数模式和原型模式。构造函数模式是在函数内部通过<code>this</code>定义属性，原型模式是通过<code>prototype</code>定义属性。</p>
<p>那么这两种模式定义的属性有什么区别呢？</p>
<ul>
<li><strong>把属性定义在原型中比定义在构造函数中消耗的内存更小</strong></li>
</ul>
<p>因为在内存中一个构造函数的原型只有一个，写在原型中的行为可以被所有实例共享，实例化的时候并不会在内存中再复制一份。因此，如果没有特殊情况，在用混合模式创建对象的时候，我们一般把属性写在构造函数中，而行为写在原型中。</p>
<ul>
<li><strong>构造函数中定义的属性和方法比在原型中定义的属性和方法的优先级高</strong></li>
</ul>
<p>如果定义了同名称的属性和方法，构造函数中的将会覆盖原型中的。</p>
<h3 id="原型的相关方法"><a href="#原型的相关方法" class="headerlink" title="原型的相关方法"></a>原型的相关方法</h3><p>原型作为一个对象，身上自带了很多相关的方法。</p>
<ul>
<li><code>isPrototypeOf()</code>：确认原型和实例之间的关系。</li>
<li><code>Object.getPrototypeOf()</code>：获得实例的原型。</li>
<li><code>hasOwnPrototype()</code>：检测某个属性是否存在于实例中。</li>
</ul>
<h2 id="隐式原型（-proto-）"><a href="#隐式原型（-proto-）" class="headerlink" title="隐式原型（__proto__）"></a>隐式原型（<code>__proto__</code>）</h2><p><code>__proto__</code>是对象的一个属性，也就是说：</p>
<blockquote>
<p><strong>每一个对象都有一个<code>__proto__</code>属性，称为隐式原型。</strong></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">// 输出实例对象</span></div><div class="line"><span class="built_in">console</span>.log( p1 );</div></pre></td></tr></table></figure>
<p>代码运行结果如下：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fkengzouybj314i04qmxe.jpg" alt=""></p>
<p>展开这个实例对象，可以看到里面有一个<code>__proto__</code>属性，而它的属性值，是一个对象。</p>
<blockquote>
<p>隐式原型（<code>__proto__</code>）本身也属于对象。</p>
</blockquote>
<h2 id="隐式原型和原型的关系"><a href="#隐式原型和原型的关系" class="headerlink" title="隐式原型和原型的关系"></a>隐式原型和原型的关系</h2><p>通过前面的学习我们知道，每一个函数都有一个原型<code>prototype</code>，每一个对象都有一个隐式原型<code>__proto__</code>。那么它们之间有什么关系吗？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( Person.prototype );</div><div class="line"><span class="built_in">console</span>.log( p1.__proto__ );</div></pre></td></tr></table></figure>
<p>代码运行结果如下：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fkeoq789ohj314k0as75p.jpg" alt=""></p>
<p>我们可以看到，对象的<code>__proto__</code>属性和函数的<code>prototype</code>属性结果是一样的。所以我们可以得出一个结论：</p>
<blockquote>
<p>每个对象都有一个<code>__proto__</code>属性，指向创建该对象的函数的<code>prototype</code>。</p>
</blockquote>
<p>图解：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fkeqohkb9wj314k0g2tbe.jpg" alt=""></p>
<p>知道了<code>__proto__</code>和<code>prototype</code>的关系，接下来，我们再来深入研究几个问题：</p>
<p>（1）我们前面说了，<code>prototype</code>本身也是对象。那么现在新的问题来了，既然<code>prototype</code>是对象，作为对象那它也应该有<code>__proto__</code>属性。那这个<code>__proto__</code>属性又指向谁呢？</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fker123ohdj31kw0vxdn3.jpg" alt=""></p>
<p>说明：</p>
<ol>
<li>函数的原型对象<code>prototype</code>本质上都是通过<code>Object</code>函数来创建的，所以它的<code>__proto__</code>指向的是<code>Object.prototype</code>。</li>
<li><code>Object.prototype</code>的<code>__proto__</code>指向<code>null</code>。</li>
</ol>
<p>（2）我们知道，函数也是一种对象，既然它也是对象，那函数有<code>__proto__</code>吗？</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fkf9lvn95dj31kw0lqgt7.jpg" alt=""></p>
<p>说明：</p>
<p><code>Function</code>是一个函数，函数又是一种对象。当然也有<code>__proto__</code>属性。所有的函数，都是被<code>Function</code>创建出来的。所以，<code>Function</code>是被自身创建的，所以它的<code>__proto__</code>指向了自身的<code>prototype</code>。</p>
<p>（3）<code>Function</code>的<code>prototype</code>属性也是一个对象，那它的<code>__proto__</code>又指向谁？</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fkf9zyq1u5j31kw0n47cl.jpg" alt=""></p>
<p>说明：</p>
<p><code>Function.prototype</code>是被<code>Object</code>创建的对象，它的<code>__proto__</code>指向的是<code>Object.prototype</code>。</p>
<h2 id="原型知识点汇总"><a href="#原型知识点汇总" class="headerlink" title="原型知识点汇总"></a>原型知识点汇总</h2><p>通过以上所有的分析，我们对所有的结论做一个总结汇总：</p>
<blockquote>
<ol>
<li>每一个函数都有一个<code>prototype</code>属性，称为原型。</li>
<li>每一个对象都有一个<code>__proto__</code>属性，称为隐式原型。</li>
<li>每一个原型<code>prototype</code>（包括隐式原型<code>__proto__</code>）都有一个<code>constructor</code>属性，指向当前函数。</li>
<li><code>prototype</code>和<code>__proto__</code>本身也都属于对象。</li>
<li>所有对象的<code>__proto__</code>都指向创建该对象的函数的<code>prototype</code>。</li>
<li>每一个原型对象<code>prototype</code>身上都有一个<code>constructor</code>，指向当前函数本身。</li>
<li>所有函数的<code>prototype</code>都是通过<code>Object</code>函数创建的。</li>
<li>所有函数都是通过<code>Function</code>函数创建的。 </li>
</ol>
</blockquote>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>实例对象都有自己的属性和方法，而原型封装了所有实例共享的属性和方法。那这种共享是通过什么方式来实现的呢？—— 就是我们的原型链。</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person();</div><div class="line">Person.prototype.name = <span class="string">"zhangsan"</span>;</div><div class="line"><span class="built_in">console</span>.log(person1.name);</div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fkfbhx0p1wj31660gowhs.jpg" alt=""></p>
<p>当我们访问实例对象的某个属性时，解析器会执行一次搜索：首先从实例对象开始，如果在实例中找到了该属性，则直接返回对应的属性值。如果在实例中没有找到该属性，就会沿着<code>__proto__</code>找到它指向的<code>prototype</code>原型对象，然后在原型对象中查找该属性，然后得到对应的属性值。这就是原型链。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用构造函数创建对象的过程中我们遇到了一个问题：同一个构造函数的不同实例的相同方法是不一样的。所以我们后来用原型把构造函数中公共的属性和方法提取出来进行封装，达到让所有实例共享的目的。&lt;/p&gt;
&lt;p&gt;这篇文章我们主要针对原型进行进一步的介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="原型链" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
      <category term="隐式原型" scheme="http://yoursite.com/tags/%E9%9A%90%E5%BC%8F%E5%8E%9F%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>面向对象 - 实现继承的三种形式</title>
    <link href="http://yoursite.com/2017/10/10/inheritObject/"/>
    <id>http://yoursite.com/2017/10/10/inheritObject/</id>
    <published>2017-10-10T02:15:01.000Z</published>
    <updated>2017-10-14T09:35:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习如何去创建对象是理解面向对象编程的第一步，而第二步就是理解“继承”。</p>
<p>我们常常结合构造函数与原型来创建一个对象，因为构造函数和原型的不同特性，分别解决了我们不同的困扰。因此当我们想要实现继承时，就必须根据构造函数与原型的不同而采取不同的策略。</p>
<p>因此本文主要介绍几种面向对象中实现继承的形式。</p>
<a id="more"></a>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>JavaScript 使用原型链作为实现继承的主要方法。而实现的本质就是重写原型对象，使子类原型对象指向父类的实例以实现继承。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.age = <span class="number">20</span>;</div><div class="line">&#125;</div><div class="line">Person.prototype.getPersonAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="keyword">this</span>.age );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = <span class="string">"zhangsan"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 继承 Person</span></div><div class="line">Student.prototype = <span class="keyword">new</span> Person();</div><div class="line">Student.prototype.constructor = Student;</div><div class="line"></div><div class="line"><span class="keyword">let</span> zhangsan = <span class="keyword">new</span> Student();</div><div class="line">zhangsan.getPersonAge();    <span class="comment">// 20</span></div></pre></td></tr></table></figure>
<p>上面的代码定义了两个构造函数<code>Person</code>和<code>Student</code>。其中<code>Student</code>继承了<code>Person</code>。也就是说，原来存在于<code>Person</code>的实例中的所有属性和方法，现在也存在于<code>Student.prototype</code>中了。</p>
<p>在这个例子中，构造函数以及原型之间的关系如下图所示：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fkfgwvkrqsj31kw0zm477.jpg" alt=""></p>
<p>通过上图我们可以看出，<code>zhangsan</code>指向<code>Student</code>的原型，<code>Student</code>的原型又指向<code>Person</code>的原型。<code>getPersonAge()</code>的方法仍然还在<code>Person.prototype</code>中，但<code>age</code>则位于<code>Student.prototype</code>中。这是因为<code>age</code>是一个实例属性，而<code>getPersonAge()</code>则是一个原型方法。既然<code>Student.prototype</code>现在是<code>Person</code>的实例，那么<code>age</code>当然就位于该实例中了。</p>
<h2 id="借用构造函数（对象冒充）"><a href="#借用构造函数（对象冒充）" class="headerlink" title="借用构造函数（对象冒充）"></a>借用构造函数（对象冒充）</h2><p>在解决原型中包含引用类型值所带来问题的过程中，开发人员开始使用一种叫做<strong>借用构造函数</strong>（constructor stealing）的技术（有时候也叫做伪造对象或经典继承）。</p>
<p>这种技术的基本思想相当简单，即在子类构造函数内部调用父类构造函数，但是需要结合<code>apply()</code>和<code>call()</code>方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">	<span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log( <span class="keyword">this</span>.name );</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age</span>)</span>&#123;</div><div class="line">	<span class="comment">// 继承 Person</span></div><div class="line">	Person.call(<span class="keyword">this</span>, name, age);</div><div class="line">	<span class="comment">// Person.apply(this, [name, age]);</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> zhang = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>, <span class="number">22</span>);</div><div class="line">zhangsan.sayName();    <span class="comment">// zhangsan</span></div></pre></td></tr></table></figure>
<p>但是使用这中方式实现继承，也会有一个问题：方法都在构造函数内部定义，因此函数的复用就无从谈起了。并且每个对象实例都会保存相同的方法，这种方式也会造成内存的浪费。考虑到这些问题，借用构造函数的技术也是很少单独使用的。</p>
<h2 id="组合（混合）继承"><a href="#组合（混合）继承" class="headerlink" title="组合（混合）继承"></a>组合（混合）继承</h2><p>组合继承（combination inheritance），有时候也叫做伪经典继承，指的是将原型链和借用构造函数的 技术组合到一块，从而发挥二者之长的一种继承模式。实现的思路就是：使用原型链实现对原型的属性和方法的继承，同时通过借用构造函数来实现对实例属性的继承。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="keyword">this</span>.name );</div><div class="line">&#125;</div><div class="line"><span class="comment">// 通过借用构造函数继承实例的属性</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age</span>)</span>&#123;</div><div class="line">	Person.call(<span class="keyword">this</span>, name, age);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 通过原型链继承原型的方法</span></div><div class="line">Student.prototype = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line"><span class="keyword">let</span> zhang = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>, <span class="number">22</span>);</div><div class="line">zhang.sayName();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习如何去创建对象是理解面向对象编程的第一步，而第二步就是理解“继承”。&lt;/p&gt;
&lt;p&gt;我们常常结合构造函数与原型来创建一个对象，因为构造函数和原型的不同特性，分别解决了我们不同的困扰。因此当我们想要实现继承时，就必须根据构造函数与原型的不同而采取不同的策略。&lt;/p&gt;
&lt;p&gt;因此本文主要介绍几种面向对象中实现继承的形式。&lt;/p&gt;
    
    </summary>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="原型链" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
      <category term="对象冒充" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1%E5%86%92%E5%85%85/"/>
    
      <category term="混合继承" scheme="http://yoursite.com/tags/%E6%B7%B7%E5%90%88%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>面向对象 - 如何实现面向对象编程（OOP）</title>
    <link href="http://yoursite.com/2017/10/09/createObject/"/>
    <id>http://yoursite.com/2017/10/09/createObject/</id>
    <published>2017-10-09T02:15:01.000Z</published>
    <updated>2017-10-14T07:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 本身其实并不是一门很纯粹的面向对象的语言，为了实现面向对象，ECMAScript 设计出了一种非常成功的数据结构 —— <strong>JSON</strong>（JavaScript Object Notation），这一经典结构已经可以脱离语言而成为一种广泛应用的数据交互格式。</p>
<p>应该说，具有数据类型和 JSON 构造语法的 ECMAScript 已经基本可以实现面向对象的编程了。</p>
<a id="more"></a>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>在 JavaScript 中如何实现面向对象编程，最基本就是学会如何去创建对象。</p>
<p>JavaScript 创建对象的方法的产生是一个迭代的过程，因为已有方法的缺陷催生出了新的方法。</p>
<h3 id="Object-构造函数"><a href="#Object-构造函数" class="headerlink" title="Object 构造函数"></a>Object 构造函数</h3><p>早期 JavaScript 程序员经常使用也是最简单的方法，就是通过 Object 构造函数来创建对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">person.name = <span class="string">"zhangsan"</span>;</div><div class="line">person.age = <span class="number">30</span>;</div><div class="line">person.job = <span class="string">"Software Engineer"</span>;</div><div class="line">person.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"my name is "</span> + <span class="keyword">this</span>.name )</div><div class="line">&#125;</div><div class="line">person.sayName(); <span class="comment">// my name is zhangsan</span></div></pre></td></tr></table></figure>
<h3 id="字面量方式"><a href="#字面量方式" class="headerlink" title="字面量方式"></a>字面量方式</h3><p>早期JS开发人员经常使用new Object()创建对象，几年后对象字面量称为创建对象的首选模式。这是最普通也是最简单的一种创建对象的方式，也可称之为 “JSON式对象”。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">"zhangsan"</span>,           </div><div class="line">	<span class="attr">age</span>: <span class="number">30</span>,                     </div><div class="line">	<span class="attr">job</span>: <span class="string">"Software Engineer"</span>,    </div><div class="line">	<span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;        </div><div class="line">		<span class="built_in">console</span>.log( <span class="string">"my name is "</span> + <span class="keyword">this</span>.name )</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">person.sayName();</div></pre></td></tr></table></figure>
<p>对象字面量方式相对于 Object 构造函数方式的代码量少了一些。但是，当我们需要创建多个属性相同的对象时，这两种方法就会产生大量重复的代码。我们需要对重复的代码进行抽象，工厂模式就是在这种情况下产生的。</p>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>工厂模式是将创建具体对象的过程抽象了出来，其主要目的就是为了减少代码重复。</p>
<p>事实上，通过类来创建多个实例可以减少代码重复，但是在 ES6 出来之前，JavaScript 中并没有类的概念，我们无法创建类。所以就采用封装函数，通过<code>return</code>关键字来获取到对象的方式，来创建对象的细节。</p>
<p>方式一：直接返回 JSON 式对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">name</span>: name,</div><div class="line">		<span class="attr">age</span>: age,</div><div class="line">		<span class="attr">job</span>: job,</div><div class="line">		<span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="built_in">console</span>.log( <span class="string">"my name is"</span> + <span class="keyword">this</span>.name );</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> zhangsan = person(<span class="string">"zhangsan"</span>, <span class="number">30</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> lisi = person(<span class="string">"lisi"</span>, <span class="number">20</span>, <span class="string">"Doctor"</span>);</div><div class="line">zhangsan.sayName();</div><div class="line">lisi.sayName();</div></pre></td></tr></table></figure>
<p>方式二：使用 Object 对象构建。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">	p.name = name;</div><div class="line">	p.age = age;</div><div class="line">	p.job = job;</div><div class="line">	p.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log( <span class="string">"my name is "</span> + <span class="keyword">this</span>.name )</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> zhangsan = person(<span class="string">"zhangsan"</span>, <span class="number">30</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> lisi = person(<span class="string">"lisi"</span>, <span class="number">20</span>, <span class="string">"Doctor"</span>);</div><div class="line">zhangsan.sayName();</div><div class="line">lisi.sayName();</div></pre></td></tr></table></figure>
<p>使用工厂模式能够创建一个包含所有信息的对象，可以无数次的调用这个函数。虽然工厂模式减少了重复代码，但是不能够识别对象的类型，所有实例都是 object 类型。因此，出现了构造函数模式。</p>
<h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><p>构造函数实际上也是函数的一种表现形式，它的功能是通过<code>new</code>关键字调用构造函数获得一个新的对象。</p>
<p>方式一：先声明后定义。首先创建对象，对象创建完成后给对象的属性赋值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 构造函数：函数名第一个字母大写，用于区分普通函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="comment">// 获取对象</span></div><div class="line"><span class="keyword">var</span> zhangsan = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">// 对象初始化</span></div><div class="line">zhangsan.name = <span class="string">"zhangsan"</span>;</div><div class="line">zhangsan.age = <span class="number">30</span>;</div><div class="line">zhangsan.job = <span class="string">"Software Engineer"</span>;</div><div class="line">zhangsan.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"my name is "</span> + <span class="keyword">this</span>.name )</div><div class="line">&#125;</div><div class="line">zhangsan.sayName();</div></pre></td></tr></table></figure>
<p>方式二：声明时定义。在创建对象的同时通过<code>this</code>给对象的属性赋值（<code>this</code>指向实例对象）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">	<span class="keyword">this</span>.job = job;</div><div class="line">	<span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log( <span class="string">"my name is "</span> + <span class="keyword">this</span>.name )</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 获得对象</span></div><div class="line"><span class="keyword">var</span> zhangsan = <span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>, <span class="number">30</span>, <span class="string">"Software Engineer"</span>);</div><div class="line"><span class="keyword">var</span> lisi = <span class="keyword">new</span> Person(<span class="string">"lisi"</span>, <span class="number">20</span>, <span class="string">"Doctor"</span>);</div><div class="line">zhangsan.sayName();</div><div class="line">lisi.sayName();</div></pre></td></tr></table></figure>
<p>要创建<code>Person</code>的新实例，就必须使用<code>new</code>操作符。通过这种方式调用构造函数实际上会经历以下 4 个步骤：</p>
<ol>
<li>创建一个新对象；</li>
<li>将构造函数的作用域赋给新对象（因此<code>this</code>就指向了这个新对象）；</li>
<li>执行构造函数中的代码（为第 1 步创建出的新对象添加属性）；</li>
<li>返回新对象。</li>
</ol>
<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>原型模式就是把构造函数中方法拿出来的基础上，为了避免对全局环境的污染，再做了一层封装。但是毕竟是一种新的模式，它的封装更彻底，而且也不是把所有的函数都封装，而是恰到好处的把构造函数中公共的方法和属性进行了封装。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">Person.prototype.name = <span class="string">"zhangsan"</span>;</div><div class="line">Person.prototype.age = <span class="number">18</span>;</div><div class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</div><div class="line"><span class="comment">//添加一个朋友的属性</span></div><div class="line">Person.prototype.friends = [<span class="string">"lisi"</span>, <span class="string">"wangwu"</span>]</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"my name is "</span> + <span class="keyword">this</span>.name );</div><div class="line">&#125; </div><div class="line"><span class="keyword">var</span> zhangsan1 = <span class="keyword">new</span> Person();</div><div class="line">zhangsan1.sayName();</div><div class="line"><span class="keyword">var</span> zhangsan2 = <span class="keyword">new</span> Person();</div><div class="line">zhangsan2.sayName();</div><div class="line"><span class="built_in">console</span>.log( zhangsan1.sayName() == zhangsan2.sayName() );  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>使用原型的好处是可以让所有的实例对象共享它所包含的属性和方法，完美的解决了构造函数的问题。</p>
<p>但是原型模式也有它本身的问题，共享的属性值如果是引用类型，一个实例对该属性的修改会影响到其他实例。这也是原型模式很少单独使用的原因。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 给上例中实例对象 zhangsan1 再新增一个朋友</span></div><div class="line">zhangsan1.friends.push(<span class="string">"gouzi"</span>);</div><div class="line"><span class="built_in">console</span>.log( zhangsan1.friends ); <span class="comment">// "lisi", "wangwu", "gouzi"</span></div><div class="line"><span class="built_in">console</span>.log( zhangsan2.friends ); <span class="comment">// "lisi", "wangwu", "gouzi"</span></div></pre></td></tr></table></figure>
<h3 id="构造函数和原型混合模式"><a href="#构造函数和原型混合模式" class="headerlink" title="构造函数和原型混合模式"></a>构造函数和原型混合模式</h3><p>创建自定义类型的最常见方式，就是组合使用构造函数模式和原型模式。构造函数模式用于定义实例属性，而原型模式用于定义共享的方法和属性。这样，每个实例都有一份实例属性的副本，同时又共享着对各种方法的引用，最大限度的节省了内存。另外，这种混合模式还支持向构造函数传递参数，可谓是集两种模式之长。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">	<span class="keyword">this</span>.job = job;</div><div class="line">	<span class="keyword">this</span>.friends = [<span class="string">"lisi"</span>, <span class="string">"wangwu"</span>]</div><div class="line">&#125;</div><div class="line">Person.prototype = &#123;</div><div class="line">	<span class="attr">constructor</span>: Person,</div><div class="line">	<span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log( <span class="string">"my name is"</span> + <span class="keyword">this</span>.name );</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> zhangsan = <span class="keyword">new</span> Person(<span class="string">"zhangsan"</span>, <span class="number">20</span>, <span class="string">"doctor"</span>);</div><div class="line"><span class="keyword">let</span> lisi = <span class="keyword">new</span> Person(<span class="string">"lisi"</span>, <span class="number">25</span>, <span class="string">"student"</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript 本身其实并不是一门很纯粹的面向对象的语言，为了实现面向对象，ECMAScript 设计出了一种非常成功的数据结构 —— &lt;strong&gt;JSON&lt;/strong&gt;（JavaScript Object Notation），这一经典结构已经可以脱离语言而成为一种广泛应用的数据交互格式。&lt;/p&gt;
&lt;p&gt;应该说，具有数据类型和 JSON 构造语法的 ECMAScript 已经基本可以实现面向对象的编程了。&lt;/p&gt;
    
    </summary>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="面向过程" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>面向对象 - 什么是面向对象</title>
    <link href="http://yoursite.com/2017/10/08/explainOOP/"/>
    <id>http://yoursite.com/2017/10/08/explainOOP/</id>
    <published>2017-10-08T02:15:01.000Z</published>
    <updated>2017-10-13T09:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 从一开始只是一种简单的网页脚本语言，到如今，几乎变得无所不能。从前端到后端，有着各种各匪夷所思的用途，程序员也用它来完成越来越庞大的项目，因此，JavaScript 代码的复杂度也直线上升。单个网页包含几万行甚至几十万行代码都已司空见惯。</p>
<p>那么，编写和维护如此复杂的代码，就必须使用模块化策略。如今业界的主流做法是采用“面向对象编程”。因此，JavaScript 如何实现面向对象编程，就成了很长一段时间内的热门课题。</p>
<a id="more"></a>
<p>那么到底什么是面向对象？话说起来，面向对象的产生还得有产品经理的一份功劳。为什么这么说呢？因为一开始的时候，并没有面向对象，只有面向过程的概念。</p>
<h2 id="面向过程和面向对象"><a href="#面向过程和面向对象" class="headerlink" title="面向过程和面向对象"></a>面向过程和面向对象</h2><h3 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h3><p>面向过程很好理解，指的就是程序员接到需求，会把它拆成一个一个的命令，然后串起来交给计算机去执行。</p>
<p>举个栗子：产品经理说要把你女朋友装进冰箱里。程序员接到需求后列了几个步骤：</p>
<ul>
<li>把冰箱门打开</li>
<li>把你女朋友装进去</li>
<li>把冰箱门关上</li>
</ul>
<p>上面的每一个步骤，程序员都会用一个函数<code>function</code>来实现，每一个函数实现一个功能。</p>
<p>例如我们要定义一个打开冰箱门的函数：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">openTheDoor</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	打开冰箱门;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当所有步骤的函数定义好了之后，依次调用就可以了：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 打开冰箱门</span></div><div class="line">openTheDoor();</div><div class="line"><span class="comment">// 把你装进去</span></div><div class="line">pushYou();</div><div class="line"><span class="comment">// 关闭冰箱门</span></div><div class="line">closeTheDoor();</div></pre></td></tr></table></figure>
<p>程序员把需求分解开来，再一个过程一个过程的去完成，这一系列的操作，就是在面向过程。</p>
<p>好，需求完成。程序员屁颠屁颠的去找产品经理交工。结果产品经理告诉程序员：这才是刚开始呢！</p>
<ul>
<li>“我还要把你女朋友再装进洗衣机里”</li>
<li>“我还要把你也装进冰箱里”</li>
<li>“我还要把你装进冰箱后，冰箱门开着”</li>
<li>“… …”</li>
</ul>
<p>这个时候，如果程序员们还是用面向过程的方法来完成需求，那么下次、下下次…需求再发生变更，程序员就要每次都把整个系统代码通读一遍，然后留下可以用的代码，没有的又去重新定义，最后再来依次调用它们。这样反复折腾几次，代码就会越来越杂乱越来越难以管理。于是最终程序员们不堪重负，纷纷操起刀走上了犯罪的道路。</p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象，就是程序员们在操刀路上想出来应对需求不断更改问题的解决方案。它抛弃了面向过程编程中常用的函数，把<strong>对象</strong>作为了程序的基本单元。</p>
<p>那么对象又到底是个什么东西呢？</p>
<h4 id="对象是什么"><a href="#对象是什么" class="headerlink" title="对象是什么"></a>对象是什么</h4><blockquote>
<p>对象，就是对事物的一种抽象描述。</p>
</blockquote>
<p>现实世界中的事物，都可以看作是对象，同时也都可以用“数据”和“能力”来对其进行描述。例如我们要描述一个人，“数据”就是他的年龄、性别、身高体重。“能力”就是他能做什么工作，承担什么样的责任。</p>
<p>现在对象有了，如何进行面向对象的编程呢？</p>
<h4 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h4><p>要进行面向对象的编程，很简单，依次向不同的对象发送命令，让它们执行自身的“能力”就可以了。回到上面的例子，我们现在用面向对象的方式来实现产品经理的需求。</p>
<p>首先定义一个“冰箱”对象，它的“数据”可以是当前的温度，或者是该冰箱空间是否足够。“能力”就是开门、关门。然后还有一个“你女朋友”对象，你女朋友的数据可以是你女朋友的智商、体重、身高，“能力”可以是“自己跑到冰箱里去”。定义好之后我们就可以依次发送命令：</p>
<ul>
<li>向冰箱下达“开门”的命令；</li>
<li>向你女朋友下达“进冰箱”的命令；</li>
<li>向冰箱下达“关门”的命令；</li>
</ul>
<p>这样，我们通过面向对象的方式同样可以完成“你女朋友进冰箱”的这个需求。</p>
<h2 id="理解面向对象"><a href="#理解面向对象" class="headerlink" title="理解面向对象"></a>理解面向对象</h2><p>为了更好的理解 JavaScript 中的面向对象，首先有必要从面向对象的概念入手，探讨一下面向对象中的几个概念：</p>
<ul>
<li>一切事物皆对象</li>
<li>对象具有封装和继承特性</li>
<li>对象与对象之间使用消息通信，各自存在信息隐藏</li>
</ul>
<p>以这三点做为依据，C++ 是半面向对象半面向过程语言，因为，虽然他实现了类的封装、继承和多态，但存在非对象性质的全局函数和变量。Java、C# 是完全的面向对象语言，它们通过类的形式组织函数和变量，使之不能脱离对象存在。但这里函数本身是一个过程，只是依附在某个类上。</p>
<p>然而，<strong>面向对象仅仅是一个概念或者编程思想</strong>而已，它不应该依赖于某个语言存在。比如 Java 采用面向对象思想构造其语言，它实现了类、继承、派生、多态、接口等机制。但是这些机制，只是实现面向对象编程的一种手段，而非必须。换言之，一门语言可以根据其自身特性选择合适的方式来实现面向对象。但是，由于大多数程序员首先学习或者使用的是类似 Java、C++ 等高级编译型语言（Java 虽然是半编译半解释，但一般做为编译型来讲解），因而先入为主地接受了“类”这个面向对象实现方式，从而在学习脚本语言的时候，习惯性地用类式面向对象语言中的概念来判断该语言是否是面向对象语言，或者是否具备面向对象特性。但是在 ES6 以前，JavaScript 中并没有“类”的概念，所以这也成为了阻碍程序员深入学习并掌握 JavaScript 的重要原因之一。</p>
<p>实际上，在 ES6 之前，JavaScript 语言是通过一种叫做<strong>原型（<code>prototype</code>）</strong>的方式来实现面向对象编程的。但是在 ES6 出来之后，JavaScript 中也引入了“类”的概念。下面就来讨论<strong>基于类的（class-based）面向对象</strong>和<strong>基于原型的 (prototype-based) 面向对象</strong>这两种方式在构造客观世界的方式上的差别。</p>
<h3 id="基于类和基于原型的面向对象方式比较"><a href="#基于类和基于原型的面向对象方式比较" class="headerlink" title="基于类和基于原型的面向对象方式比较"></a>基于类和基于原型的面向对象方式比较</h3><ul>
<li>在基于类的面向对象方式中，对象（<code>object</code>）依靠<strong>类（<code>class</code>）</strong>来产生。</li>
<li>在基于原型的面向对象方式中，对象（<code>object</code>）则是依靠<strong>构造器（<code>constructor</code>）</strong>利用<strong>原型（<code>prototype</code>）</strong>构造出来的。</li>
</ul>
<p>举个客观世界的例子来说明二种方式认知的差异：</p>
<p>例如工厂造一辆车。</p>
<p>一方面，工人必须参照一张工程图纸，设计规定这辆车应该如何制造。这里的工程图纸就好比是语言中的 类 (<code>class</code>)，而车就是按照这个类（<code>class</code>）制造出来的。</p>
<p>另一方面，工人和机器（相当于<code>constructor</code>) 利用各种零部件如发动机，轮胎，方向盘（相当于<code>prototype</code>的各个属性）将汽车构造出来。</p>
<p>那么关于这两种方式谁更为彻底地表达了面向对象的思想呢？没有结论。</p>
<p>但是因为现在 JavaScript 中也已经引入了类的概念。所以，对于 JavaScript 开发者来说，这两种方式都是需要掌握的。所以，这两种方式的具体用法我们后面都会讲到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript 从一开始只是一种简单的网页脚本语言，到如今，几乎变得无所不能。从前端到后端，有着各种各匪夷所思的用途，程序员也用它来完成越来越庞大的项目，因此，JavaScript 代码的复杂度也直线上升。单个网页包含几万行甚至几十万行代码都已司空见惯。&lt;/p&gt;
&lt;p&gt;那么，编写和维护如此复杂的代码，就必须使用模块化策略。如今业界的主流做法是采用“面向对象编程”。因此，JavaScript 如何实现面向对象编程，就成了很长一段时间内的热门课题。&lt;/p&gt;
    
    </summary>
    
      <category term="面向对象" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="面向过程" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>闭包（closure）- 什么是闭包</title>
    <link href="http://yoursite.com/2017/10/07/closureDefinition/"/>
    <id>http://yoursite.com/2017/10/07/closureDefinition/</id>
    <published>2017-10-07T02:15:01.000Z</published>
    <updated>2017-10-10T05:52:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几年，闭包几乎成为了前端面试必问的一个问题。它非常重要又难以掌握，而且还难以定义。所以，这篇文章我们主要说的就是关于闭包的定义。</p>
<a id="more"></a>
<h2 id="定义一"><a href="#定义一" class="headerlink" title="定义一"></a>定义一</h2><p>在犀牛书（《JavaScript 权威指南（第六版）》）的第 8 章（ 182页 ）讲到了闭包。在第 183 页阐述了对闭包的定义。</p>
<p>书本内容截图如下：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fkcwtoyximj316801mmxx.jpg" alt=""><br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fkcwwddt14j3168030t9y.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fkcwh6dfovj312k06ggmk.jpg" alt=""></p>
<blockquote>
<p>闭包(closure)，是指函数对象通过作用域链互相关联，函数内的变量可以保存在函数作用域内，因此看起来是函数将变量“包裹”了起来。</p>
</blockquote>
<p>按照这种定义方式，那也就是说，包含变量的函数就是闭包。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> n = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log( n );    <span class="comment">// 报错：n is not defined</span></div></pre></td></tr></table></figure>
<h2 id="定义二"><a href="#定义二" class="headerlink" title="定义二"></a>定义二</h2><blockquote>
<p>闭包(closure)，是指可以访问其所在所用域的函数。</p>
</blockquote>
<p>按照这种定义方式，那也就是说，需要通过作用域链查找变量的函数就是闭包。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n = <span class="number">10</span>;</div><div class="line"><span class="comment">// fn 在全局作用域中</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// 访问全局作用域中的变量 n</span></div><div class="line">	<span class="built_in">console</span>.log( n );</div><div class="line">&#125; </div><div class="line">fn();</div></pre></td></tr></table></figure>
<h2 id="定义三"><a href="#定义三" class="headerlink" title="定义三"></a>定义三</h2><p>在红皮书（《JavaScript 高级程序设计（第 3 版）》）的第 7 章（ 第178页 ）讲到了闭包，并阐述了对闭包的定义。</p>
<p>书本内容截图如下：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fkcxcbrxypj316i05sgny.jpg" alt=""></p>
<blockquote>
<p>闭包(closure)，是指有权访问另一个函数作用域中的变量的函数。</p>
</blockquote>
<p>按照这种定义方式，那也就是说，访问上层函数作用域内变量的内层函数也属于闭包。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> n = <span class="number">10</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> m = <span class="number">20</span>;</div><div class="line">		<span class="built_in">console</span>.log( n );</div><div class="line">	&#125;</div><div class="line">	inner();</div><div class="line">&#125;</div><div class="line">outer();</div></pre></td></tr></table></figure>
<h2 id="定义四"><a href="#定义四" class="headerlink" title="定义四"></a>定义四</h2><p>在《你不知道的 JavaScript（上卷）》的第 5 章（ 第43页 ）讲到了闭包，在第 44 页阐述了对闭包的定义。</p>
<p>书本内容截图如下：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fkcxmowvooj316805u0ui.jpg" alt=""></p>
<p>定义四其实就跟定义三有些相似了。定义三描述的是“访问另一个作用域”，定义四描述的是“访问当前函数所在的作用域”。这两句话的区别在那里呢？</p>
<p>定义三 例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">100</span>;</div><div class="line">	bar(a);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">	<span class="comment">// bar 访问另一个作用域 foo 中的变量 a</span></div><div class="line">	<span class="built_in">console</span>.log( a )</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo();</div></pre></td></tr></table></figure>
<p>定义四 例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">100</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">// bar 访问自身所在 foo 作用域中的变量 a</span></div><div class="line">		<span class="built_in">console</span>.log( a )</div><div class="line">	&#125;</div><div class="line">	bar();</div><div class="line">&#125;</div><div class="line">foo();</div></pre></td></tr></table></figure>
<p>通过上面两个例子我们就可以看出定义三和定义四的区别了。</p>
<p>那么，定义四的这个例子就属于标准的闭包了吗？书中有一句是这么描述的：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fkcyb4otg6j30ww01i74q.jpg" alt=""></p>
<p>为什么呢？因为通过这种方式定义的闭包并不能直接进行观察，也无法明白在这个代码片段中闭包是如何工作的。</p>
<p>我们对定义四的例子稍微修改一下，就可以清晰的展示闭包了。</p>
<p>例一：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">100</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">// bar 访问自身所在 foo 作用域中的变量 a</span></div><div class="line">		<span class="built_in">console</span>.log( a )</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> baz = foo();</div><div class="line"><span class="comment">// bar 在全局作用域中调用</span></div><div class="line">baz();</div></pre></td></tr></table></figure>
<p>这才是闭包的效果。</p>
<p>函数<code>bar</code>作为返回值被<code>return</code>出来，然后在自己定义的作用域以外的地方被调用并正常执行。</p>
<blockquote>
<p>闭包（closure），是指函数可以记住并访问所在作用域的变量，同时该函数在当前作用域之外被调用。</p>
</blockquote>
<p>那么，满足这个闭包定义的，除了我们上面例一中将函数作为返回值这种情况之外，还有一种情况：将函数作为参数传递。</p>
<p>例二：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">100</span>;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="comment">// bar 访问自身所在 foo 作用域中的变量 a</span></div><div class="line">		<span class="built_in">console</span>.log( a )</div><div class="line">	&#125;</div><div class="line">	baz(bar);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">fn</span>)</span>&#123;</div><div class="line">	<span class="comment">//bar 在 baz 作用域中调用</span></div><div class="line">	fn();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因此，无论通过何种手段，只要将内部函数传递到所在作用域以外，它都会持有对声明时所在所用域的引用。那么，无论在何处执行这个函数都会形成闭包。</p>
<h2 id="IIFE（立即执行函数）"><a href="#IIFE（立即执行函数）" class="headerlink" title="IIFE（立即执行函数）"></a>IIFE（立即执行函数）</h2><p>很多人都认为 IIFE 时典型的闭包例子，那 IIFE 到底是不是闭包呢？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( a );</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>按照定义二的描述来判断的话，<code>foo</code>在全局作用域中定义，同时又访问了全局作用域中的变量<code>a</code>，那么它应该是闭包。</p>
<p>但是如果按照定义三和定义四来判断的话，它既没有访问另一个函数作用域中的函数，同时<code>foo</code>函数也没有在它本身的作用域以外调用，因此它应该又不是闭包。</p>
<p>实际上，IIFE 本身虽然并不是观察闭包的恰当例子，但它确实是创建了闭包，并且也是最常用来创建可以被封闭起来的闭包的工具。</p>
<p>在 IIFE 中最常见的操作就是通过<code>window.fn = fn</code>来暴露接口。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">0</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log( a );</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">window</span>.fn = fn;</div><div class="line">&#125;)();</div><div class="line">fn();</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>闭包的定义之所以混乱，可能也是因为不同的书籍有不同的解读，加上现在很多程序员们对于闭包也有自己的见解，所以导致我们每次看到的关于闭包的定义好像都不一样。这样对于初学者来说就是一件很麻烦的事了，所以也就导致闭包成了大部分初级程序员们头痛的问题。</p>
<p>虽然我们上面列出了关于闭包的好几种定义，但是归纳一下也不难理解。</p>
<p>一个函数要形成闭包需要满足以下几个条件：</p>
<ul>
<li>访问自身所在作用域；</li>
<li>函数嵌套；</li>
<li>在自身所在作用域以外被调用；</li>
</ul>
<p>严格来说，应该三个条件都满足才算是闭包，但是也有很多人认为满足三个条件其中一部分也可以形成闭包。</p>
<p>这个并没有一个很权威的说法，所以，还是个人看个人的理解了…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几年，闭包几乎成为了前端面试必问的一个问题。它非常重要又难以掌握，而且还难以定义。所以，这篇文章我们主要说的就是关于闭包的定义。&lt;/p&gt;
    
    </summary>
    
      <category term="闭包" scheme="http://yoursite.com/categories/%E9%97%AD%E5%8C%85/"/>
    
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>作用域链（Scope Chain）</title>
    <link href="http://yoursite.com/2017/10/05/scopeChian/"/>
    <id>http://yoursite.com/2017/10/05/scopeChian/</id>
    <published>2017-10-05T15:44:11.000Z</published>
    <updated>2017-10-08T14:01:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多人都认为作用域链跟作用域有很大的关系，所以每次学习这两个知识点的时候都是把两个概念混在一起研究，结果越弄越晕。</p>
<p>但是实际上，这两个概念之间并没有太大的联系，所以，这次我们把这两个概念分开来讲。前面在<a href="https://runjaelyn.github.io/2017/10/03/scope/" target="_blank" rel="external">《作用域（scope）》</a>一章中我们已经对作用域进行了分析，所以这一章我们主要讲的是作用域链。</p>
<a id="more"></a>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>回顾一下我们前面在<a href="https://runjaelyn.github.io/2017/10/04/VariableObject/" target="_blank" rel="external">《变量对象（Variable Object）》</a>这一篇博客中对执行上下文的生命周期进行了分析。如下图：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fiheks8zdnj31dw0euacz.jpg" alt=""></p>
<p>我们知道，当函数被调用激活时，会开始创建对应的执行上下文。在执行上下文生成的过程中，<strong>变量对象</strong>、<strong>作用域链</strong>、以及<strong><code>this</code></strong>的值会分别被确定。在前面我们已经详细讲解了关于变量对象的分析，所以这里，我们接着来分析作用域链。</p>
<blockquote>
<p>作用域链，是由当前上下文与上层上下文中的一系列变量对象组成，它保证了当前执行环境对符合访问权限的变量和函数的有序访问。</p>
</blockquote>
<h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><p>但看文字估计还是不太能理解到底什么是作用链，所以我们通过一个例子，结合代码和图解来具体进行分析说明。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">20</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> b = a + <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">let</span> c = <span class="number">10</span>;</div><div class="line">        <span class="keyword">return</span> b + c;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> inner();</div><div class="line">&#125;</div><div class="line"></div><div class="line">outer();</div></pre></td></tr></table></figure>
<p>在这个例子中，全局上下文、<code>outer()</code>上下文、<code>inner()</code>上下文先后创建。而在它们各自的上下文中包含了它们自己的变量对象。分别是：<code>VO(global)</code>、<code>VO(outer)</code>、<code>VO(inner)</code>。而<code>inner</code>的作用域链，又同时包含了这三个变量对象。所以<code>inner</code>的执行上下文如下所示：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">innerEC = &#123;</div><div class="line">    VO(inner): &#123;...&#125;,  <span class="comment">// 自己的变量对象</span></div><div class="line">    scopeChain: [VO(inner), VO(outer), VO(global)]   <span class="comment">//作用域链</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以直接用一个数组来表示作用链，数组的第一项<code>scopeChain[0]</code>作为作用域链的最前端，而数组的最后一项，作为作用域链的最末端。因此，所有的作用域链的最末端都是全局变量对象。</p>
<p>很多人在理解作用域链的时候会把当前作用域和上层作用域之间想象成包含关系。但其实我觉得另一种形容作用域链结构的描述可能更贴切：以最前端为起点，最末端为终点的单方向通道。</p>
<p>所以，上面这个例子中<code>inner</code>函数的作用域链如下图所示：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fk1jk33jgbj31aw0jiq6l.jpg" alt=""></p>
<blockquote>
<p>当执行上下文进入执行阶段时，变量对象就变成了活动对象（这一点我们在讲变量对象那一篇博客中已经讲过）。因此，上面的图解中我们用了<code>AO</code>（Active Object）来表示。</p>
</blockquote>
<p>所以，作用域链是由一系列变量对象组成，我们可以在这个单向通道中，查询变量对象中的标识符，这样就可以访问到上一层作用域中的变量了。</p>
<h2 id="综合练习"><a href="#综合练习" class="headerlink" title="综合练习"></a>综合练习</h2><p>到此我们已经讲了执行上下文、作用域、变量对象和作用域链，所以我们通过一个例子，把这些知识点结合到一起来分析理解一下。</p>
<p>案例一：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> food = <span class="string">"巧克力味的屎"</span>;</div><div class="line"><span class="keyword">var</span> eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"吃"</span> + food );</div><div class="line">&#125;;</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> food = <span class="string">"屎味的巧克力"</span>;</div><div class="line">	eat();</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fkb6g3w2xij31jy12swoj.jpg" alt=""></p>
<p>我们案例一的代码图解就如上图所示：</p>
<p>全局上下文在浏览器打开的同时产生，后面的两个局部上下文都是在函数调用时才产生。上下文创建好的同时，在上下文的内部创建出了变量对象和作用域链。</p>
<p>那么，我们画出了作用域链有什么作用呢？</p>
<p>我们看到，在最后一个函数<code>eat</code>调用后，内部有一行代码<code>console.log( &quot;吃&quot; + food )</code>会被执行，那么这个输出的结果会是什么呢？</p>
<p>我们来分析一下：</p>
<ul>
<li><code>eat</code>函数内需要访问变量<code>food</code>，在 eatAO 里面查找<code>food</code>发现没有该变量。</li>
<li>沿着<code>eat</code>的作用域链 eatSC 找到 IIFEAO。</li>
<li>在 IIFE 的局部上下文中发现它的变量对象 IIFEAO 里有变量<code>food</code>。</li>
<li>得到<code>food</code>的值是<code>屎味的巧克力</code>。</li>
<li><code>console.log( &quot;吃&quot; + food )</code>输出的结果应该是<code>吃屎味的巧克力</code>。</li>
</ul>
<p>我们运行代码，查看到结果如下：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fkb1lnriqcj314i0ck75v.jpg" alt=""></p>
<p>我们可以看到运行结果非常醒目的显示着吃屎。</p>
<p>为什么代码运行结果跟我们分析出来的结果不一样呢？问题出在一个地方：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fkb6kxmatoj317m0mi42s.jpg" alt=""></p>
<blockquote>
<p>每一个作用域链，它的前端始终是当前代码的执行上下文的变量对象，而它的末端也始终是全局上下文的变量对象。</p>
</blockquote>
<p>那么对于我们<code>eat</code>的作用域链，它的中间到底有没有 IIFEAO 这个活动对象？通过上面的代码运行结果我们可以知道，肯定是没有了。那为什么没有呢？</p>
<blockquote>
<p>作用域链中包含的每一个变量对象，都应该是前一个变量对象所在函数声明时所在的上下文内的变量对象。</p>
</blockquote>
<p>也就是说，<code>eat</code>函数声明时所在的上下文是全局上下文，所以，<code>eat</code>作用域链中的第二个变量对象应该是全局上下文中的变量对象。</p>
<p>如下图所示：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fkb6p6x43vj317k12wgtz.jpg" alt=""></p>
<p>这样，我们<code>eat</code>函数在查找<code>food</code>变量时会沿着作用域链最终查找到 globalAO 中去，得到<code>food=&quot;巧克力味的屎&quot;</code>的结果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多人都认为作用域链跟作用域有很大的关系，所以每次学习这两个知识点的时候都是把两个概念混在一起研究，结果越弄越晕。&lt;/p&gt;
&lt;p&gt;但是实际上，这两个概念之间并没有太大的联系，所以，这次我们把这两个概念分开来讲。前面在&lt;a href=&quot;https://runjaelyn.github.io/2017/10/03/scope/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《作用域（scope）》&lt;/a&gt;一章中我们已经对作用域进行了分析，所以这一章我们主要讲的是作用域链。&lt;/p&gt;
    
    </summary>
    
      <category term="执行上下文" scheme="http://yoursite.com/categories/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
    
      <category term="作用域链" scheme="http://yoursite.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>变量对象（Variable Object）</title>
    <link href="http://yoursite.com/2017/10/04/VariableObject/"/>
    <id>http://yoursite.com/2017/10/04/VariableObject/</id>
    <published>2017-10-04T15:44:49.000Z</published>
    <updated>2017-10-16T02:01:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，我们不可避免的需要声明变量和函数，可是 JavaScript 编译器是如何找到这些变量的呢？所以我们还需要对执行上下文有一个进一步的了解。</p>
<a id="more"></a>
<h2 id="执行上下文生命周期"><a href="#执行上下文生命周期" class="headerlink" title="执行上下文生命周期"></a>执行上下文生命周期</h2><p>在前面<a href="https://runjaelyn.github.io/2017/10/03/scope/" target="_blank" rel="external">《作用域（scope）》</a>中我们已经知道，代码的执行过程实际上分为代码编译过程和代码执行过程。但前面没有讲到的是，这两个阶段，其实就是一个执行上下文的生命周期。</p>
<ul>
<li><p><strong>执行上下文创建阶段</strong></p>
<p>  在这个阶段中，执行上下文创建，同时其内部会分别创建变量对象(VO)、建立作用域链(SC)，以及确定<code>this</code>的指向（之前确定好的作用域也会添加进来）。</p>
</li>
<li><p><strong>代码执行阶段</strong></p>
<p>  创建阶段完成后，就会开始执行代码。这个时候，会完成变量赋值、函数引用，以及执行其他代码。</p>
<p>  <img src="https://ws4.sinaimg.cn/large/006tNc79gy1fiheks8zdnj31dw0euacz.jpg" alt=""></p>
</li>
</ul>
<p>到这里我们就可以看出来详细了解执行上下文有多重要了。这里面涉及的作用域、变量对象、作用域链、this等等，恰好都是很多人一直弄不明白，但又极为重要的概念。作用域前面我们已经讲了，其他的概念我们后面都会一一详细总结，而这篇博客我们重点了解“变量对象（VO）”。</p>
<h2 id="变量对象"><a href="#变量对象" class="headerlink" title="变量对象"></a>变量对象</h2><p>变量对象，Variable Object，简称 VO。用来记录在当前作用域中可以访问到的变量。</p>
<h3 id="变量对象创建过程"><a href="#变量对象创建过程" class="headerlink" title="变量对象创建过程"></a>变量对象创建过程</h3><p>变量对象的创建，依次经历了以下几个过程：</p>
<ol>
<li><p>建立<code>arguments</code>对象：检查当前作用域中的函数参数，建立该对象下的属性名与属性值。</p>
</li>
<li><p>检查当前作用域的声明式函数：在变量对象中以函数名建立一个属性，属性值为指向该函数所在的内存地址的引用。如果函数名的属性已经存在，那么该属性将会被新的引用所覆盖。</p>
</li>
<li><p>检查当前作用域中<code>var</code>的变量声明：每找到一个变量声明，就在变量对象中以变量名建立一个属性，属性值为<code>undefined</code>。如果该变量名的属性已经存在，为了防止同名的函数被修改为<code>undefined</code>，则会直接跳过，原属性值不会被修改。</p>
</li>
</ol>
<p>知道有些人看文字比较晕，我们通过图解再来理解一下：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk9snyw14nj31eo0vytfo.jpg" alt=""></p>
<p>其实在这个过程中，就涉及到了我们变量提升和函数提升，这个知识点我们在前面<a href="https://runjaelyn.github.io/2017/10/06/hoisting/" target="_blank" rel="external">《变量提升和函数提升》</a>已经详细讲过了，这里就不再多说。</p>
<h2 id="代码实例分析"><a href="#代码实例分析" class="headerlink" title="代码实例分析"></a>代码实例分析</h2><p>如果对于上面的描述还是不太能理解的，我们就通过一个简单的例子来帮助大家进一步的理解变量对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( a );</div><div class="line">	<span class="built_in">console</span>.log( inner() );</div><div class="line">	</div><div class="line">	<span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">outer();</div></pre></td></tr></table></figure>
<p>我们直接从函数<code>outer</code>的执行上下文开始分析。全局上下文中运行<code>outer()</code>时，<code>outer</code>函数的执行上下文开始进入创建阶段。为了便于理解，我们换一个形式来表示：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// outer 的上下文 outerEC</span></div><div class="line">outerEC = &#123;</div><div class="line">	<span class="attr">outerVO</span>: &#123;&#125;, <span class="comment">// 变量对象</span></div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line">outerVO = &#123;</div><div class="line">	<span class="attr">arguments</span>: &#123;...&#125;,</div><div class="line">	<span class="attr">inner</span>: &lt;inner reference&gt;, // 表示 inner 的地址引用</div><div class="line">	a: undefined</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fka3q97cy0j314k0jgn06.jpg" alt=""></p>
<p>未进入代码执行阶段之前，变量对象中的属性都不能访问。但是进入执行阶段之后，变量对象就会转变为活动对象，而活动对象里面的属性就都能被访问了，然后就可以开始进行代码执行阶段的操作。</p>
<blockquote>
<p>变量对象和活动对象，它们其实就是同一个对象，只是处于执行上下文不同的生命周期有不同的名字。</p>
</blockquote>
<p>所以，当处于执行阶段时，执行上下文的状态就变成了如下所示：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// outer 的上下文 outerEC</span></div><div class="line">outerEC = &#123;</div><div class="line">	<span class="attr">outerVO</span>: &#123;&#125;, <span class="comment">// 变量对象</span></div><div class="line">	... ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">outerVO --&gt; outerAO (Active <span class="built_in">Object</span>)</div><div class="line">outerAO = &#123;</div><div class="line">	<span class="attr">arguments</span>: &#123;...&#125;,</div><div class="line">	<span class="attr">inner</span>: &lt;inner reference&gt;, // 表示 inner 的地址引用</div><div class="line">	a: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fka3s2jg64j314i0iqtbl.jpg" alt=""></p>
<p>因此，我们这个例子中代码的执行顺序就变成了下面这样：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fk9zssoom0j31gk0hm42k.jpg" alt=""></p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>为了巩固对变量对象的理解，我们最后再来分析一个代码例子。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( foo );</div><div class="line">    <span class="built_in">console</span>.log( bar );</div><div class="line"></div><div class="line">    <span class="keyword">var</span> foo = <span class="string">'Hello'</span>;</div><div class="line">    <span class="built_in">console</span>.log( foo );</div><div class="line">    <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'world'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'hello'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">test();</div></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fka3xdma5qj315w0jgn0r.jpg" alt=""></p>
<p>因此，这个例子中代码的执行顺序最后就变成了下面这样:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fka0890z76j31i20pen3p.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 JavaScript 中，我们不可避免的需要声明变量和函数，可是 JavaScript 编译器是如何找到这些变量的呢？所以我们还需要对执行上下文有一个进一步的了解。&lt;/p&gt;
    
    </summary>
    
      <category term="执行上下文" scheme="http://yoursite.com/categories/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
    
      <category term="执行上下文" scheme="http://yoursite.com/tags/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
      <category term="生命周期" scheme="http://yoursite.com/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
      <category term="变量对象" scheme="http://yoursite.com/tags/%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>作用域（scope）</title>
    <link href="http://yoursite.com/2017/10/03/scope/"/>
    <id>http://yoursite.com/2017/10/03/scope/</id>
    <published>2017-10-03T13:15:01.000Z</published>
    <updated>2017-10-08T13:32:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在前一章我们刚刚讲了<a href="https://runjaelyn.github.io/2017/10/03/ExecutionContext/" target="_blank" rel="external">《执行上下文（Execution Context）》</a>，然后这一章我们主要讲的是作用域（scope）。</p>
<p>为什么会把这两个知识点放到一块儿来讲呢，因为我觉得，相比起“作用域和作用域链”来说，“作用域和执行上下文”才是更多人容易弄混淆的两个概念。</p>
<a id="more"></a>
<h2 id="作用域的概念"><a href="#作用域的概念" class="headerlink" title="作用域的概念"></a>作用域的概念</h2><p>我们先来看“作用域”这三个字是什么意思。我们把“作用”和“域”拆开来看。</p>
<ul>
<li>作用：访问、操作、调用…</li>
<li>域：区域、范围、空间…</li>
</ul>
<blockquote>
<p>因此，作用域就是变量和函数的可访问范围，或者说变量或函数起作用的区域。</p>
</blockquote>
<h2 id="编译器和引擎"><a href="#编译器和引擎" class="headerlink" title="编译器和引擎"></a>编译器和引擎</h2><p>在完全理解作用域之前，我们还需要了解另外两个东西：一个是编译器，一个是引擎。</p>
<p>在前面我们讲<a href="https://runjaelyn.github.io/2017/10/03/ExecutionContext/" target="_blank" rel="external">《变量提升和函数提升》</a>这一章的时候，就已经知道：代码的执行过程实际上大致分为两个阶段：</p>
<ol>
<li>代码编译阶段：这个阶段，内部代码并未开始执行，只是将代码编译成了可执行的代码。</li>
<li>代码执行阶段：这个阶段，代码开始执行，即执行第一步中编译完成的可执行代码。</li>
</ol>
<p>而完成这两个阶段工作的，就是我们的编译器和引擎。</p>
<ul>
<li><strong>编译器</strong>：负责语法分析及代码生成等工作。</li>
<li><strong>引擎</strong>：负责整个 JavaScript 程序的执行过程。</li>
</ul>
<h2 id="作用域的分类"><a href="#作用域的分类" class="headerlink" title="作用域的分类"></a>作用域的分类</h2><p>前面我们说了作用域就是一个范围，那么这个范围有多大呢？怎么去确定这个范围大小呢？</p>
<p>作用域根据作用范围就分为两类：</p>
<ul>
<li>全局作用域</li>
<li>局部作用域（也叫做函数作用域）</li>
</ul>
<p>通过这个分类我们就可以知道，JavaScript 中的作用域是通过函数来划分的，函数以内的范围就是局部作用域，函数以外的范围就是全局作用域。</p>
<p>我们通过一个代码例子来具体看一下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line">	</div><div class="line">	<span class="built_in">console</span>.log( a );    <span class="comment">// 1</span></div><div class="line">	<span class="built_in">console</span>.log( b );    <span class="comment">// 2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">test();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( a );    <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log( b );    <span class="comment">// 报错</span></div></pre></td></tr></table></figure>
<p>但是，以上情况都是只针对 ES5 来讲的。</p>
<p>在 ES6 中，因为加入了<code>let</code>关键字，用<code>let</code>声明的变量具有块级作用域。所以，在 ES5 中不存在块级作用域，但在 ES6 中除了通过函数可以划分作用域以外，大括号也可以划分块级作用域。</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">	<span class="keyword">let</span> b = <span class="number">2</span>;</div><div class="line">	</div><div class="line">	<span class="built_in">console</span>.log( a );    <span class="comment">// 1</span></div><div class="line">	<span class="built_in">console</span>.log( b );    <span class="comment">// 2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( a );        <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log( b );        <span class="comment">// 报错</span></div></pre></td></tr></table></figure>
<p><code>if</code>语句的大括号让变量<code>b</code>的作用域范围只能在<code>if</code>的大括号内部。</p>
<h2 id="作用域的产生"><a href="#作用域的产生" class="headerlink" title="作用域的产生"></a>作用域的产生</h2><p>我们知道了作用域的概念和分类。那么，作用域的产生呢？我们前面提到了代码的执行分为了两个阶段，那么作用域是在哪个阶段产生的呢？</p>
<p>作用域就是一个范围，一个变量和函数可以任由你使用的范围。而我们的编译器在代码编译阶段就已经在解析我们的变量和函数了，因此：</p>
<blockquote>
<p>作用域的范围是在函数声明时确定的。</p>
</blockquote>
<h2 id="作用域与执行上下文"><a href="#作用域与执行上下文" class="headerlink" title="作用域与执行上下文"></a>作用域与执行上下文</h2><p>我们已经分析讲解完了作用域和执行上下文这两个知识点，也基本知道作用域和执行上下文各自的职责，可以看出它们几乎是没有什么交集的。那么为什么很多人还是会把这两者弄混呢？它们两个之间到底什么区别和联系呢。</p>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>执行上下文的概念是指当前代码的执行环境。而作用域的概念是指变量和函数的作用范围。因此，执行上下文和作用域最大的区别就在于：</p>
<ul>
<li>执行上下文：是代码的执行环境，用来控制代码的运行情况。</li>
<li>作用域：是代码的执行范围，用来控制代码的作用区域。</li>
</ul>
<p>我们在讲执行上下文的时候说过，执行上下文是在函数调用时产生的。而作用域，是在函数声明时产生的。</p>
<p>所以，它们的第二个区别，产生时间的区别：</p>
<ul>
<li>执行上下文：执行上下文在函数调用时创建。</li>
<li>作用域：作用域的范围在函数声明式确定。</li>
</ul>
<h3 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h3><p>在一个函数被执行时，创建的执行上下文对象除了保存了些代码执行的信息，还会把当前的作用域保存在执行上下文中。</p>
<p>虽然作用域先出现，执行上下文后出现，但是作用域最终还是会保存在执行上下文中，所以它们的联系就是有一个存储关系。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在前一章我们刚刚讲了&lt;a href=&quot;https://runjaelyn.github.io/2017/10/03/ExecutionContext/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《执行上下文（Execution Context）》&lt;/a&gt;，然后这一章我们主要讲的是作用域（scope）。&lt;/p&gt;
&lt;p&gt;为什么会把这两个知识点放到一块儿来讲呢，因为我觉得，相比起“作用域和作用域链”来说，“作用域和执行上下文”才是更多人容易弄混淆的两个概念。&lt;/p&gt;
    
    </summary>
    
      <category term="执行上下文" scheme="http://yoursite.com/categories/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
    
      <category term="执行上下文" scheme="http://yoursite.com/tags/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
      <category term="作用域" scheme="http://yoursite.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>执行上下文（Execution Context）</title>
    <link href="http://yoursite.com/2017/10/03/ExecutionContext/"/>
    <id>http://yoursite.com/2017/10/03/ExecutionContext/</id>
    <published>2017-10-03T03:15:01.000Z</published>
    <updated>2017-10-07T08:35:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>执行上下文是 JavaScript 里很重要的一个概念，同时也是很多人一直理不清楚的一个知识点。因为它里面包含的不单单只是一个执行上下文的用法，还涉及到了很多其他大大小小的知识点。</p>
<p>但是因为变量和函数都与执行上下文有密切的关系，弄明白执行上下文，对我们以后学习 JavaScript 都有很大的帮助。所以写了这篇文章，来对执行上下文进行一个大致的分析讲解。</p>
<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在理解执行上下文的内部原理之前，我们先来弄明白“执行上下文”的字面意思。</p>
<h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><p>“上下文”这个词不是我们第一次听说。在学生时代做语文阅读题的时候，我们常常会看到这种题目：</p>
<blockquote>
<p>结合上下文，分析这句话作者想要表达什么意思？</p>
</blockquote>
<p>说得通俗易懂一点，出题者实际上就是让你结合这句话出现时的环境，来分析这句话在当前环境中所表达的意思。</p>
<p>所以，上下文 —— 其实就是“环境”的意思。</p>
<h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><p>同理，执行上下文，自然就是“执行环境”的意思了。</p>
<p>在 JavaScript 中，一段代码执行之后是什么结果，取决于它执行时所处的环境，即当前代码的执行上下文。</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>所以，说了这么多，执行上下文到底是什么？</p>
<blockquote>
<p>执行上下文，就是当前代码的执行环境。</p>
</blockquote>
<h2 id="执行上下文的分类"><a href="#执行上下文的分类" class="headerlink" title="执行上下文的分类"></a>执行上下文的分类</h2><p>在 JavaScript 中有三种代码运行的环境。也就是说执行上下文，分为了三类：</p>
<ul>
<li>全局上下文</li>
<li>局部上下文</li>
<li>eval上下文</li>
</ul>
<h3 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h3><p>当我们打开浏览器的时候就已经存在了一个全局的执行环境，这个全局的执行环境就是我们所说的“全局上下文”。全局上下文属于浏览器，只要没有关闭浏览器，全局上下文就会一直存在。</p>
<h3 id="局部上下文"><a href="#局部上下文" class="headerlink" title="局部上下文"></a>局部上下文</h3><p>当一个函数被调用时，会产生一个函数体内的执行环境，这个函数体内的执行环境就是我们所说的“局部上下文”。局部上下文属于函数，所以当函数执行完成后，当前局部上下文就会销毁掉。</p>
<h3 id="eval上下文"><a href="#eval上下文" class="headerlink" title="eval上下文"></a>eval上下文</h3><p>用的少，也不推荐使用，所以不讲。ㄟ( ▔, ▔ )ㄏ</p>
<h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><p>我们在前面提到：当浏览器打开时，就存在一个全局上下文，每次调用一个函数，又会产生局部上下文。当函数调用完成时，它的上下文以及其中的数据都会被消除，最终再重新回到全局上下文中。</p>
<blockquote>
<p>因为 JavaScript 是单线程语言。因此，处于活动状态的执行上下文只有一个。</p>
</blockquote>
<p>那么，在一段代码中，除了全局上下文之外可能还会不断产生很多新的执行上下文，怎么才能让处于活动状态的执行上下文只有一个呢？</p>
<p>其实这就是一个<strong>压栈出栈</strong>的过程 —— 执行上下文栈。如下图：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fih36fiku8j31d40ke41y.jpg" alt=""></p>
<p>全局上下文在浏览器关闭之后出栈。</p>
<p>附：“栈空间”就是指的内存空间里的一块区域。需要详细了解栈空间的可以先去看前面的<a href="https://runjaelyn.github.io/2017/12/05/memory/" target="_blank" rel="external">《JavaScript 内存空间》</a>这篇文章。</p>
<h3 id="代码例子分析"><a href="#代码例子分析" class="headerlink" title="代码例子分析"></a>代码例子分析</h3><p>我们通过一段来具体看一下执行上下文的压栈出栈过程。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log( <span class="string">"inner"</span> );</div><div class="line">	&#125;</div><div class="line">	inner();</div><div class="line">&#125;</div><div class="line">outer();</div></pre></td></tr></table></figure>
<p>这里还是通过图解来进行分析。首先第一步：全局上下文入栈。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fih5cfc4azj31e00mmjuo.jpg" alt=""></p>
<p>全局上下文入栈后，其中的可执行代码开始执行。直到执行到第 7 行代码<code>outer()</code>，函数<code>outer</code>被调用，激活函数<code>outer</code>创建它自己的执行上下文。</p>
<p>因此，第二步：函数<code>outer</code>的执行上下文入栈。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fih68sa2o2j31e00mg0wa.jpg" alt=""></p>
<p><code>outer</code>的上下文入栈了之后，JavaScript 解释器开始执行<code>outer</code>函数内部的可执行代码。遇到<code>inner()</code>后又开始调用<code>inner</code>函数，激活函数<code>inner</code>创建它自己的执行上下文。</p>
<p>因此，第三步：函数<code>inner</code>的执行上下文入栈。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fih6grz45sj31e00mgtcn.jpg" alt=""></p>
<p><code>inner</code>的上下文入栈了之后，JavaScript 解释器开始执行<code>inner</code>函数内部的可执行代码，然后没有再遇到其他能生成执行上下文的情况，因此函数<code>inner</code>内的代码顺利执行完毕，<code>inner</code>的上下文销毁。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fih6npspxsj31kw0ikq7b.jpg" alt=""></p>
<p><code>inner</code>的上下文销毁之后，继续执行函数<code>outer</code>内的可执行代码，也没有再遇到其他能生成执行上下文的情况，因此函数<code>outer</code>内的代码也顺利执行完毕，<code>outer</code>上下文销毁。这样，栈空间中就只剩下全局上下文了。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fih6tgch25j31kw0gptdg.jpg" alt=""></p>
<p>当浏览器窗口关闭后全局上下文出栈。</p>
<blockquote>
<p>注意：在函数中，如果遇到<code>return</code>会直接终止函数内可执行代码的执行，因此函数调用也会立即完成，所以函数的上下文也会立即从栈空间中销毁。</p>
</blockquote>
<p>通过上面的例子我们可以知道，处于活动状态的执行上下文永远都只有栈空间内最顶层的那一个。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>为了巩固对执行上下文的理解，我们最后再来分析一个代码例子。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> n = <span class="number">123</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log( n );</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result = foo();</div><div class="line">result(); <span class="comment">// 123</span></div></pre></td></tr></table></figure>
<p>函数<code>bar</code>在函数<code>foo</code>中，并没有被调用执行。因此，执行<code>foo</code>的时，<code>bar</code>不会创建新的上下文，而是直到<code>result</code>执行时，才创建了一个新的。具体过程如下：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fih963p8buj31kw0fuq79.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>了解完整个过程之后，我们就可以对执行上下文总结一些结论了。</p>
<ul>
<li>单线程。</li>
<li>同步执行，只要栈顶的上下文处于执行中，其他上下文需要等待。</li>
<li>全局上下文只有唯一的一个，在浏览器打开时创建入栈，在浏览器关闭时销毁出栈。</li>
<li>局部上下文个数没有限制，在每次函数被调用时创建入栈，函数执行完成后销毁出栈。</li>
<li>同一个函数被调用多少次，就会产生多少执行上下文，即使是自己调用自己。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;执行上下文是 JavaScript 里很重要的一个概念，同时也是很多人一直理不清楚的一个知识点。因为它里面包含的不单单只是一个执行上下文的用法，还涉及到了很多其他大大小小的知识点。&lt;/p&gt;
&lt;p&gt;但是因为变量和函数都与执行上下文有密切的关系，弄明白执行上下文，对我们以后学习 JavaScript 都有很大的帮助。所以写了这篇文章，来对执行上下文进行一个大致的分析讲解。&lt;/p&gt;
    
    </summary>
    
      <category term="执行上下文" scheme="http://yoursite.com/categories/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
    
      <category term="执行上下文" scheme="http://yoursite.com/tags/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
      <category term="压栈出栈" scheme="http://yoursite.com/tags/%E5%8E%8B%E6%A0%88%E5%87%BA%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>变量提升和函数提升</title>
    <link href="http://yoursite.com/2017/10/02/hoisting/"/>
    <id>http://yoursite.com/2017/10/02/hoisting/</id>
    <published>2017-10-02T07:10:05.000Z</published>
    <updated>2017-10-06T15:46:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>变量提升和函数提升本身不算是一个特别难的知识点，但是很多时候会跟一些比较难的知识点混合在一起使用，等那个时候再来挨着挨着去把每个知识点理顺就很头痛了。所以，今天把这个简单的知识点也单独的提出来写一篇博客。</p>
<a id="more"></a>
<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>我们先不急着解释“变量提升”是什么意思，先看几段代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( a );</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fig8e7r6czj31be01mt95.jpg" alt=""></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( a );</div><div class="line"><span class="keyword">var</span> a;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fifize00alj314i03cwem.jpg" alt=""></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( a );</div><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fifize00alj314i03cwem.jpg" alt=""></p>
<p>我们看到上面三段代码。第一段代码报错，因为<code>a</code>未定义，找不到变量<code>a</code>，这个比较容易理解。而第二段和第三段代码的运行结果都是<code>undefined</code>，那就说明，在浏览器执行<code>console.log(a)</code>时，就已经找到定义的变量<code>a</code>了，但是却没有找到它的值。</p>
<p>为什么会有这样的结果呢？第三段代码中的<code>10</code>去哪里了呢？</p>
<p>其实出现这样的结果就是因为我们的“变量提升”。</p>
<h3 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h3><p>在 JavaScript 解释器正式开始执行 JavaScript 代码之前，浏览器会做一些“准备工作”。也就是说在代码执行之前，还有一个代码预解析的过程。</p>
<p>在这个预解析过程中，浏览器会找到代码中所有通过<code>var</code>声明的变量，然后把这些变量的声明提升到代码头部。但因为只提升变量的声明，不提升变量的赋值，所以未赋值的变量默认值为<code>undefined</code>。而这一系列的操作，其实就是我们所说的“变量提升”。</p>
<p>也就是说，我们的第三段代码，在正式执行之前，已经变成了下面的样子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a;</div><div class="line"><span class="built_in">console</span>.log( a );</div><div class="line">a = <span class="number">10</span>;</div></pre></td></tr></table></figure>
<p>我们可以看到，在预解析的过程中，提升的只是变量的声明，赋值语句还是停留在原位置。这就是为什么我们的第三段代码运行结果<code>a</code>的值不是<code>10</code>。因为在执行输出<code>a</code>的时候，变量<code>a</code>的赋值还没执行。</p>
<p>注：变量提升只针对通过<code>var</code>声明的变量。</p>
<h2 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h2><p>其实在预解析过程中，除了做“变量提升”的准备工作之外，浏览器还要做一个“函数提升”的准备工作。前面弄明白了“变量提升”之后其实“函数提升”就很好理解了。</p>
<p>在代码预解析过程中除了提升所有<code>var</code>声明的变量之外，还会把所有的声明式函数提升到代码头部，这个过程就叫做“函数提升”。</p>
<p>我们通过代码来理解一下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fn();</div><div class="line"><span class="comment">// 声明式函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"hello world"</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fifl2cd863j314m03k0sx.jpg" alt=""></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fn();</div><div class="line"><span class="comment">// 函数表达式</span></div><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"hello world"</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fifl54evdwj315o01mjrt.jpg" alt=""></p>
<p>我们看到第一段代码，在定义函数之前调用函数<code>fn()</code>，可以正常的执行输出。就是因为我们的声明式函数被提升到了代码头部，也就是说在 JavaScript 解释器正式执行代码之前，我们的代码已经变成了如下样子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 声明式函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"hello world"</span> );</div><div class="line">&#125;</div><div class="line">fn();</div></pre></td></tr></table></figure>
<p>但是第二段代码调用函数<code>fn()</code>就出现了报错。这是因为<strong>“函数提升”只针对声明式函数，函数表达式不会有“函数提升”的过程。</strong></p>
<p>附：其实对于函数表达式，提升的是变量名，而不是函数。也就是说，我们的第二段代码，在 JavaScript 解释器正式执行代码之前，代码是如下样子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fn = <span class="literal">undefined</span>;</div><div class="line">fn();</div><div class="line"><span class="comment">// 函数表达式</span></div><div class="line">fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"hello world"</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以在执行第四行赋值语句之前，<code>fn</code>只是一个值为<code>undefined</code>的普通变量，并不是函数名，所以调用变量名会报错。</p>
<h2 id="变量提升和函数提升"><a href="#变量提升和函数提升" class="headerlink" title="变量提升和函数提升"></a>变量提升和函数提升</h2><p>前面我们分别解释“变量提升”和“函数提升”。那么，如果当两种情况同时存在呢？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( foo );</div><div class="line"><span class="keyword">var</span> foo = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"hello world"</span> )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( foo );</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"hello world"</span> )</div><div class="line">&#125; </div><div class="line"><span class="keyword">var</span> foo = <span class="number">10</span>;</div></pre></td></tr></table></figure>
<p>运行结果都是：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fifm5nw8cgj314o05et97.jpg" alt=""></p>
<p>那这样的结果是不是就说明是变量先提升，函数后提升呢？这样代码执行时后面的函数将前面的变量覆盖了，所以最终结果显示为函数。</p>
<p>其实不是，在《你不知道的 JavaScript（上卷）》书中的第40页写道：</p>
<blockquote>
<p>函数声明和变量声明都会被提升。但是一个值的注意的细节（这个细节可以出现在有多个“重复”声明的代码中）是函数会首先提升，然后才是变量。</p>
</blockquote>
<p>我们上面的代码，在经过一系列的代码提升之后，变成了下面的样子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"hello world"</span> )</div><div class="line">&#125; </div><div class="line"><span class="keyword">var</span> foo;</div><div class="line"><span class="built_in">console</span>.log( foo );</div><div class="line">foo = <span class="number">10</span>;</div></pre></td></tr></table></figure>
<p>正常情况下，发生“重复命名”时，后面的会覆盖前面的。但是，因为我们第四行的代码只是一个变量声明，并没有被赋值，所以当它跟函数声明重名时，是覆盖不了函数的，也就是说它是被忽略的。</p>
<p>我们可以写个例子验证一下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> a;</div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fifrz1e3xdj314k03a0sw.jpg" alt=""></p>
<p>但是，如果变量被赋值了，那么后面的就会覆盖前面的了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="string">"hello world"</span>;</div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fifs0wlmlbj314s03qdfw.jpg" alt=""></p>
<h2 id="函数内部的提升"><a href="#函数内部的提升" class="headerlink" title="函数内部的提升"></a>函数内部的提升</h2><p>JavaScript 在执行一个代码段之前，都会进行预解析过程中的这些“准备工作”。通过上面的例子我们可以发现，所有的代码都是在全局范围下执行的，也就是说，我们所有的变量提升或者函数提升都是将它们提升到全局范围的最头部。</p>
<p>但是，这个“代码段”其实是分三种情况的 —— 全局代码、函数体代码、<code>eval()</code>代码。</p>
<p>首先，全局代码应该很好理解了，就像我们前面的那些例子中的代码，直接写在某个外部的<code>.js</code>文件中，或者就是包含在<code>&lt;script&gt;</code>标签范围内的代码。这两种都属于全局范围中的代码。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">	<span class="comment">// 全局范围的代码段</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其次，函数体代码，就是指写在某个函数内部的代码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// 函数体内部的代码段</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当预解析发生时，函数体内部如果也有<code>var</code>声明的变量或者声明式函数，那么它们同样的也会发生提升。但是，因为函数体内部的代码作用范围就只在函数体内部，所以它们的提升也只会提升到当前函数体内部的最头部。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( a );</div><div class="line">	<span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>变量提升后：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a;</div><div class="line">	<span class="built_in">console</span>.log( a );</div><div class="line">	a = <span class="number">10</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，<code>eval</code>函数，这种不常用，也不推荐大家使用。所以也不讲了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>介绍完预解析过程中发生“变量提升”和“函数提升”的各种情况，我们来做一个总结。</p>
<p>在预解析的过程中浏览器到底做了哪些准备工作：</p>
<blockquote>
<ul>
<li>找到所有<code>var</code>声明的变量和声明式函数；</li>
<li>将变量的声明和声明式函数提升到当前作用域（代码段范围内）头部；</li>
<li>变量名和函数名重复时先提升函数声明，再提升变量声明（执行时未赋值的变量声明会被忽略）；</li>
</ul>
</blockquote>
<p>附：总结里提到的“作用域”其实就是我们前文说的“代码段”的作用范围。但是担心有些人对作用域的概念也不是太明白，所以为了方便大家理解，我们前面都没有提到作用域这个概念。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;变量提升和函数提升本身不算是一个特别难的知识点，但是很多时候会跟一些比较难的知识点混合在一起使用，等那个时候再来挨着挨着去把每个知识点理顺就很头痛了。所以，今天把这个简单的知识点也单独的提出来写一篇博客。&lt;/p&gt;
    
    </summary>
    
      <category term="执行上下文" scheme="http://yoursite.com/categories/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
    
      <category term="变量提升" scheme="http://yoursite.com/tags/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
    
      <category term="预解析" scheme="http://yoursite.com/tags/%E9%A2%84%E8%A7%A3%E6%9E%90/"/>
    
      <category term="函数提升" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 内存空间</title>
    <link href="http://yoursite.com/2017/10/01/memory/"/>
    <id>http://yoursite.com/2017/10/01/memory/</id>
    <published>2017-10-01T04:30:10.000Z</published>
    <updated>2017-10-06T15:46:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>JS 解释器和 C#，Java 的运行环境一样有垃圾回收机制，程序员不需要手动跟踪释放内存。所以对于前端开发来说，内存空间并不是一个经常被提及的概念，很容易被大家忽视。但是，想要对 JavaScript 的理解更加深刻，就必须对内存空间有一个清晰的认知。</p>
<a id="more"></a>
<h2 id="内存空间管理"><a href="#内存空间管理" class="headerlink" title="内存空间管理"></a>内存空间管理</h2><h3 id="JavaScript-的内存生命周期"><a href="#JavaScript-的内存生命周期" class="headerlink" title="JavaScript 的内存生命周期"></a>JavaScript 的内存生命周期</h3><ol>
<li>分配你所需要的内存</li>
<li>使用（读、写）分配到的内存 </li>
<li>不需要时将内存释放、归还</li>
</ol>
<p>为了便于理解，我们使用一个简单的例子来解释这个周期。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">20</span>;               <span class="comment">// 第一步：分配变量 a 所需要的空间</span></div><div class="line"><span class="built_in">console</span>.log(a + <span class="number">100</span>);     <span class="comment">// 第二步：使用分配到的内存空间</span></div><div class="line">a = <span class="literal">null</span>;                 <span class="comment">// 第三步：使用完毕之后，释放内存空间</span></div></pre></td></tr></table></figure>
<p>前两步我们都很好理解，JavaScript 在定义变量的时候就完成了内存分配。第三步释放内存空间则是我们需要重点理解的一个点。</p>
<h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>JavaScript 有垃圾回收机制，那么这个机制的原理是什么呢？</p>
<p><strong>垃圾回收机制</strong>：其实就是找到那些不再继续使用的变量，什么是不再使用？就是生命周期结束的变量，可能是全局的和局部的。找到之后，释放其占用的内存。垃圾收集器每隔固定的时间段就会执行一次释放操作。</p>
<p>在 JavaScript 中，最常用的是通过<strong>标记清除</strong>算法来找到哪些变量是不再继续使用的，因此 <code>a = null</code> 其实仅仅只是做了一个释放引用的操作，让 a 原本对应的值失去引用，脱离执行环境。这个值会在下一次垃圾收集器执行操作时被找到，并释放。</p>
<h2 id="栈（stack）和堆（heap）"><a href="#栈（stack）和堆（heap）" class="headerlink" title="栈（stack）和堆（heap）"></a>栈（stack）和堆（heap）</h2><p>在 JavaScript 中，每一个数据都需要一个内存空间。内存空间又被分为两种：<strong>栈内存(stock)与堆内存(heap)</strong>。</p>
<p>栈（stack）为自动分配的内存空间，它由系统自动释放；而堆（heap）则是动态分配的内存，大小不定也不会自动释放。</p>
<h3 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h3><p>要简单的理解栈对数据的存取方式，我们可以通过类比乒乓球盒子来分析。如下图左侧：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fhkn1bcdozj31360p2tc1.jpg" alt=""></p>
<p>这种乒乓球的存放方式与栈中存取数据的方式如出一辙。</p>
<p>处于盒子中最顶层的乒乓球E，它一定是最后被放进去的，但可以最先被使用。而我们如果想要使用底层的乒乓球A，就必须将上面的4个乒乓球都取出来，让乒乓球A处于盒子开口处，这样才能拿到乒乓球A。</p>
<p>这个取乒乓球的过程，就符合栈空间<strong>先进后出，后进先出</strong>的特点。上图右侧已经详细的表明了栈空间的存储原理。</p>
<h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3><p>堆存取数据的方式，则与书架和书非常相似。</p>
<p>书虽然也整齐的存放在书架上，但是我们只要知道书的名字，我们就可以很方便的取出我们想要的书，而不用像从乒乓球盒子里取乒乓球一样，非得将上面的所有乒乓球都拿出来才能取到下面的某一个乒乓球。就比如在 JSON 格式的数据中，我们存储的 <code>key-value</code> 是可以无序的，因为顺序的不同并不影响我们的使用。所以对于书架上的书来说，我们也只需要关心书的名字。而堆存取数据，也就是这个特点。</p>
<h3 id="基础数据类型与栈内存"><a href="#基础数据类型与栈内存" class="headerlink" title="基础数据类型与栈内存"></a>基础数据类型与栈内存</h3><p>JavaScript 有五种基础数据类型：<code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>number</code>、<code>string</code>。</p>
<p>JavaScript 中的基础数据类型，都是一些简单的数据段，这些值都有固定的大小，往往保存在栈内存中，由系统自动分配存储空间，我们可以直接操作保存在栈内存空间的值.</p>
<blockquote>
<p>因此，基础数据类型都是按值访问的。</p>
</blockquote>
<h3 id="引用数据类型与堆内存"><a href="#引用数据类型与堆内存" class="headerlink" title="引用数据类型与堆内存"></a>引用数据类型与堆内存</h3><p>JavaScript 的引用数据类型，比如数组 <code>Array</code>，他们值的大小是不固定的。<strong>引用数据类型的值是保存在堆内存中的对象。</strong>JavaScript 不允许直接访问堆内存中的位置，因此我们不能直接操作对象的堆内存空间。</p>
<p>那么操作对象时，我们实际上是在操作对象的<strong>引用</strong>而不是实际的对象。这里的引用，我们可以粗浅地理解为保存在栈内存中的一个地址，该地址与堆内存的实际值相关联。</p>
<blockquote>
<p>因此，引用类型的值都是通过引用访问的。</p>
</blockquote>
<h3 id="图解举例"><a href="#图解举例" class="headerlink" title="图解举例"></a>图解举例</h3><p>为了更好的搞懂栈内存与堆内存，我们可以结合以下例子与图解进行理解。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">0</span>;   <span class="comment">// 栈</span></div><div class="line"><span class="keyword">var</span> b = <span class="string">"hello world"</span>;   <span class="comment">// 栈</span></div><div class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;   <span class="comment">// 栈</span></div><div class="line">	</div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">m</span>: <span class="number">20</span> &#125;;   <span class="comment">// 变量 obj 存在于栈中，&#123; m: 20 &#125; 作为对象存在于堆内存中</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];   <span class="comment">// 变量 arr 存在于栈中，[1, 2, 3] 作为对象存在于堆内存中</span></div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhknbpz837j30za0j0q56.jpg" alt=""></p>
<blockquote>
<p>因此，当我们要访问堆内存中的引用数据类型（如对象，数组，函数等）时，实际上我们首先是从栈中获取该对象的地址引用（或者地址指针），然后再通过这个地址从堆内存中取得我们需要的数据。</p>
</blockquote>
<h3 id="扩展练习"><a href="#扩展练习" class="headerlink" title="扩展练习"></a>扩展练习</h3><p>大致了解了 JavaScript 的内存空间，我们就可以借助内存空间的特性来验证一下引用类型的特点了。</p>
<p>例一：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> b = a;</div><div class="line">b = <span class="number">30</span>;</div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fhknn2es7ej311m0iydhx.jpg" alt=""></p>
<p>在栈内存中的数据发生复制行为时，系统会自动为新的变量分配一个新值。<code>var b = a</code> 执行之后，<code>a</code> 和 <code>b</code> 的值虽然都等于 20，但是他们其实已经是相互独立互不影响的值了。所以，我们修改了 <code>b</code> 的值以后，<code>a</code> 的值并不会发生变化。</p>
<p>例二：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person1 = &#123; <span class="attr">name</span>: <span class="string">"zhangsan"</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</div><div class="line"><span class="keyword">var</span> person2 = person1;</div><div class="line">person2.name = <span class="string">"lisi"</span>;</div><div class="line"><span class="built_in">console</span>.log(person1.name);</div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhkt5ff5syj30xe10etcp.jpg" alt=""></p>
<p>当我们通过 <code>var person2 = person1</code> 执行一次复制引用类型的操作时，引用类型的复制也会为新的变量分配一个新的值保存在栈内存中。但不同的是，这个新的值，仅仅只是引用类型的一个地址指针。当地址指针相同时，尽管他们相互独立，但是这两个地址指针指向的都是堆内存中的同一个地方，所以在堆内存中访问到的具体对象实际上是同一个。</p>
<p>因此，当我们改变 <code>person2</code> 的时候，就是在改变堆内存中 <code>person2</code> 指向的这个对象。而同时，<code>person1</code> 指向的也是这个对象，所以 <code>person1</code> 也会跟着发生变化。这就是引用类型的特性。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们通过一个表格对栈内存和堆内存做一个总结：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fih0gklmthj316u0go0w6.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS 解释器和 C#，Java 的运行环境一样有垃圾回收机制，程序员不需要手动跟踪释放内存。所以对于前端开发来说，内存空间并不是一个经常被提及的概念，很容易被大家忽视。但是，想要对 JavaScript 的理解更加深刻，就必须对内存空间有一个清晰的认知。&lt;/p&gt;
    
    </summary>
    
      <category term="执行上下文" scheme="http://yoursite.com/categories/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    
    
      <category term="内存生命周期" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
      <category term="垃圾回收机制" scheme="http://yoursite.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    
      <category term="堆" scheme="http://yoursite.com/tags/%E5%A0%86/"/>
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>canvas 画布 - 进阶</title>
    <link href="http://yoursite.com/2017/09/12/canvasExpand/"/>
    <id>http://yoursite.com/2017/09/12/canvasExpand/</id>
    <published>2017-09-11T16:28:58.000Z</published>
    <updated>2017-09-29T13:08:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一章<a href="https://runjaelyn.github.io/2017/11/10/canvasBasic/" target="_blank" rel="external">《canvas 画布 - 基础》</a>中我们讲了关于<code>&lt;canvas&gt;</code>的一些基础用法：</p>
<ul>
<li>绘制矩形</li>
<li>绘制路径</li>
<li>绘制其他图形（例如：三角形）</li>
<li>路径和样式初始化</li>
<li>绘制圆形</li>
<li>绘制曲线</li>
<li>变换效果</li>
</ul>
<p>这一章我们对<code>&lt;canvas&gt;</code>的用法再进行一些深入的扩展讲解。</p>
<a id="more"></a>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p><strong><code>drawImage()</code></strong></p>
<p><code>&lt;canvas&gt;</code>的上下文提供了一个方法<code>drawImage()</code>用来插入图片。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drawImage(image, x, y, width, height)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>image</code>：表示 image 对象。</li>
<li><code>x</code>和<code>y</code>：表示图片在画布中的起始坐标。</li>
<li><code>width</code>和<code>height</code>：可选。用来控制图片插入画布时的尺寸。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个 image 对象</span></div><div class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image();</div><div class="line"><span class="comment">// 设置 image 对象的 src 属性</span></div><div class="line">img.src = <span class="string">"IMG_6389.JPG"</span>;</div><div class="line"><span class="comment">// 插入图片</span></div><div class="line">ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>运行代码之后我们会发现画布中并没有看到我们的图片。所以，在画布中插入图片还有一个需要注意的点：</p>
<blockquote>
<p>canvas 操作图片时，必须要等图片加载完才能操作。</p>
</blockquote>
<p>因此，我们插图图片的操作，也必须等图片加载完成后才执行。如以下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个 image 对象</span></div><div class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image();</div><div class="line"><span class="comment">// 设置 image 对象的 src 属性</span></div><div class="line">img.src = <span class="string">"IMG_6389.JPG"</span>;</div><div class="line"><span class="comment">// 图片加载完成后插入图片</span></div><div class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    ctx.drawImage(img, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，我们就完成了在画布中插入图片的操作了。</p>
<p>效果展示：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjxbpgh5frj30xa0903yt.jpg" alt=""></p>
<h2 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h2><p><strong><code>createPattern()</code></strong></p>
<p><code>&lt;canvas&gt;</code>的上下文提供了一个方法<code>createPattern()</code>用来设置背景图片相关属性（例如：路径、是否平铺）。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">createPattern(image, repetition)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>image</code>：图片对象。</li>
<li><code>repetition</code>：设置背景图像是否平铺。<ul>
<li><code>repeat</code>：平铺。</li>
<li><code>repeat-x</code>：横向平铺。</li>
<li><code>repeat-y</code>：纵向平铺。</li>
<li><code>no-repeat</code>：不平铺。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.createPattern(img, <span class="string">"repeat"</span>);</div></pre></td></tr></table></figure>
<p>通过以上代码，我们只是把背景图片的属性设置好了，还并没有将其添加到画布中。所以，一般情况下，我们都会将<code>createPattern()</code>方法返回的对象，作为<code>fillStyle</code>的属性值来实现背景图像的添加。</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image();</div><div class="line">img.src = <span class="string">"fish.png"</span>;</div><div class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> pattern = ctx.createPattern(img, <span class="string">"repeat"</span>);</div><div class="line">    ctx.fillStyle = pattern;</div><div class="line">    ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjxbslpxvwj30xc0d2t9s.jpg" alt=""></p>
<h2 id="渐变色"><a href="#渐变色" class="headerlink" title="渐变色"></a>渐变色</h2><p>渐变色是指我们在画布中绘制实心图形时，可以将图形的填充色绘制成渐变的颜色。</p>
<p>即：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx<span class="selector-class">.fillStyle</span> = 渐变色</div></pre></td></tr></table></figure>
<h3 id="设置渐变色范围"><a href="#设置渐变色范围" class="headerlink" title="设置渐变色范围"></a>设置渐变色范围</h3><h4 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h4><p><strong><code>createLinearGradient()</code></strong></p>
<p><code>&lt;canvas&gt;</code>的上下文提供了<code>createLinearGradient()</code>方法用来设置线性渐变色的渐变范围。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">createLinearGradient(x1, y1, x2, y2)</div></pre></td></tr></table></figure>
<p>参数说明:</p>
<ul>
<li><code>x1</code>和<code>y1</code>：表示渐变范围的起点位置坐标。</li>
<li><code>x2</code>和<code>y2</code>：表示渐变范围的终点位置坐标。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 确定渐变范围：(0, 0) 是渐变起始位置，(400, 0) 是渐变结束位置。</span></div><div class="line">ctx.createLinearGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">0</span>);   <span class="comment">// CanvasGradient</span></div></pre></td></tr></table></figure>
<p>该方法调用后会返回一个<code>CanvasGradient</code>对象。</p>
<p>但是这个时候，我们只是确定了渐变色的范围，还并没有真正的开始绘制渐变色。设置渐变色我们还需要结合其他的方法。</p>
<h4 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h4><p><strong><code>createRadialGradient()</code></strong></p>
<p><code>&lt;canvas&gt;</code>的上下文提供了<code>createRadialGradient()</code>方法用来设置径向渐变色的渐变范围。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">createRadialGradient(x1, y1, r1, x2, y2, r2)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>x1</code>和<code>y1</code>：第一个圆的圆心位置坐标。</li>
<li><code>r1</code>：第一个圆的半径。</li>
<li><code>x2</code>和<code>y2</code>：第二个圆的圆心位置坐标。</li>
<li><code>r2</code>：第二个圆的半径。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 确定渐变范围：从半径 50 的小圆开始， 到半径 100 的大圆结束。圆心都是 (200, 200)。</span></div><div class="line"><span class="keyword">let</span> color = ctx.createRadialGradient(<span class="number">200</span>, <span class="number">200</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>该方法调用后也会返回一个和线性渐变相同的<code>CanvasGradient</code>对象。</p>
<h3 id="绘制渐变色"><a href="#绘制渐变色" class="headerlink" title="绘制渐变色"></a>绘制渐变色</h3><p>通过上面的方法我们都只是设置了渐变色的范围，要绘制出渐变色还需要调用其他方法。</p>
<p><strong><code>addColorStop()</code></strong></p>
<p>两种渐变方式最终都得到了一个<code>CanvasGradient</code>对象，而这个对象就提供了一个方法<code>addColorStop()</code>，用来设置渐变色的位置和颜色。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">addColorStop(position, color)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>position</code>：参数的取值范围在 0 ～ 1 之间。用来表示渐变中颜色所在的相对位置。</li>
<li><code>color</code>：颜色值。参数必须是一个有效的 CSS 颜色值（如<code>#fff</code>、<code>rgb(0,0,0)</code>等）</li>
</ul>
<p>线性渐变例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> color = ctx.createLinearGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">0</span>);</div><div class="line"><span class="comment">// 设置渐变色</span></div><div class="line">color.addColorStop(<span class="number">0</span>, <span class="string">"orange"</span>);</div><div class="line">color.addColorStop(<span class="number">0.5</span>, <span class="string">"tomato"</span>);</div><div class="line">color.addColorStop(<span class="number">1</span>, <span class="string">"pink"</span>);</div><div class="line"></div><div class="line">ctx.fillStyle = color;</div><div class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjxbz98ejrj30x8076weo.jpg" alt=""></p>
<p>径向渐变例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> color = ctx.createRadialGradient(<span class="number">200</span>, <span class="number">200</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">// 设置渐变色</span></div><div class="line">color.addColorStop(<span class="number">0</span>, <span class="string">"orange"</span>);</div><div class="line">color.addColorStop(<span class="number">0.5</span>, <span class="string">"tomato"</span>);</div><div class="line">color.addColorStop(<span class="number">1</span>, <span class="string">"pink"</span>);</div><div class="line"></div><div class="line">ctx.fillStyle = color;</div><div class="line">ctx.arc(<span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</div><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fjxc0hoc8hj30xa0deq3a.jpg" alt=""></p>
<h2 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h2><p><code>&lt;canvas&gt;</code>的上下文提供了两种绘制文本的方式。</p>
<h3 id="填充文字（实心）"><a href="#填充文字（实心）" class="headerlink" title="填充文字（实心）"></a>填充文字（实心）</h3><p><strong><code>fillText()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fillText(text, x, y)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>text</code>：需要绘制的文本内容。</li>
<li><code>x</code>和<code>y</code>：指定文本所在位置。</li>
</ul>
<h3 id="边框文字（空心）"><a href="#边框文字（空心）" class="headerlink" title="边框文字（空心）"></a>边框文字（空心）</h3><p><strong><code>strokeText()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strokeText(text, x, y)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>text</code>：需要绘制的文本内容。</li>
<li><code>x</code>和<code>y</code>：指定文本所在位置。</li>
</ul>
<h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><p><code>&lt;canvas&gt;</code>的上下文提供了一系列的属性用来设置文本的样式。</p>
<h4 id="font"><a href="#font" class="headerlink" title="font"></a>font</h4><p><code>font</code>属性用来设置字体样式。属性值的语法跟 CSS 的<code>font</code>属性语法一致。（默认属性值是<code>10px sans-serif</code>）</p>
<blockquote>
<p>注意：使用<code>font</code>属性时，属性值必须要有字体大小和字体类型，缺一不可。</p>
</blockquote>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.font = <span class="string">"60px sans-serif"</span>;</div></pre></td></tr></table></figure>
<h4 id="textAlign"><a href="#textAlign" class="headerlink" title="textAlign"></a>textAlign</h4><p><code>textAlign</code>属性用来设置文本水平对齐方式。属性值的取值有三种：</p>
<ul>
<li><code>left</code>：文本的左侧相对于起始点对齐。</li>
<li><code>right</code>：文本的右侧相对于起始点对齐。</li>
<li><code>center</code>：文本的中间相对于起始点对齐。</li>
</ul>
<p><code>&lt;canvas&gt;</code>中的这个属性有点二，跟我们之前 CSS 中<code>text-align</code>属性不太相同。我们通过例子来具体看一下这个属性二在哪里。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置字体填充色</span></div><div class="line">ctx.fillStyle = <span class="string">"tomato"</span>;</div><div class="line"><span class="comment">// 设置字体边框色</span></div><div class="line">ctx.strokeStyle = <span class="string">"black"</span>;</div><div class="line"><span class="comment">// 设置字体大小和类型</span></div><div class="line">ctx.font = <span class="string">"60px sans-serif"</span>;</div><div class="line"><span class="comment">// 设置文本左对齐</span></div><div class="line">ctx.textAlign = <span class="string">"left"</span>;</div><div class="line">ctx.fillText(<span class="string">"文字测试1"</span>, <span class="number">300</span>, <span class="number">200</span>);</div><div class="line"><span class="comment">// 设置文本右对齐</span></div><div class="line">ctx.textAlign = <span class="string">"right"</span>;</div><div class="line">ctx.strokeText(<span class="string">"文字测试2"</span>,<span class="number">300</span>, <span class="number">300</span>);</div><div class="line"><span class="comment">// 设置文本剧中对齐</span></div><div class="line">ctx.textAlign = <span class="string">"center"</span>;</div><div class="line">ctx.fillText(<span class="string">"文字测试3"</span>,<span class="number">300</span>, <span class="number">400</span>);</div><div class="line">ctx.strokeText(<span class="string">"文字测试3"</span>,<span class="number">300</span>, <span class="number">400</span>);</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fjx814dn9xj30xa0i6abl.jpg" alt=""></p>
<p>说明：在上图中我们画的一条黑色的线，就是添加文字时设置的文本 x 轴起始点 300 的位置。所以不管是哪种对齐方式，都是指的文本相对于起始点所在的这条线对齐。</p>
<h4 id="textBaseline"><a href="#textBaseline" class="headerlink" title="textBaseline"></a>textBaseline</h4><p><code>textBaseline</code>属性用来设置文本垂直对齐方式。属性值的取值有三种：</p>
<ul>
<li><code>top</code>：文本的顶部相对于起始点对齐。</li>
<li><code>bottom</code>：文本的底部相对于起始点对齐。</li>
<li><code>middle</code>：文本的中间相对于起始点对齐。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ctx.fillStyle = <span class="string">"tomato"</span>;</div><div class="line">ctx.strokeStyle = <span class="string">"black"</span>;</div><div class="line">ctx.font = <span class="string">"60px sans-serif"</span>;</div><div class="line"></div><div class="line">ctx.textBaseline = <span class="string">"top"</span>;</div><div class="line">ctx.fillText(<span class="string">"文字测试1"</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"></div><div class="line">ctx.textBaseline = <span class="string">"bottom"</span>;</div><div class="line">ctx.strokeText(<span class="string">"文字测试2"</span>,<span class="number">100</span>, <span class="number">300</span>);</div><div class="line"></div><div class="line">ctx.textBaseline = <span class="string">"middle"</span>;</div><div class="line">ctx.fillText(<span class="string">"文字测试3"</span>,<span class="number">100</span>, <span class="number">400</span>);</div><div class="line">ctx.strokeText(<span class="string">"文字测试3"</span>,<span class="number">100</span>, <span class="number">400</span>);</div></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjx8k5xxl3j30xa0kmtaa.jpg" alt=""></p>
<p>说明：在上图中我们画的三条黑色的线，就是添加文字时设置的文本 y 轴起始点的位置。所以不管是哪种对齐方式，都是指的文本相对于起始点所在的这条线对齐。</p>
<h4 id="measureText"><a href="#measureText" class="headerlink" title="measureText()"></a>measureText()</h4><p><code>measureText()</code>方法返回一个<code>TextMetrics</code>对象，其中包含关于文本宽度的信息。知道文本宽高后，我们就可以通过一系列的计算来使文本上下左右居中。</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ctx.font = <span class="string">"50px abc"</span>;</div><div class="line"><span class="keyword">let</span> textWidth = ctx.measureText(<span class="string">"测试文字"</span>).width;</div><div class="line">ctx.fillText(<span class="string">"测试文字"</span>, (myCanvas.width - textWidth)/<span class="number">2</span>, (myCanvas.height - <span class="number">50</span>)/<span class="number">2</span>);</div></pre></td></tr></table></figure>
<h3 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h3><p><code>&lt;canvas&gt;</code>的上下文提供了四个属性用来设置文字阴影效果：</p>
<ul>
<li><code>shadowOffsetX</code>：阴影水平方向的偏移。</li>
<li><code>shadowOffsetY</code>：阴影垂直方向的偏移。</li>
<li><code>shadowBlur</code>：阴影的模糊程度。</li>
<li><code>shadowColor</code>：阴影颜色。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ctx.shadowOffsetX = <span class="number">20</span>;</div><div class="line">ctx.shadowOffsetY = <span class="number">20</span>;</div><div class="line">ctx.shadowBlur = <span class="number">30</span>;</div><div class="line">ctx.shadowColor = <span class="string">"tomato"</span>;</div><div class="line"></div><div class="line">ctx.font = <span class="string">"50px sans-serif"</span>;</div><div class="line">ctx.fillText(<span class="string">"测试文字"</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fjxaf4adoxj30xa07a0t2.jpg" alt=""></p>
<h2 id="像素操作"><a href="#像素操作" class="headerlink" title="像素操作"></a>像素操作</h2><p>在前面我们讲了关于画布的基础和进阶阶段的大部分知识点，绘制各种图形、添加图片或者绘制各种动画效果。但实际上到目前为止，我们都还没有去了解关于<code>&lt;canvas&gt;</code>画布真实像素的原理。</p>
<p>事实上，画布上的每一个像素点都有它的像素数据信息，而我们可以通过<code>&lt;canvas&gt;</code>上下文提供的 API 去获取、修改、创建这些像素信息。</p>
<h3 id="获取画布像素数据"><a href="#获取画布像素数据" class="headerlink" title="获取画布像素数据"></a>获取画布像素数据</h3><p><strong><code>getImageData()</code></strong></p>
<p><code>&lt;canvas&gt;</code>的上下文提供了一个<code>getImageData()</code>方法用来获取画布中当前选中区域的像素数据。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getImageData(x, y, width, height)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>x</code>和<code>y</code>：所选取的图像数据矩形区域的左上角<code>(x, y)</code>坐标。</li>
<li><code>width</code>和<code>height</code>：所选取的图像数据矩形区域的宽高。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置矩形的填充色为 orange</span></div><div class="line">ctx.fillStyle = <span class="string">"orange"</span>;</div><div class="line"><span class="comment">// 绘制一个宽高 100 的矩形</span></div><div class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">// 获取左上角坐标为 (0,0)，宽高为 100 的矩形区域</span></div><div class="line"><span class="keyword">let</span> imgData = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="built_in">console</span>.log( imgData );   <span class="comment">// ImageData 对象</span></div></pre></td></tr></table></figure>
<p>通过以上代码我们可以看到，<code>getImageData()</code>方法返回了一个<code>ImageData</code>对象。如下图所示：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fjzjff10buj313402ejrz.jpg" alt=""></p>
<h4 id="ImageData"><a href="#ImageData" class="headerlink" title="ImageData"></a>ImageData</h4><p><code>ImageData</code>对象作为<code>getImageData()</code>方法的返回值，存储着<code>&lt;canvas&gt;</code>对象真实的像素数据。包含以下几个只读属性：</p>
<ul>
<li><code>width</code>：选中区域宽度上的像素点个数（宽度）。</li>
<li><code>height</code>：选中区域宽度上的像素点个数（高度）。</li>
<li><code>data</code>：选中区域所包含像素点的<code>rgba</code>信息。<ul>
<li><code>r</code>：范围 0 ～ 255（黑色到白色）</li>
<li><code>g</code>：范围 0 ～ 255（黑色到白色）</li>
<li><code>b</code>：范围 0 ～ 255（黑色到白色）</li>
<li><code>a</code>：范围 0 ～ 255（透明到不透明）</li>
</ul>
</li>
</ul>
<p>在上面的代码运行结果中我们看到，<code>data</code>是一个长度为 40000 的数组。那如果我们在调用<code>getImageData()</code>方法时把所获取区域的宽高都改成 50 呢？例如如下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取左上角坐标为 (0,0)，宽高为 50 的矩形区域</span></div><div class="line"><span class="keyword">let</span> imgData = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>);</div><div class="line"><span class="built_in">console</span>.log( imgData );   <span class="comment">// ImageData 对象</span></div></pre></td></tr></table></figure>
<p>那么这个时候，我们再看一下<code>ImageData</code>对象的<code>data</code>属性，会发现数组的长度变为了 10000。</p>
<p>效果展示：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fjzjpxzxryj313e024dgd.jpg" alt=""></p>
<p>那么，这个数组的长度到底是根据什么来决定的呢？</p>
<blockquote>
<p><code>ImageData</code>对象的<code>data</code>属性里保存的是所选区域内所有像素点的<code>rgba</code>颜色值集合。</p>
</blockquote>
<p>例如，当我们所选区域的宽高都 100，那么这个时候所选区域中就应该有（100 <em> 100 = 10000）个像素点。而每个像素点又有四个颜色值（<code>rgba</code>），所以我们的数组中总共有（10000 </em> 4 = 40000）个元素。</p>
<p>分析下图：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fjzk6bg8dwj31de07gacb.jpg" alt=""></p>
<p>我们可以看到数组中的元素，每四个重复一次，实际上就是每四个元素为一个像素点的颜色值。</p>
<h3 id="写入画布像素数据"><a href="#写入画布像素数据" class="headerlink" title="写入画布像素数据"></a>写入画布像素数据</h3><p>在上一个知识点中我们通过<code>getImageData()</code>方法获取到了所选区域的像素数据。那么，拿到这些像素数据有什么作用呢？</p>
<p><strong><code>putImageData()</code></strong></p>
<p><code>&lt;canvas&gt;</code>的上下文提供了一个方法<code>putImageData()</code>用来写入画布的像素数据。也就是说，我们可以把我们在这个区域拿到的像素数据，绘制在另一块区域中去。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">putImageData(ImageData, x, y)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>ImageData</code>：获取到的某一区域的像素数据。</li>
<li><code>x</code>和<code>y</code>：绘制所得像素数据的位置起点坐标。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ctx.fillStyle = <span class="string">"orange"</span>;</div><div class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="keyword">let</span> imgData = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">// 从 (100, 100) 开始绘制所得像素数据</span></div><div class="line">ctx.putImageData(imgData, <span class="number">100</span>, <span class="number">100</span>)</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fjyg97ll3kj30xa0ckt8y.jpg" alt=""></p>
<p>在这个例子中，我们只需要调用一个<code>putImageData()</code>方法，就可以将选中的区域复制一块出来。</p>
<h3 id="新建画布像素数据"><a href="#新建画布像素数据" class="headerlink" title="新建画布像素数据"></a>新建画布像素数据</h3><p>在上一个知识点中，我们是将获取到的像素数据写入到了另一块区域中。那如果我们不获取呢？可不可以自己去创建像素数据呢。</p>
<p><strong><code>createImageData()</code></strong></p>
<p><code>&lt;canvas&gt;</code>的上下文提供了一个方法<code>createImageData()</code>用来创建新的像素数据。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">createImageData(width, height)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>width</code>：绘制新建像素数据的区域宽度。</li>
<li><code>height</code>：绘制新建像素数据的区域高度。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个宽高各 100 的像素数据区域</span></div><div class="line"><span class="keyword">let</span> imgData = ctx.createImageData(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="built_in">console</span>.log(imgData);   </div><div class="line"><span class="comment">// 把新创建出来的像素数据写入到画布(100,100)的位置</span></div><div class="line">ctx.putImageData(imgData, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>运行上面的代码我们可以看到画布上并没有任何图形显示。实际上是因为当前像素数据的颜色是透明色。</p>
<blockquote>
<p>新创建出来的像素数据<code>rgba</code>值默认是<code>(0, 0, 0, 0)</code>，即黑色全透明。</p>
</blockquote>
<p>那如果我们希望它不透明，显示黑色呢。我们可以通过如下代码去设置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgData.data.length; i++)&#123;</div><div class="line">    <span class="comment">// 把每一个像素点的rgba值中的a值从0改成255</span></div><div class="line">    imgData.data[<span class="number">4</span> * i + <span class="number">3</span>] = <span class="number">255</span>;</div><div class="line">&#125;</div><div class="line">ctx.putImageData(imgData, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fjygqe7babj30xc08qglo.jpg" alt=""></p>
<h2 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h2><p>合成就是指：当<code>&lt;canvas&gt;</code>中的多个图形之间发生重叠的时候，对于重叠部分的处理。</p>
<h3 id="全局透明度"><a href="#全局透明度" class="headerlink" title="全局透明度"></a>全局透明度</h3><p><strong><code>globalAlpha</code></strong></p>
<p><code>&lt;canvas&gt;</code>的上下文提供了一个属性<code>globalAlpha</code>来设置一个全局的透明度样式。</p>
<p>语法结构</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">globalAlpha = value</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<p><code>value</code>：透明度的值。取值范围在 0.0（透明）～ 1.0（不透明），默认是 1.0。</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">// 设置一个全局的透明度</span></div><div class="line">ctx.globalAlpha = <span class="number">0.5</span>;</div><div class="line">ctx.fillStyle = <span class="string">"tomato"</span>;</div><div class="line">ctx.fillRect(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">ctx.fillRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fjzr6rtda9j30x80bwaa9.jpg" alt=""></p>
<h3 id="覆盖合成"><a href="#覆盖合成" class="headerlink" title="覆盖合成"></a>覆盖合成</h3><p><code>&lt;canvas&gt;</code>的上下文提供了一个属性<code>globalCompositeOperation</code>用来设置多个图形覆盖重叠时的最终显示效果。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">globalCompositeOperation = value;</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<p><code>value</code>有两组常用的取值，其中<code>source</code>（源）代表后绘制的新图形，<code>destination</code>（目标）代表先绘制的图形。具体取值如下：</p>
<ul>
<li><code>source-over</code>：（默认值）源在上面，新的图像层级比较高。</li>
<li><code>source-in</code>：只留下源与目标重叠部分（源的那一部分）。</li>
<li><code>source-out</code>：只留下源超过目标的部分。</li>
<li><code>source-atop</code>：裁掉源溢出的部分。</li>
<li><code>destination-over</code>：目标在上面，旧的图像层级比较高。</li>
<li><code>destination-in</code>：只留下目标与源重叠部分（目标的那一部分）。</li>
<li><code>destination-out</code>：只留下目标超过源的部分。</li>
<li><code>destination-atop</code>：裁掉目标溢出的部分。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">ctx.globalCompositeOperation = <span class="string">"source-out"</span>;</div><div class="line">ctx.fillStyle = <span class="string">"tomato"</span>;</div><div class="line">ctx.fillRect(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fjzrbvllhbj30xa07omx8.jpg" alt=""></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="事件操作"><a href="#事件操作" class="headerlink" title="事件操作"></a>事件操作</h3><p>学习过关于事件操作的都知道，要绑定事件，必须要先获取到元素。但是如果我们想要在<code>&lt;canvas&gt;</code>画布中的某个元素身上绑定事件呢？我们可以获取到画布元素，但是却没办法获取到画布内绘制的图形元素。</p>
<p>所以，<code>&lt;canvas&gt;</code>的上下文提供了一个方法，让我们可以在画布内的图形身上去绑定事件。</p>
<p><strong><code>isPointInPath()</code></strong></p>
<p><code>&lt;canvas&gt;</code>的上下文提供了一个方法<code>isPointInPath()</code>用于判断当前路径中是否包含检测点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isPointInPath(x, y);</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>x</code>和<code>y</code>：监测点的<code>(x, y)</code>坐标。</li>
</ul>
<p>注意：此方法只用于检测最新画出的<code>canvas</code>图像。</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ctx.rect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line">ctx.fill();</div><div class="line"></div><div class="line">myCanvas.addEventListener(<span class="string">"mousedown"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">	<span class="comment">// 获取当前鼠标在画布中的坐标</span></div><div class="line">    <span class="keyword">let</span> x = e.clientX - <span class="keyword">this</span>.offsetLeft;</div><div class="line">    <span class="keyword">let</span> y = e.clientY - <span class="keyword">this</span>.offsetTop;</div><div class="line">    <span class="keyword">if</span>(ctx.isPointInPath(x, y))&#123;</div><div class="line">        alert(<span class="number">11111</span>);</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<h3 id="将画布导出为图像"><a href="#将画布导出为图像" class="headerlink" title="将画布导出为图像"></a>将画布导出为图像</h3><p>我们在画布上绘制好图形之后，很多时候需要将图形保存为图片。大部分浏览器直接在画布上右键就可以存储了，如下图所示：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fk0q17akklj31400co74r.jpg" alt=""></p>
<p>但总还是会有一些特殊的浏览器并不支持直接保存图片，所以<code>&lt;canvas&gt;</code>还提供了其他的方法来实现保存图片功能。</p>
<p><strong><code>toDataURL()</code></strong></p>
<p><code>&lt;canvas&gt;</code>元素（注意：是<code>&lt;canvas&gt;</code>元素，不是上下文）提供了一个方法<code>toDataURL()</code>可以获取到当前画布的图片路径。</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( myCanvas.toDataURL() );</div></pre></td></tr></table></figure>
<p>然后我们可以在控制台看到类似于如下结果：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fk0pvyjiiaj314o03uabj.jpg" alt=""></p>
<p>将其全部复制，在新窗口打开就可以得到图片，然后再右键保存就可以了。</p>
<p>关于 HTML5 <code>&lt;canvas&gt;</code>画布的知识点就讲到这了。再有也不讲了……心累……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一章&lt;a href=&quot;https://runjaelyn.github.io/2017/11/10/canvasBasic/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《canvas 画布 - 基础》&lt;/a&gt;中我们讲了关于&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;的一些基础用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绘制矩形&lt;/li&gt;
&lt;li&gt;绘制路径&lt;/li&gt;
&lt;li&gt;绘制其他图形（例如：三角形）&lt;/li&gt;
&lt;li&gt;路径和样式初始化&lt;/li&gt;
&lt;li&gt;绘制圆形&lt;/li&gt;
&lt;li&gt;绘制曲线&lt;/li&gt;
&lt;li&gt;变换效果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这一章我们对&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;的用法再进行一些深入的扩展讲解。&lt;/p&gt;
    
    </summary>
    
      <category term="canvas" scheme="http://yoursite.com/categories/canvas/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="画布" scheme="http://yoursite.com/tags/%E7%94%BB%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>canvas 画布 - 基础</title>
    <link href="http://yoursite.com/2017/09/10/canvasBasic/"/>
    <id>http://yoursite.com/2017/09/10/canvasBasic/</id>
    <published>2017-09-10T12:10:23.000Z</published>
    <updated>2017-09-26T15:30:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>&lt;canvas&gt;</code>画布是 HTML5 新增的元素，用于图形的绘制。但<code>&lt;canvas&gt;</code>标签只是图形容器，需要结合 JavaScript 才能绘制图形。</p>
<p>这一篇博客我们主要讲的是关于<code>&lt;canvas&gt;</code>的一些基础知识点的操作。</p>
<a id="more"></a>
<h2 id="创建一个画布"><a href="#创建一个画布" class="headerlink" title="创建一个画布"></a>创建一个画布</h2><p>我们要绘制图形，必须先创建一个画布，然后再去画布上绘制各式的图形。</p>
<p>一个画布在网页中是一个矩形，通过<code>&lt;canvas&gt;</code>标签来创建。同一个页面中可以存在多个画布。</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"600"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面代码中我们创建了一个<code>class</code>名为<code>myCanvas</code>的画布，同时设置了它的宽高都为 600px。</p>
<blockquote>
<p>注意：<code>&lt;canvas&gt;</code>的宽高不要在 CSS 中去设置。画布的默认大小的 300 * 150。如果通过 CSS 放大画布，会连同画布中包含的所有内容的尺寸一起放大。</p>
</blockquote>
<p>画布添加好了之后，这个时候我们在页面上是看不到这个画布的，因为它没有颜色。所以我们还可以通过 CSS 样式设置画布的背景颜色。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#myCanvas</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们就可以在页面上看到画布的区域了。</p>
<h2 id="使用-JavaScript-绘制图像"><a href="#使用-JavaScript-绘制图像" class="headerlink" title="使用 JavaScript 绘制图像"></a>使用 JavaScript 绘制图像</h2><p><code>&lt;canvas&gt;</code>元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成。</p>
<h3 id="渲染上下文"><a href="#渲染上下文" class="headerlink" title="渲染上下文"></a>渲染上下文</h3><p>在<code>&lt;canvas&gt;</code>中绘制图形，必须先要拿到<code>&lt;canvas&gt;</code>的上下文。说的通俗一点就是在画图前要先拿到画笔。这个上下文，就相当于是一个画笔。</p>
<p>语法结构：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">画布元素<span class="selector-class">.getContext</span>(<span class="string">"2d"</span>)</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取到画布元素</span></div><div class="line"><span class="keyword">let</span> myCanvas = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);;</div><div class="line"><span class="comment">// 获取到画布的上下文：后面就可以根据上下文在画布上作画了</span></div><div class="line"><span class="keyword">let</span> ctx = myCanvas.getContext(<span class="string">"2d"</span>);</div></pre></td></tr></table></figure>
<p>不管要绘制什么东西，获取上下文这一步都是必不可少的。只有拿到这个画布的上下文之后，我们才可以通过它的一些 API 去进行图形的绘制。</p>
<p>接下来我们就具体的来学习一下各种基本图形的绘制。</p>
<h2 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h2><p>HTML 中的元素<code>&lt;canvas&gt;</code>只支持一种原生的图形绘制，就是矩形。所有其他图形的绘制都至少需要生成一条路径。也就是说，画矩形可以只调用一个 API 就能完成，而其他的图形都不行，</p>
<h3 id="绘制矩形的方法"><a href="#绘制矩形的方法" class="headerlink" title="绘制矩形的方法"></a>绘制矩形的方法</h3><p><code>&lt;canvas&gt;</code>的上下文提供了四种方法绘制矩形：</p>
<ul>
<li><p>绘制一个填充的矩形（填充色默认为黑色）</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fillRect(x, y, width, height)</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>绘制一个矩形的边框（边框样式默认为 1px 的黑色实线）</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strokeRect(x, y, width, height)</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>绘制一个既没填充也没边框的矩形（没有任何样式的矩形）</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rect(x, y, width, height)</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>清除指定矩形区域，让清除部分完全透明（类似于橡皮擦功能）</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clearRect(x, y, width, height)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>参数说明：</p>
<ul>
<li><code>x</code>和<code>y</code>：指定了在<code>&lt;canvas&gt;</code>画布上所绘制矩形的起点（左上角）坐标。</li>
<li><code>width</code>和<code>height</code>：设置矩形的宽高尺寸（存在边框的话，边框会在<code>width</code>上占据一个边框的宽度，<code>height</code>同理）。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 绘制一个填充的矩形（填充色默认为黑色）</span></div><div class="line">ctx.fillRect(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">// 2. 绘制一个矩形的边框（边框样式默认为 1px 的黑色实线）</span></div><div class="line">ctx.strokeRect(<span class="number">150</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">// 3. 绘制一个既没填充也没边框的矩形</span></div><div class="line">ctx.rect(<span class="number">150</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">// 4. 清除制定矩形区域，让清除部分完全透明</span></div><div class="line">ctx.clearRect(<span class="number">70</span>, <span class="number">70</span>, <span class="number">50</span>, <span class="number">50</span>);</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fjrj6lvzq3j30xc0egaac.jpg" alt=""></p>
<h3 id="清空画布"><a href="#清空画布" class="headerlink" title="清空画布"></a>清空画布</h3><p>如果将<code>clearRect()</code>方法的四个参数设置成如下代码，就可以达到清空画布的效果。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, myCanvas.width, myCanvas.height);</div></pre></td></tr></table></figure>
<p>说明：起始位置为画布的 (0, 0) 点，清除范围的尺寸为画布大小。</p>
<h3 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h3><p><code>&lt;canvas&gt;</code>的上下文提供几种操作样式的属性（不仅限于操作矩形样式）。</p>
<p><strong><code>fillStyle</code></strong>：设置图形的填充颜色。</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 绘制一个填充的矩形（填充色为橙色）</span></div><div class="line">ctx.fillStyle = <span class="string">"orange"</span>;</div><div class="line">ctx.fillRect(<span class="number">100</span>, <span class="number">120</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fjrjdcu0thj30xc0a8glq.jpg" alt=""></p>
<p><strong><code>strokeStyle</code></strong>：设置图形的轮廓颜色。</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 绘制一个矩形的边框（边框样式默认为 1px 的红色实线）</span></div><div class="line">ctx.strokeStyle = <span class="string">"tomato"</span>;</div><div class="line">ctx.strokeRect(<span class="number">260</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjrjfu7lrij30xc0aajri.jpg" alt=""></p>
<p><strong><code>lineWidth</code></strong>：设置当前绘制线的粗细（属性值必须是正数）。</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 绘制一个矩形的边框（边框样式默认为 10px 的红色实线）</span></div><div class="line">ctx.strokeStyle = <span class="string">"tomato"</span>;</div><div class="line">ctx.lineWidth = <span class="number">10</span>;</div><div class="line">ctx.strokeRect(<span class="number">380</span>, <span class="number">150</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fjrjgytgl9j30xc0bkglu.jpg" alt=""></p>
<p><strong><code>lineJoin</code></strong>：设置线条与线条间交接处的样式（默认值为<code>miter</code>）。</p>
<ul>
<li><code>round</code>：圆角</li>
<li><code>bevel</code>：斜角</li>
<li><code>miter</code>：直角</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 绘制一个矩形的边框（边框样式默认为 10px 的红色实线，线条交接处为圆角）</span></div><div class="line">ctx.strokeStyle = <span class="string">"tomato"</span>;</div><div class="line">ctx.lineWidth = <span class="number">50</span>;</div><div class="line">ctx.lineJoin = <span class="string">"round"</span>;</div><div class="line">ctx.strokeRect(<span class="number">380</span>, <span class="number">270</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fjrji8ivfij30xc0de74k.jpg" alt=""></p>
<h2 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h2><p>路径是绘制图形的基本元素。除了矩形有专属的方法可以直接绘制外，其他图形我们都需要用一条一条的路径去组合。所以说白了，路径其实就是指的线段。</p>
<p><strong>步骤：</strong></p>
<ol>
<li>绘制路径起点。</li>
<li>绘制路径终点。</li>
<li>连接两点绘制出线段。</li>
</ol>
<h3 id="绘制路径的方法"><a href="#绘制路径的方法" class="headerlink" title="绘制路径的方法"></a>绘制路径的方法</h3><ul>
<li><strong><code>moveTo(x, y)</code></strong>：设置路径的起点坐标<code>(x, y)</code>。</li>
<li><strong><code>lineTo(x, y)</code></strong>：设置路径的终点坐标<code>(x, y)</code>。</li>
<li><strong><code>stroke()</code></strong>：连接两个点，绘制路径。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置线条粗细为 30px</span></div><div class="line">ctx.lineWidth = <span class="number">30</span>;</div><div class="line"><span class="comment">// 设置线段起点</span></div><div class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">// 设置线段终点</span></div><div class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line"><span class="comment">// 连接起点和终点</span></div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fjrjnnyom0j30xc0cidg1.jpg" alt=""></p>
<h3 id="添加样式-1"><a href="#添加样式-1" class="headerlink" title="添加样式"></a>添加样式</h3><p><strong><code>lineCap</code></strong>：设置每一条线段两端的样式（默认是<code>butt</code>方形）。</p>
<ul>
<li><code>butt</code>：线段两端以方形结束。</li>
<li><code>round</code>：线段两端以圆形结束。</li>
<li><code>square</code>：线段两端以方形结束。但是增加了一个宽度与线段相同，高度是线段宽度一半的矩形。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置线条粗细为 30px</span></div><div class="line">ctx.lineWidth = <span class="number">30</span>;</div><div class="line"><span class="comment">// 设置线条两端的形状为圆形</span></div><div class="line">ctx.lineCap = <span class="string">"round"</span>;</div><div class="line"><span class="comment">// 设置线段起点</span></div><div class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">// 设置线段终点</span></div><div class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line"><span class="comment">// 连接起点和终点</span></div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjrjp10br0j30xc0c8aa9.jpg" alt=""></p>
<h2 id="绘制其他图形"><a href="#绘制其他图形" class="headerlink" title="绘制其他图形"></a>绘制其他图形</h2><p><code>&lt;canvas&gt;</code>画布中没有提供直接画其他图形（例如三角形、五边形等等）的方法，所以我们只能通过多条路径来绘制。</p>
<p><strong>步骤：</strong></p>
<ol>
<li>创建图形的起始点。</li>
<li>绘制路径的其他点。</li>
<li>将路径闭合。</li>
<li>一旦路径生成，就能通过描边或填充路径区域来渲染图形。</li>
</ol>
<p>我们以绘制三角形为例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置起始点坐标</span></div><div class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">// 设置下一个点的坐标</span></div><div class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line"><span class="comment">// 设置下一个点的坐标</span></div><div class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">// 依次连接设置的点，绘制出图形轮廓</span></div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fjrjrnm0ecj30xc0c60sw.jpg" alt=""></p>
<p>通过上图我们可以看到，虽然我们找到了三角形的三个点，但图形却没有闭合。</p>
<h3 id="闭合图形"><a href="#闭合图形" class="headerlink" title="闭合图形"></a>闭合图形</h3><p>要使该三角形闭合有两个方法：</p>
<ul>
<li>设置最后一个点，坐标回到初始位置，让图形的起点和终点在同一位置，使图形闭合。</li>
<li><strong><code>closePath()</code></strong>：<code>&lt;canvas&gt;</code>的上下文提供了一个方法来达到闭合路径的效果。</li>
</ul>
<p>所以，上面的例子我们也可以写成如下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置起始点坐标</span></div><div class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">// 设置下一个点的坐标</span></div><div class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line"><span class="comment">// 设置下一个点的坐标</span></div><div class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">// 实现图形闭合效果方法一：最后一个点，设置坐标回到初始位置。</span></div><div class="line">ctx.lineTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">// 实现图形闭合效果方法二：不用设置最后一个点，直接调用闭合方法 closePath()。 </span></div><div class="line">ctx.closePath();</div><div class="line"><span class="comment">// 依次连接设置的点，绘制出图形轮廓</span></div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjrjzx64czj30xa0biglr.jpg" alt=""></p>
<h3 id="填充图形"><a href="#填充图形" class="headerlink" title="填充图形"></a>填充图形</h3><p>以上的例子中我们绘制出了一个空心的三角形。那如果我们需要绘制一个实心的三角形呢？</p>
<p><code>&lt;canvas&gt;</code>的上下文除了提供<code>stroke()</code>方法绘制图形轮廓外，还提供了一个方法来填充图形。</p>
<p><strong><code>fill()</code></strong>：通过填充路径的内容区域生成实心的图形。</p>
<p>所以，想要绘制一个实心三角形，只需要把上例中最后一行代码改写成如下代码即可：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fjrk1nnh46j30xc0b0q32.jpg" alt=""></p>
<p>这样，我们不管是空心的还是实心的三角形就都完成了。</p>
<h2 id="初始化（重置）"><a href="#初始化（重置）" class="headerlink" title="初始化（重置）"></a>初始化（重置）</h2><h3 id="初始化路径"><a href="#初始化路径" class="headerlink" title="初始化路径"></a>初始化路径</h3><p>如果我们在同一个画布中画两个三角形，第一个绘制成空心，第二个绘制成一个实心。代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一个三角形</span></div><div class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">100</span>); </div><div class="line">ctx.closePath();</div><div class="line"><span class="comment">// 绘制图形轮廓</span></div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line"><span class="comment">// 第二个三角形</span></div><div class="line">ctx.moveTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">300</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">200</span>);</div><div class="line">ctx.closePath();</div><div class="line"><span class="comment">// 填充整个图形内部</span></div><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<p>代码运行后我们会发现页面上的显示效果跟我们想要的并不一样。两个三角形都成了实心。如下图所示：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fjrk3s8wejj30xc0f0glw.jpg" alt=""></p>
<p>那如果我们把两个三角形的代码顺序换一下。把第一个换成实心，第二个换成空心。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fjrk4nrnzpj30xc0es0t1.jpg" alt=""></p>
<p>然后我们可以看到这样效果就对了，这是为什么呢。</p>
<blockquote>
<p>说明：我们在同一个画布中，每一次绘制的路径实际上都被保存在了内存（栈）空间中，所以当我们最后通过<code>fill()</code>方法作路径填充时，它会把整个内存空间中的所有路径都填充上。因此，我们在每次开始绘制一个新图形之前，都应该先把内存空间里保存的其他图形路径清除了。</p>
</blockquote>
<h4 id="beginPath"><a href="#beginPath" class="headerlink" title="beginPath()"></a>beginPath()</h4><p><strong><code>beginPath()</code></strong>：清空路径容器。绘制新图形前清空前面已有的路径（不会清除掉样式）。</p>
<p>本质上，一个图形是由很多子路径构成，这些子路径都是在一个列表中，所有的子路径（线、弧形等等）构成图形。而每次这个方法调用后之后，路径列表清空重置，然后我们就可以重新绘制新的图形。</p>
<p>所以，在上面的例子中，我们在绘制第二个新的三角形之前，要先清空掉第一个三角形的路径。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一个三角形</span></div><div class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">100</span>); </div><div class="line">ctx.closePath();</div><div class="line"><span class="comment">// 绘制图形轮廓</span></div><div class="line">ctx.stroke();</div><div class="line"></div><div class="line"><span class="comment">// 第二个三角形</span></div><div class="line"><span class="comment">// 绘制新图形前，清空掉上一个图形中的路径（必须）。</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">300</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">200</span>);</div><div class="line">ctx.closePath();</div><div class="line"><span class="comment">// 填充整个图形内部</span></div><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<p>这样，我们第一个空心三角形，第二个实心三角形才算完成了。如下图：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjrk5qubq3j30xc0f2t90.jpg" alt=""></p>
<p>建议：在实际开发中，为了避免每次去区分哪个图形是先绘制的哪个图形是后绘制的，我们一般会在每一次绘制图形之前都做一次清空。</p>
<h3 id="初始化样式"><a href="#初始化样式" class="headerlink" title="初始化样式"></a>初始化样式</h3><p>如果我们在同一个画布中画两个实心三角形，第一个填充橙色，第二个填充默认色。代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第一个三角形</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">100</span>); </div><div class="line">ctx.closePath();</div><div class="line"><span class="comment">// 设置填充色为橙色</span></div><div class="line">ctx.fillStyle = <span class="string">"orange"</span>;</div><div class="line"><span class="comment">// 绘制图形轮廓</span></div><div class="line">ctx.fill();</div><div class="line">	</div><div class="line"><span class="comment">// 第二个三角形</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">300</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">200</span>);</div><div class="line">ctx.closePath();</div><div class="line"><span class="comment">// 填充整个图形内部</span></div><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<p>代码运行后我们会发现页面上的显示效果跟我们想要的还是不一样。第二个三角形我们并没有设置填充色，但是页面上两个三角形都显示橙色。如下图所示：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fjrl3lu6igj30xa0fe74k.jpg" alt=""></p>
<p>如果想要第二个三角形显示默认色，我们就必须再给第二个三角形设置一次<code>fillStyle</code>属性。代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第二个三角形</span></div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">300</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">200</span>);</div><div class="line">ctx.closePath();</div><div class="line"><span class="comment">// 设置填充色为黑色</span></div><div class="line">ctx.fillStyle = <span class="string">"black"</span>;</div><div class="line"><span class="comment">// 填充整个图形内部</span></div><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<p>这样就可以达到我们想要的效果了，如下图所示。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjrl4itk4cj30xc0ekjro.jpg" alt=""></p>
<p>但是，当我们绘制一个图形用到很多样式后，想要再绘制下一个新图形并采用默认样式时，就必须自己手动的依次去把所有样式都设置回默认的属性。这样对于开发人员来说就太麻烦了，而且还需要去记住每一个属性的默认属性值。</p>
<p>所以，<code>&lt;canvas&gt;</code>的上下文提供了可以直接初始化所有样式的方法。</p>
<h4 id="save"><a href="#save" class="headerlink" title="save()"></a>save()</h4><p><strong><code>save()</code></strong>：将当前样式压入栈中，即把当前样式保存在内存（栈）空间中。</p>
<p>在画布里还没有绘制任何图形使用任何样式前，我们先调用该方法将当前画布的所有默认样式保存下来。</p>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取到画布</span></div><div class="line"><span class="keyword">let</span> myCanvas = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</div><div class="line"><span class="comment">// 获取到画布的上下文：后面就可以根据上下文在画布上作画了</span></div><div class="line"><span class="keyword">let</span> ctx = myCanvas.getContext(<span class="string">"2d"</span>);</div><div class="line"><span class="comment">// 保存当前样式</span></div><div class="line">ctx.save();</div></pre></td></tr></table></figure>
<p>这个时候各部分状态如下图：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fjr8fck148j31gq0je0wn.jpg" alt=""></p>
<p>当我们给第一个三角形执行以下代码填充了颜色后：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置填充色为橙色</span></div><div class="line">ctx.fillStyle = <span class="string">"orange"</span>;</div></pre></td></tr></table></figure>
<p>这个时候各部分状态如下图：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjr8kywnvtj31go0iqads.jpg" alt=""></p>
<p>我们可以看到，对于栈空间来说，保存在里面的还是我们的默认样式，没有发生任何变化。因为只有调用<code>save()</code>才会保存当前样式进栈空间里。</p>
<p>但是，“当前应用样式”却不再是默认样式了。因此，当我们后面再绘制其他图形的时候，这些图形都会应用“当前应用样式”。</p>
<p>这也就是为什么我们前面例子中的第二个三角形并没有设置填充色结果也显示橙色的原因了。</p>
<p>那现在，我们题目要求第二个三角形填充默认色。而“当前应用样式”中已经没有默认样式了，但是栈空间里有，所以我们接下来就需要把默认样式从栈空间里取出来。</p>
<h4 id="restore"><a href="#restore" class="headerlink" title="restore()"></a>restore()</h4><p><strong><code>restore()</code></strong>：将保存在栈空间顶部的样式出栈。</p>
<p>当我们在绘制过程中又需要用到默认样式时，我们就可以调用该方法把之前保存在栈空间中的默认样式取出来。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 第二个三角形</span></div><div class="line">ctx.beginPath();</div><div class="line"><span class="comment">// 取出栈空间中的默认样式</span></div><div class="line">ctx.restore();</div><div class="line">ctx.moveTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">300</span>);</div><div class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">200</span>);</div><div class="line">ctx.closePath();</div><div class="line"><span class="comment">// 填充整个图形内部</span></div><div class="line">ctx.fill();</div></pre></td></tr></table></figure>
<p>这个时候各部分状态入下图：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fjr9mktkj1j31h40jcn10.jpg" alt=""></p>
<p>这个时候，我们栈空间中被保存的默认样式又重新被取了出来，并且应用到了“当前应用样式”中。所以最终我们就可以完成第一个三角形为橙色，第二个三角形为默认色的要求了。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjrl4itk4cj30xc0ekjro.jpg" alt=""></p>
<h3 id="保存多个样式"><a href="#保存多个样式" class="headerlink" title="保存多个样式"></a>保存多个样式</h3><p>有的时候，我们在绘制过程中除了保存初始的默认样式外，可能后面还会保存一些其他的样式。那这个时候栈空间里是怎样保存的呢？我们需要用的时候又怎么取出来呢？</p>
<p>图解分析：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fjrb9z00thj31jo0lcq7i.jpg" alt=""></p>
<p>栈空间的存取方式一直是“先进后出，后进先出”。具体过程解析可以去看<a href="https://runjaelyn.github.io/2017/12/05/memory/" target="_blank" rel="external">《JavaScript 内存空间》</a>这篇博客。</p>
<p>所以，最后保存的样式在栈空间的最上面，出栈的时候也是最上面的先出来。如果我们想要取出最下层的默认样式，就必须多调用几次<code>restore()</code>先把上面的样式依次取出来才行。</p>
<p>图解分析：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fjrboewq38j31gi0lkae6.jpg" alt=""></p>
<p>如上图所示，我们一共调用了<code>restore()</code>方法三次，才最终取到最底部的默认样式。</p>
<h2 id="绘制圆形"><a href="#绘制圆形" class="headerlink" title="绘制圆形"></a>绘制圆形</h2><p><code>&lt;canvas&gt;</code>的上下文提供了一个绘制圆形的方法<code>arc()</code>。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arc(x, y, r, startAngle, endAngle, anticlockwise)</div></pre></td></tr></table></figure>
<p>描述：画一个以<code>(x, y)</code>为圆心、<code>r</code>为半径的圆弧（圆），从<code>startAngle</code>开始到<code>endAngle</code>结束，按照<code>anticlockwise</code>给定的方向（默认为顺时针）来生成。</p>
<p>参数说明：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fjv4fu7xkwj31680dygo4.jpg" alt=""></p>
<p>图解分析：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fjspljhdnzj312w0hq40s.jpg" alt=""></p>
<p><strong>通过角度计算弧度的 JavaScript 表达式：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">radians = (<span class="built_in">Math</span>.PI / <span class="number">180</span>) * degrees</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>radians</code>：弧度。绘制圆的方法<code>arc()</code>中的参数<code>startAngle</code>和<code>endAngle</code>的取值。</li>
<li><code>degrees</code>：角度。需要绘制的圆（弧）的角度。</li>
<li><code>Math.PI</code>：圆周率（约等于3.14159）。</li>
</ul>
<p>以一个圆为例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 清空路径容器</span></div><div class="line">ctx.beginPath();</div><div class="line"><span class="comment">// 画圆</span></div><div class="line">ctx.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">0</span>, (<span class="built_in">Math</span>.PI / <span class="number">180</span>) * <span class="number">360</span>);</div><div class="line"><span class="comment">// 绘制圆的边框</span></div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fjuytb18vkj30xc080jrh.jpg" alt=""></p>
<p>以一个 1/4 圆为例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">200</span>, <span class="number">200</span>);</div><div class="line">ctx.arc(<span class="number">200</span>, <span class="number">200</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">90</span> * <span class="built_in">Math</span>.PI / <span class="number">180</span>);</div><div class="line">ctx.closePath();</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fjuyx1y62qj30xa06gjre.jpg" alt=""></p>
<h2 id="绘制曲线"><a href="#绘制曲线" class="headerlink" title="绘制曲线"></a>绘制曲线</h2><p><strong><code>arcTo()</code></strong></p>
<p><code>&lt;canvas&gt;</code>的上下文提供了一个绘制曲线的方法<code>arcTo()</code>。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arcTo(x1, y1, x2, y2, r);</div></pre></td></tr></table></figure>
<p>说明：<code>(x1, y1)</code>和<code>(x2, y2)</code>分别是两个点的坐标。该方法需结合<code>moveTo(x, y)</code>一起使用。</p>
<ul>
<li><code>(x, y)</code>表示曲线起点。</li>
<li><code>(x1, y1)</code>是控制点，用来控制曲线弯曲方向（曲线并不一定会经过控制点）。</li>
<li><code>(x2, y2)</code>是结束点（曲线并不一定会经过结束点）。</li>
<li><code>r</code>表示圆弧的半径，用来控制曲线弧度的大小。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 连接三个点间的曲线</span></div><div class="line">ctx.strokeStyle = <span class="string">"tomato"</span>;</div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">ctx.arcTo(<span class="number">200</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">100</span>, <span class="number">100</span>)</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjv1mhqepyj30xa0aawev.jpg" alt=""></p>
<p>说明：</p>
<ol>
<li>红色的是我们上面代码所绘制出来的曲线。</li>
<li>黑色的是根据同样的三个点连接的直线。</li>
<li>曲线弧度的大小取决于我们方法的最后一个参数<code>r</code>（半径）。</li>
</ol>
<h3 id="二次贝塞尔曲线"><a href="#二次贝塞尔曲线" class="headerlink" title="二次贝塞尔曲线"></a>二次贝塞尔曲线</h3><p><strong><code>quadraticCurveTo()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">quadraticCurveTo(x1, y1, x2, y2);</div></pre></td></tr></table></figure>
<p>说明：<code>(x1, y1)</code>和<code>(x2, y2)</code>分别是两个点的坐标。该方法需结合<code>moveTo(x, y)</code>一起使用。</p>
<ul>
<li><code>(x, y)</code>表示曲线起点。</li>
<li><code>(x1, y1)</code>是控制点，用来控制曲线弯曲方向（曲线并不一定会经过控制点）。</li>
<li><code>(x2, y2)</code>是结束点。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 连接三个点间的二次贝塞尔曲线</span></div><div class="line">ctx.strokeStyle = <span class="string">"tomato"</span>;</div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">ctx.quadraticCurveTo(<span class="number">200</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">100</span>);</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fjv1k3csjej30xc09qaag.jpg" alt=""></p>
<h3 id="三次贝塞尔曲线"><a href="#三次贝塞尔曲线" class="headerlink" title="三次贝塞尔曲线"></a>三次贝塞尔曲线</h3><p><strong><code>bezierCurveTo()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bezierCurveTo(x1, y1, x2, y2, x3, y3);</div></pre></td></tr></table></figure>
<p>说明：<code>(x1, y1)</code>、<code>(x2, y2)</code>和<code>(x3, y3)</code>分别是三个点的坐标。该方法需结合<code>moveTo(x, y)</code>一起使用。</p>
<ul>
<li><code>(x, y)</code>表示曲线起点。</li>
<li><code>(x1, y1)</code>和<code>(x2, y2)</code>是控制点，用来控制曲线弯曲方向（曲线并不一定会经过控制点）。</li>
<li><code>(x3, y3)</code>是结束点。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 连接四个点间的三次贝塞尔曲线</span></div><div class="line">ctx.strokeStyle = <span class="string">"tomato"</span>;</div><div class="line">ctx.beginPath();</div><div class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">200</span>);</div><div class="line">ctx.bezierCurveTo(<span class="number">200</span>, <span class="number">400</span>, <span class="number">300</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">300</span>);</div><div class="line">ctx.stroke();</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fjv1i16p06j30x80j20tj.jpg" alt=""></p>
<h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><p>讲了三种绘制曲线的方法，但是我们可以发现，这三种方法都不能让我们精准的确定曲线的弧度。在实际开发中，并不需要我们前端开发人员去研究计算曲线的弧度，每一个点的坐标的都应该是由 UI 设计师提供给我们，而我们需要做的，就是根据点把曲线绘制出来。</p>
<h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><p><strong><code>translate()</code></strong></p>
<p><code>&lt;canvas&gt;</code>的上下文提供了方法<code>translate()</code>用来改变<code>&lt;canvas&gt;</code>的原点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">translate(x, y)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>x</code>：表示左右偏移量（横向移动的距离）。</li>
<li><code>y</code>：表示上下偏移量（纵向移动的距离）。</li>
</ul>
<p>注意：</p>
<ol>
<li><code>translate(x, y)</code>方法控制的是画布的原点，而不是我们绘制的图形。图形的起始点始终是相对于画布的原点<code>(0, 0)</code>设置的，一旦画布原点改变，图形的起始点就会改变，那么图形就会发生位移。</li>
<li><code>translate(x, y)</code>连续调用时效果是叠加的。</li>
</ol>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div><div class="line">ctx.translate(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fjv2nnuxr2j30xa0dcgm9.jpg" alt=""></p>
<h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p><strong><code>rotate()</code></strong></p>
<p><code>&lt;canvas&gt;</code>的上下文提供了方法<code>rotate()</code>用来对图形进行旋转。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rotate(angle)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>angle</code>：表示元素顺时针旋转的角度。参数值是以弧度为单位。</li>
</ul>
<p>注意：</p>
<ol>
<li>图形是相对于画布的原点<code>(0, 0)</code>进行旋转的。</li>
<li>想要更改图形的旋转点，就需要结合<code>translate(x, y)</code>方法去更改画布的原点位置。</li>
<li><code>rotate(angle)</code>连续调用时效果是叠加的。</li>
</ol>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div><div class="line">ctx.translate(<span class="number">100</span>, <span class="number">100</span>);</div><div class="line">ctx.rotate(<span class="built_in">Math</span>.PI / <span class="number">180</span> * <span class="number">45</span>);	</div><div class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fjv3qki3j3j30xa0e474y.jpg" alt=""></p>
<h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p><strong><code>scale()</code></strong></p>
<p><code>&lt;canvas&gt;</code>的上下文提供了方法<code>scale()</code>用来对图形进行缩放。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scale(x, y)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>x</code>：表示横向缩放的比例值，取正数。</li>
<li><code>y</code>：表示纵向缩放的比例值，取正数。</li>
</ul>
<p>注意：</p>
<ol>
<li>缩放时不仅图形自身尺寸会缩放，图形相对于画布原点<code>(0, 0)</code>的位移量也会等比例缩放。</li>
<li>如果只希望图形尺寸缩放，位置偏移量不缩放，需要使用<code>translate(x, y)</code>方法来控制图形的位移。</li>
<li><code>scale(x, y)</code>连续调用时效果是叠乘的。</li>
</ol>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ctx.beginPath();</div><div class="line">ctx.scale(<span class="number">.5</span>, <span class="number">.5</span>);</div><div class="line">ctx.fillRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>效果展示：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fjv443z6aoj30xa0cc3z2.jpg" alt=""></p>
<hr>
<p>OK👌。<code>&lt;canvas&gt;</code>的基础部分就写这么多了。关于<code>&lt;canvas&gt;</code>进阶部分的知识点我会放在下一篇博客中。</p>
<p><a href="https://runjaelyn.github.io/2017/09/12/canvasExpand/" target="_blank" rel="external">《canvas 画布 - 进阶》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;画布是 HTML5 新增的元素，用于图形的绘制。但&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;标签只是图形容器，需要结合 JavaScript 才能绘制图形。&lt;/p&gt;
&lt;p&gt;这一篇博客我们主要讲的是关于&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;的一些基础知识点的操作。&lt;/p&gt;
    
    </summary>
    
      <category term="canvas" scheme="http://yoursite.com/categories/canvas/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="画布" scheme="http://yoursite.com/tags/%E7%94%BB%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>数组的循环和迭代</title>
    <link href="http://yoursite.com/2017/09/02/handleArray/"/>
    <id>http://yoursite.com/2017/09/02/handleArray/</id>
    <published>2017-09-02T02:38:13.000Z</published>
    <updated>2017-09-26T15:28:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，关于数组的操作方法有很多。其中，数组的遍历是我们需要掌握的一个重点。</p>
<p>从 JavaScript 发展到现在，数组的遍历方式也越来越多，所以这篇文章我们主要是讲关于数组的这几种遍历方式的使用方法和分析它们的一些异同点。</p>
<a id="more"></a>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p><strong>普通版<code>for</code>循环</strong></p>
<p><code>for</code>循环是遍历数组最简单的一种，也是使用频率最高的一种。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++ ) &#123;</div><div class="line">	<span class="built_in">console</span>.log( arr[i] ); <span class="comment">// a b c d </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种<code>for</code>循环方式虽然性能不算差，但也仍有优化的空间。</p>
<p><strong>优化版<code>for</code>循环</strong></p>
<p>优化版的<code>for</code>循环，就是在普通版的<code>for</code>循环基础之上，使用临时变量，将数组的长度 <code>arr.length</code>缓存起来，避免重复获取数组长度。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++ ) &#123;</div><div class="line">	<span class="built_in">console</span>.log( arr[i] ); <span class="comment">// a b c d </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式在数组较大时优化效果才会比较明显，但是这种方式基本上也是所有循环遍历方法中性能最高的一种了。</p>
<h3 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for-in 循环"></a>for-in 循环</h3><p>这种循环方式很多人爱用，但实际上，经分析测试，在众多的循环遍历方式中，它的效率是最低的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> i <span class="keyword">in</span> arr ) &#123;</div><div class="line">	<span class="built_in">console</span>.log( arr[i] ); <span class="comment">// a b c d </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明：<code>for-in</code>循环实际是为了循环<strong>可枚举性</strong>（enumerable）对象而设计的。这里暂时不理解可枚举性没关系（在后面对象的文章中会细讲），但至少从这句话我们可以知道，虽然<code>for-in</code>也可以用来遍历数组，但实际上它更适合用来遍历对象。</p>
<h3 id="for-of-循环"><a href="#for-of-循环" class="headerlink" title="for-of 循环"></a>for-of 循环</h3><p><code>for-of</code>是 ES6 引进的新语法，它既比传统的<code>for</code>循环方式简洁，同时弥补了<code>for-in</code>循环的不足。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> item <span class="keyword">of</span> arr ) &#123;</div><div class="line">	<span class="built_in">console</span>.log( item ); <span class="comment">// a b c d </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li><code>for-in</code>是遍历集合对象的键名，<code>for-of</code>是直接遍历集合对象的键值。</li>
<li><code>for-of</code>的遍历方式性能要高于<code>for-in</code>，但仍比不上普通的<code>for</code>循环。</li>
<li><code>for-of</code>不仅支持数组的遍历，还支持大多数类数组对象。同时也支持 ES6 里新增的<code>Map</code>和<code>Set</code>对象。</li>
</ul>
<h2 id="数组迭代"><a href="#数组迭代" class="headerlink" title="数组迭代"></a>数组迭代</h2><p>ES5 为数组定义了几种迭代方法。</p>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><p>自 2009 年 ES5 正式发布后，我们开始可以使用<code>forEach</code>方法来遍历数组。 </p>
<p>描述：按顺序让数组中每一项依次执行某种相同的操作。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>];</div><div class="line"></div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( item );   <span class="comment">// 10 11 12 13 14</span></div><div class="line">	<span class="built_in">console</span>.log( index );  <span class="comment">// 0 1 2 3 4</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fhu3c7xbtrj313e0eijtj.jpg" alt=""></p>
<p>说明：</p>
<ul>
<li>数组自带的<code>forEach</code>循环，使用频率较高，但实际上性能比普通<code>for</code>循环弱。</li>
<li><code>forEach</code>不能使用<code>continue</code>和<code>break</code>语句中断循环，也不能使用<code>return</code>语句返回到外层函数。</li>
</ul>
<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>描述：按顺序让数组中每一项依次执行某种相同的操作，然后返回一个新数组。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> newArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> item * <span class="number">2</span>;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log( newArr ); <span class="comment">// [20, 22, 24, 26, 28]</span></div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fhu3eseae8j30ys0nsgot.jpg" alt=""></p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p>描述：按顺序让数组中每一项依次执行某种相同的操作，然后筛选出符合条件的元素，组成新数组并返回。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> item % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [10, 12, 14]</span></div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fhu45uy6spj317o0p40wy.jpg" alt=""></p>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><p>描述：按顺序让数组中的前项和后项做某种计算，并累计返回最终值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, next</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> prev + next;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 60</span></div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fhu6l2qukbj318q0sy0xb.jpg" alt=""></p>
<p>利用<code>reduce()</code>方法的特点，我们还可以通过该方法结合三目运算来求一个数组中的最大或最小值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="keyword">let</span> result = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, next</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> prev &gt; next ? prev : next;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure>
<h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><p>描述：按顺序让数组中每一项依次执行某种相同的操作，用来检测数组中每一项是否都符合条件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> item % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>说明：检测的元素中，如果全部都满足条件，返回<code>true</code>，只要有一项不满足条件，则返回<code>false</code>。即<strong>一假必假</strong>。</p>
<p>图解：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fhu6w9sywij318m0rytdj.jpg" alt=""></p>
<h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><p>描述：按顺序让数组中每一项依次执行某种相同的操作，用来检测数组中某一项是否都符合条件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> item % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>说明：检测的元素中，只要有一项符合条件，就返回结果<code>true</code>，如果全部都不满足条件，则返回结果<code>false</code>。即<strong>一真必真</strong>。</p>
<p>图解：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fhu70i4mncj319m0s0aez.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1figzpknccgj31780wm0zg.jpg" alt=""></p>
<p>附：本篇文章都只针对以上方法做了一些简单的讲解分析，并不全面。需要深入研究分析的朋友还需另查询其他资料。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 JavaScript 中，关于数组的操作方法有很多。其中，数组的遍历是我们需要掌握的一个重点。&lt;/p&gt;
&lt;p&gt;从 JavaScript 发展到现在，数组的遍历方式也越来越多，所以这篇文章我们主要是讲关于数组的这几种遍历方式的使用方法和分析它们的一些异同点。&lt;/p&gt;
    
    </summary>
    
      <category term="Array" scheme="http://yoursite.com/categories/Array/"/>
    
    
  </entry>
  
  <entry>
    <title>Event 事件 - 扩展</title>
    <link href="http://yoursite.com/2017/08/24/eventExpand/"/>
    <id>http://yoursite.com/2017/08/24/eventExpand/</id>
    <published>2017-08-24T02:49:43.000Z</published>
    <updated>2017-09-26T15:27:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在<a href="https://runjaelyn.github.io/2017/08/23/eventBasic/" target="_blank" rel="external">《Event 事件 - 基础》</a>中讲了关于事件的“事件驱动的三要素”、“事件分类”和“事件绑定”等基础内容，接下来我们在前面内容的基础之上，再来对事件的知识点进行一些扩展的学习。</p>
<a id="more"></a>
<h2 id="事件中的-this"><a href="#事件中的-this" class="headerlink" title="事件中的 this"></a>事件中的 this</h2><p>在事件的处理函数中，可以通过 this 关键字来指代绑定该事件的标签。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"para"</span>&gt;</span> 我是一个p标签 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果我们要在点击完<code>&lt;p&gt;</code>标签后获取到它里面的内容，常规做法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">para.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( para.textContent );        <span class="comment">// 我是一个p标签</span></div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>上述代码可以使用 this 关键字进行改写:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">para.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.textContent );        <span class="comment">// 我是一个p标签</span></div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<h3 id="监听器的-this-兼容优化方案"><a href="#监听器的-this-兼容优化方案" class="headerlink" title="监听器的 this 兼容优化方案"></a>监听器的 this 兼容优化方案</h3><p>通过<code>addEventListener()</code>方法为 HTML 页面的标签绑定事件时，<code>this</code>关键字指代绑定该事件的标签元素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"para"</span>&gt;</span> 我是一个p标签 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">para.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span> );        <span class="comment">// &lt;p id="para"&gt; 我是一个p标签 &lt;/p&gt;</span></div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>通过<code>attachEvent()</code>方法为 HTML 页面的标签绑定事件时，<code>this</code>关键字指代绑定<code>window</code>对象。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"para"</span>&gt;</span> 我是一个p标签 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">para.attachEvent(<span class="string">'onclick'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span> );       <span class="comment">// [Object window]</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>由于在<code>addEventListener()</code>方法中的<code>this</code>和在<code>attachEvent()</code>方法中的<code>this</code>指代不同，我们需要进一步优化我们的兼容方案。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">elem, event, callback</span>)</span>&#123;</div><div class="line">    <span class="comment">// 判断是否存在 addEventListener</span></div><div class="line">    <span class="keyword">if</span> (elem.addEventListener)&#123;</div><div class="line">        elem.addEventListener(event, callback, <span class="literal">false</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        elem.attachEvent(<span class="string">'on'</span> + event, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            callback.call(elem);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bind(para, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span> );</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>HTML 页面的标签绑定事件的处理函数中，提供了一个事件对象（event）。这个事件对象会返回关于该事件的信息，以及该事件绑定在哪个元素中。</p>
<p>事件对象是以事件的处理函数中的参数形式出现，并不需要我们自己创建，直接使用即可。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">事件源.addEventListener(eventName, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="comment">// event 就是事件对象</span></div><div class="line">&#125;, boolean)</div></pre></td></tr></table></figure>
<p>事件对象说明：</p>
<ul>
<li>当事件发生时，只能在事件函数内部访问的对象；</li>
<li>处理函数结束后会自动销毁；</li>
</ul>
<h3 id="兼容的事件对象"><a href="#兼容的事件对象" class="headerlink" title="兼容的事件对象"></a>兼容的事件对象</h3><p>使用 DOM 标准的事件绑定时，Event 事件对象在 IE 8 及之前的版本浏览器情况有所不同。</p>
<p>（1）IE 9 及之后的版本和其他浏览器：通过事件的处理函数的形参直接得到 Event 对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( event )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（2）IE 8 及之前的版本浏览器：Event 事件对象被提供在 window 对象中。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="built_in">window</span>.event )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>想要实现 Event 事件对象的兼容，我们可以在事件的处理函数中添加以下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">event = event || <span class="built_in">window</span>.event;</div></pre></td></tr></table></figure>
<h3 id="Event-对象的属性"><a href="#Event-对象的属性" class="headerlink" title="Event 对象的属性"></a>Event 对象的属性</h3><h4 id="target"><a href="#target" class="headerlink" title="target"></a><code>target</code></h4><p>Event 事件对象提供了<code>target</code>属性用于获取触发事件的目标元素（标签）。</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 我是a标签 <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( event.target );      </div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>上面例子：如果点击<code>&lt;a&gt;</code>标签，则打印<code>&lt;a&gt;</code>标签；如果点击<code>&lt;li&gt;</code>标签，则打印<code>&lt;li&gt;</code>标签及其子级；如果点击<code>&lt;ul&gt;</code>标签，则打印<code>&lt;ul&gt;</code>标签及其子级。</p>
<h4 id="IE-8-及-之前的target"><a href="#IE-8-及-之前的target" class="headerlink" title="IE 8 及 之前的target"></a>IE 8 及 之前的<code>target</code></h4><p>IE 8 及之前的版本浏览器不支持<code>target</code>属性，而是提供了<code>srcElement</code>属性进行替换。</p>
<p>所以，上述示例代码在 IE 8 及之前的版本浏览器中，应该是如下代码:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( event.srcElement )</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>如果提供兼容解决方案的话，我们可以在事件的处理函数中加入如下代码:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> target = event.target || event.srcElement;</div></pre></td></tr></table></figure>
<h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><p>相对于浏览器位置：</p>
<ul>
<li><code>event.clientX</code>：返回当事件被触发时鼠标指针向对于浏览器文档显示区（或客户区）的水平坐标。</li>
<li><code>event.clientY</code>：返回当事件被触发时鼠标指针向对于浏览器文档显示区（或客户区）的垂直坐标。</li>
</ul>
<p>相对于页面位置：</p>
<ul>
<li><code>event.pageX</code>：返回当事件被触发时鼠标指针向对于 HTML 文档页面的水平坐标。</li>
<li><code>event.pageY</code>：返回当事件被触发时鼠标指针向对于 HTML 文档页面的垂直坐标。</li>
</ul>
<p>相对于屏幕位置：</p>
<ul>
<li><code>event.screenX</code>：返回事件发生时鼠标指针相对于屏幕的水平坐标。</li>
<li><code>event.screenY</code>：返回事件发生时鼠标指针相对于屏幕的垂直坐标。</li>
</ul>
<p>相对于事件源位置：</p>
<ul>
<li><code>event.offsetX</code>：返回事件发生时鼠标指针相对于事件源的水平坐标</li>
<li><code>event.offsetY</code>：返回事件发生时鼠标指针相对于事件源的垂直坐标</li>
<li><code>event.layerX</code>：返回事件发生时鼠标指针相对于事件源的水平坐标（Firefox）</li>
<li><code>event.layerY</code>：返回事件发生时鼠标指针相对于事件源的垂直坐标（Firefox）</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"mousemove"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(event.clientX, event.clientY)</div><div class="line">    <span class="built_in">console</span>.log(event.offsetX, event.offsetY)</div><div class="line">    <span class="comment">// ... ...</span></div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><ul>
<li><code>keyCode</code>：获取按下的键盘按键的值的字符代码。</li>
<li><code>altKey</code>：指示在指定的事件发生时，Alt 键是否被按下。</li>
<li><code>ctrlKey</code>：指示当事件发生时，Ctrl 键是否被按下。</li>
<li><code>shiftKey</code>：指示当事件发生时，”SHIFT” 键是否被按下。</li>
</ul>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">box.addEventListener(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( event.keyCode );      <span class="comment">// 输出当前按键对应的 keyCode 数值</span></div><div class="line">    <span class="built_in">console</span>.log( event.shiftKey );     <span class="comment">// 按下“SHIFT”键输出 true，否则输出 false</span></div><div class="line">    <span class="comment">// ... ...</span></div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<h4 id="type属性"><a href="#type属性" class="headerlink" title="type属性"></a>type属性</h4><p>用来检测事件类型</p>
<p>采用上面的例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">box.addEventListener(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( event.type );       <span class="comment">// keydown</span></div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<h3 id="Event-对象的方法"><a href="#Event-对象的方法" class="headerlink" title="Event 对象的方法"></a>Event 对象的方法</h3><h4 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h4><p>HTML 页面的一些标签具有默认行为。所谓默认行为，就是不用编写 JavaScript 代码就可以实现的动态效果。例如如下标签:</p>
<ul>
<li><code>&lt;a&gt;</code>标签：用户点击<code>&lt;a&gt;</code>标签，页面会发生跳转行为。</li>
<li><code>&lt;form&gt;</code>标签：用户点击表单的提交按钮，表单会发生提交行为。</li>
</ul>
<p>阻止默认行为，就是不让 HTML 页面这些标签的默认行为发生。想要阻止默认行为可以通过 Event 事件对象提供的属性和方法实现:</p>
<ul>
<li>IE 8 及之前版本的浏览器: <code>returnValue</code>属性</li>
<li>IE 9 及之后版本和其他浏览器: <code>preventDefault()</code>方法</li>
</ul>
<p>想要提供兼容方案，可以使用如下代码实现:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (event.preventDefault)&#123;</div><div class="line">    event.preventDefault();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    event.returnValue = <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><blockquote>
<p>事件流描述的是从页面中接受事件的顺序，也可以理解为事件在页面中传播的顺序。</p>
</blockquote>
<p>JavaScript 事件流最早要从 IE 和网景公司的浏览器大战说起，IE 提出的是冒泡流，而网景提出的是捕获流，后来在 W3C 组织的统一之下，JavaScript 支持了冒泡流和捕获流，但是目前低版本的 IE 浏览器还是只能支持冒泡流(IE6、IE7、IE8 均只支持冒泡流)，所以为了能够兼容更多的浏览器，建议大家使用冒泡流。</p>
<h3 id="事件流的分类"><a href="#事件流的分类" class="headerlink" title="事件流的分类"></a>事件流的分类</h3><p>我们将事件流一共分为了以下三种：</p>
<ul>
<li>冒泡型事件流（ Event Bubbling ）</li>
<li>捕获型事件流（ Event Capturing ）</li>
<li>DOM 事件流模型</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fin65r6x3oj313q0lk77r.jpg" alt=""></p>
<p>那么这三种事件流到底有什么区别呢？所以我们来看一个例子。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们创建三个<code>&lt;div&gt;</code>，最终样式如下图所示（这里 CSS 代码就省略不写了）：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fin3f5aohkj31a60gojrz.jpg" alt=""></p>
<h4 id="捕获型事件流"><a href="#捕获型事件流" class="headerlink" title="捕获型事件流"></a>捕获型事件流</h4><p>现在，我们依次给这三个<code>&lt;div&gt;</code>绑定点击事件，JavaScript 代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">box1.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"box1"</span> );</div><div class="line">&#125;, <span class="literal">true</span>)</div><div class="line">box2.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"box2"</span> );</div><div class="line">&#125;, <span class="literal">true</span>)</div><div class="line">box3.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"box3"</span> );</div><div class="line">&#125;, <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<p>然后，我们去页面上执行点击事件，会出现奇怪的情况：</p>
<ul>
<li>当我们点击最里层的<code>box3</code>时，控制台依次输出：</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fin3v7cr7mj314k06mmxf.jpg" alt=""></p>
<ul>
<li>当我们点击中间层的<code>box2</code>时，控制台输出：</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fin3ubtxebj314k0503yn.jpg" alt=""></p>
<ul>
<li>当我们点击最外层的<code>box1</code>时，控制台输出：</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fin3l2v90pj314k034q2y.jpg" alt=""></p>
<p>说明：我们给三个<code>addEventListener()</code>方法的第三个参数都给了<code>true</code>，就表示该元素在事件的“捕获阶段”响应事件，即从最外层依次往里层目标元素触发事件。</p>
<h4 id="冒泡型事件流"><a href="#冒泡型事件流" class="headerlink" title="冒泡型事件流"></a>冒泡型事件流</h4><p>接下来我们把我们绑定的点击事件的代码改一下，把<code>addEventListener()</code>方法的第三个参数换成<code>false</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">box1.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"box1"</span> );</div><div class="line">&#125;, <span class="literal">false</span>)</div><div class="line">box2.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"box2"</span> );</div><div class="line">&#125;, <span class="literal">false</span>)</div><div class="line">box3.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"box3"</span> );</div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>然后，我们再去页面上执行点击事件，又会出现不一样的情况：</p>
<ul>
<li>当我们点击最里层的<code>box3</code>时，控制台输出：</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fin3k11ay9j314i06agly.jpg" alt=""></p>
<ul>
<li>当我们点击中间层的<code>box2</code>时，控制台输出：</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fin3m9ez6jj314k04y0t0.jpg" alt=""></p>
<ul>
<li>当我们点击最外层的<code>box1</code>时，控制台输出：</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fin3l2v90pj314k034q2y.jpg" alt=""></p>
<p>说明：我们给三个<code>addEventListener()</code>方法的第三个参数都给了<code>false</code>，就表示该元素在事件的“冒泡阶段”响应事件，即从目标元素依次往最外层触发事件。</p>
<h4 id="DOM-事件流模型"><a href="#DOM-事件流模型" class="headerlink" title="DOM 事件流模型"></a>DOM 事件流模型</h4><p>DOM 事件流模型同时支持两种事件模型，即捕获型事件与冒泡型事件，但是，捕获型事件先发生。两种事件流都会触发 DOM 中的所有对象，从 document 对象开始，也在 document 对象结束（大部分兼容标准的浏览器会继续将事件是捕捉/冒泡延续到 window 对象）。</p>
<p><strong>事件周期</strong></p>
<p>根据 W3C 标准，一个事件完整的传递过程可以分为三个阶段：</p>
<ul>
<li>捕获阶段：事件根据 DOM 树结构从最上层节点依次向目标节点传播的阶段。</li>
<li>触发阶段：真正的目标节点正在处理事件的阶段。</li>
<li>冒泡阶段：事件根据 DOM 树结构从目标节点依次向上传播的阶段。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fin57kxptxj31460nwgpi.jpg" alt=""></p>
<h3 id="阻止事件流"><a href="#阻止事件流" class="headerlink" title="阻止事件流"></a>阻止事件流</h3><p>从上面的示例中可以知道，不管是冒泡阶段还是捕获阶段，我们的事件都会一层一层的进行传播。但是如果我们只想触发当前节点的事件，而不继续向上冒泡或向下捕获，我们可以通过 Event 事件对象提供的属性来进行阻止事件流:</p>
<ul>
<li>IE 8 及之前版本的浏览器: <code>cancelBubble</code>属性</li>
<li>IE 9 及之后版本和其他浏览器: <code>stopPropagation()</code>方法</li>
</ul>
<p>想要提供兼容方案，可以使用如下代码实现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( event.stopPropagation )&#123;</div><div class="line">    event.stopPropagation();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    event.cancelBubble = <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>在讨论什么是事件委托之前，我们先来看一个示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 链接1 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 链接2 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 链接3 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>一个<code>&lt;ul&gt;</code>列表，如果我们要给每个<code>&lt;a&gt;</code>标签绑定一个点击事件，常规代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> allA = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allA.length; i++)&#123;</div><div class="line">    allA[i].addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span> );</div><div class="line">    &#125;, <span class="literal">false</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码执行结果，每点击一个<code>&lt;a&gt;</code>标签，就可以得到一个当前的<code>&lt;a&gt;</code>标签元素。</p>
<p>但是，如果我们的<code>&lt;a&gt;</code>标签不是静态的节点而是动态生成的呢？如下代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 链接1 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 链接2 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 链接3 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们在页面上增加一个“增加”按钮，每点击一次，增加一个<code>&lt;li&gt;</code>和<code>&lt;a&gt;</code>;</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</div><div class="line">    li.innerHTML = <span class="string">'&lt;a href="#"&gt; 链接4 &lt;/a&gt;'</span>;</div><div class="line">    list.appendChild( li ) ;</div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>然后这个时候我们再执行点击事件，会发现：新添加的选项的<code>&lt;a&gt;</code>标签并没有点击事件。如果我们想为新添加的<code>&lt;a&gt;</code>标签同样绑定<code>click</code>事件，可以将事件绑定到所有<code>&lt;a&gt;</code>标签共有的祖先元素上。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">list.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>( event.target.nodeName === <span class="string">"A"</span> )&#123;</div><div class="line">        <span class="built_in">console</span>.log( <span class="string">"我是a标签"</span> )</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>这种将事件绑定在其祖先元素身上的方式，我们就可以称之为<strong>事件委托</strong>。</p>
<blockquote>
<p>事件委托原理：事件委托就是利用的 DOM 事件的冒泡机制。把具体节点上发生的事件，委托给更大范围的节点去处理。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在&lt;a href=&quot;https://runjaelyn.github.io/2017/08/23/eventBasic/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Event 事件 - 基础》&lt;/a&gt;中讲了关于事件的“事件驱动的三要素”、“事件分类”和“事件绑定”等基础内容，接下来我们在前面内容的基础之上，再来对事件的知识点进行一些扩展的学习。&lt;/p&gt;
    
    </summary>
    
      <category term="Event 事件" scheme="http://yoursite.com/categories/Event-%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="this" scheme="http://yoursite.com/tags/this/"/>
    
      <category term="event" scheme="http://yoursite.com/tags/event/"/>
    
      <category term="事件流" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6%E6%B5%81/"/>
    
      <category term="冒泡" scheme="http://yoursite.com/tags/%E5%86%92%E6%B3%A1/"/>
    
      <category term="捕获" scheme="http://yoursite.com/tags/%E6%8D%95%E8%8E%B7/"/>
    
      <category term="事件委托" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
    
  </entry>
  
  <entry>
    <title>Event 事件 - 基础</title>
    <link href="http://yoursite.com/2017/08/23/eventBasic/"/>
    <id>http://yoursite.com/2017/08/23/eventBasic/</id>
    <published>2017-08-23T02:41:30.000Z</published>
    <updated>2017-09-26T15:24:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Javascript 使我们可以动态的去创建操作一个页面。当我们在与浏览器交互的时候，浏览器就会触发各种事件。</p>
<p>比如我们打开某一个网页的时候，浏览器需要加载完成这个网页，就会触发一个加载事件；当我们点击页面中的某一个“地方”，浏览器就会在那个“地方”触发一个点击事件。<br><a id="more"></a></p>
<h2 id="事件驱动三要素"><a href="#事件驱动三要素" class="headerlink" title="事件驱动三要素"></a>事件驱动三要素</h2><ul>
<li><strong>事件源</strong>：即触发事件的元素</li>
<li><strong>事件</strong>：被 JavaScript 监测到的行为。例如：<ul>
<li>鼠标点击</li>
<li>键盘按键</li>
<li>选取输入框</li>
<li>… …</li>
</ul>
</li>
<li><strong>事件处理函数</strong>：事件发生时要进行的操作，又叫做”事件句柄”或”事件监听器”。</li>
</ul>
<h2 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h2><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fj1k1o62ovj316q0umaep.jpg" alt=""></p>
<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>为 HTML 页面指定标签绑定指定事件，可以通过以下三种方式实现:</p>
<ul>
<li>HTML 标签的事件属性：这种方式 HTML 代码和 JavaScript 逻辑不能很好地分离，所以不建议使用。</li>
<li>DOM 标准的事件：这种方式只能为指定的一个标签绑定一个事件，并且只能具有一个事件处理函数。</li>
<li>事件监听器：这种方式是目前最受欢迎的一种方式。但 IE 8 及之前的版本不支持！</li>
</ul>
<h3 id="HTML-标签的事件属性"><a href="#HTML-标签的事件属性" class="headerlink" title="HTML 标签的事件属性"></a>HTML 标签的事件属性</h3><p>即把事件作为 HTML 标签的属性直接绑定在 HTML 标签身上，属于 DOM 0 级事件。例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"点击"</span> <span class="attr">onclick</span>=<span class="string">"test()"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DOM-标准的事件"><a href="#DOM-标准的事件" class="headerlink" title="DOM 标准的事件"></a>DOM 标准的事件</h3><p>通过<code>on</code>加事件类型的方式去绑定事件，也属于 DOM 0 级事件。例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"点击"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方式一</span></div><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 方式二</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line">btn.onclick = test;</div></pre></td></tr></table></figure>
<h3 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h3><p>DOM 提供了事件监听器，可以同时绑定或删除多个事件，并且具有多个事件处理函数。属于 DOM 2 级事件。</p>
<p>具体监听器语法结构如下:</p>
<p><strong>绑定：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">事件源.addEventListener( eventName, functionName, boolean );</div></pre></td></tr></table></figure>
<p><strong>删除：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">事件源.removeEventListener( eventName, functionName, boolean );</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>eventName</code>：为元素指定具体的事件名称（例如单击事件是<code>click</code>等）；</li>
<li><code>functionName</code>：绑定事件的处理函数；</li>
<li><code>boolean</code>：布尔值。设置事件是捕获阶段还是冒泡阶段。默认值为<code>false</code>，为冒泡阶段；</li>
</ul>
<p>例（绑定）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"点击"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'你终于点中了我...'</span> );</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>例（删除）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建事件句柄</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'你终于点中了我...'</span> );</div><div class="line">&#125;</div><div class="line"><span class="comment">// 绑定事件</span></div><div class="line">btn.addEventListener(<span class="string">'click'</span>, handle, <span class="literal">false</span>);</div><div class="line"><span class="comment">// 删除事件</span></div><div class="line">btn.removeEventListener(<span class="string">'click'</span>, handle, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p><code>addEventListener()</code>方法还可以为指定一个元素绑定一个事件同时具有多个处理函数。如下代码示例:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'执行第一次点击事件'</span> );</div><div class="line">&#125;, <span class="literal">false</span>);</div><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'执行第二次点击事件'</span> );</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<h4 id="IE-8-及之前的监听器"><a href="#IE-8-及之前的监听器" class="headerlink" title="IE 8 及之前的监听器"></a>IE 8 及之前的监听器</h4><p>我们前面提到，事件监听器的方式 IE 8 以及之前的浏览器并不支持。所以提供了其他方法实现。</p>
<p>语法结构：</p>
<p><strong>绑定：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">事件源.attachEvent( eventName, functionName );</div></pre></td></tr></table></figure>
<p><strong>删除：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">事件源.detachEvent( eventName, functionName );</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>eventName</code>：为元素指定具体的事件名称（例如单击事件是<code>click</code>等）；</li>
<li><code>functionName</code>：绑定事件的处理函数；</li>
</ul>
<blockquote>
<p>注意：<code>attachEvent()</code>方法的<code>eventName</code>参数与<code>addEventListener()</code>方法的<code>eventName</code>参数不同。</p>
</blockquote>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"点击"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">btn.attachEvent(<span class="string">'onclick'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'你终于点中了我...'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="监听器的兼容方案"><a href="#监听器的兼容方案" class="headerlink" title="监听器的兼容方案"></a>监听器的兼容方案</h4><p>我们可以封装一个函数专门来解决事件监听器的浏览器之间兼容问题。具体代码示例如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">elem, event, callback</span>)</span>&#123;</div><div class="line">    <span class="comment">// 判断是否存在 addEventListener</span></div><div class="line">    <span class="keyword">if</span> (elem.addEventListener)&#123;</div><div class="line">        elem.addEventListener(event, callback, <span class="literal">false</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        elem.attachEvent(<span class="string">'on'</span> + event, callback);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bind(btn, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'你终于点中了我...'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Javascript 使我们可以动态的去创建操作一个页面。当我们在与浏览器交互的时候，浏览器就会触发各种事件。&lt;/p&gt;
&lt;p&gt;比如我们打开某一个网页的时候，浏览器需要加载完成这个网页，就会触发一个加载事件；当我们点击页面中的某一个“地方”，浏览器就会在那个“地方”触发一个点击事件。&lt;br&gt;
    
    </summary>
    
      <category term="Event 事件" scheme="http://yoursite.com/categories/Event-%E4%BA%8B%E4%BB%B6/"/>
    
    
      <category term="事件三要素" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6%E4%B8%89%E8%A6%81%E7%B4%A0/"/>
    
      <category term="事件分类" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6%E5%88%86%E7%B1%BB/"/>
    
      <category term="事件绑定" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>DOM - Element 对象</title>
    <link href="http://yoursite.com/2017/08/19/element/"/>
    <id>http://yoursite.com/2017/08/19/element/</id>
    <published>2017-08-19T06:58:49.000Z</published>
    <updated>2017-08-31T08:40:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>DOM 访问或操作 HTML 页面内容主要是依靠 DOM 节点树这个模型。但在 DOM 中的三个主要对象，除了 Document 和 Node 之外，还有一个就是 Element 对象。</p>
<p>Element 对象描述了所有相同种类的元素所普遍具有的方法和属性，也是访问和操作 HTML 页面内容的主要途径之一。</p>
<a id="more"></a>
<h2 id="Element-与-Node"><a href="#Element-与-Node" class="headerlink" title="Element 与 Node"></a>Element 与 Node</h2><p><strong>元素与节点的区别：</strong></p>
<p>1）通过节点访问或操作 HTML 页面内容：</p>
<ul>
<li>元素节点：表示 HTML 页面中的标签。</li>
<li>属性节点：表示 HTML 页面中标签的属性。</li>
<li>文本节点：表示 HTML 页面中标签的文本内容。</li>
</ul>
<p>2）通过元素访问或操作 HTML 页面内容：</p>
<ul>
<li>元素：表示 HTML 页面中的标签。</li>
</ul>
<p>也就是说：</p>
<blockquote>
<p>使用节点方式时：标签、属性和文本是同级关系；</p>
<p>使用元素方式时：只有标签，属性和文本成为了标签的一部分。</p>
</blockquote>
<h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><p>由于 Element 对象是继承于 Document 对象的，所以 Document 对象的属性和方法，Element 对象都可以直接使用。</p>
<p>我们已经掌握如何通过 Document 对象获取 HTML 页面标签:</p>
<ul>
<li><code>getElementById()</code>方法：通过标签的<code>id</code>属性值获取指定标签。</li>
<li><code>getElementsByClassName()</code>方法：通过标签的<code>class</code>属性值获取指定标签。</li>
<li><code>getElementsByTagName()</code>方法：通过标签名获取指定标签。</li>
<li><code>getElementsByName()</code>方法：通过标签的<code>name</code>属性值获取指定标签。</li>
<li><code>querySelector()</code>方法：通过 CSS 选择器方式获取匹配的第一个标签。</li>
<li><code>querySelectorAll()</code>方法：通过 CSS 选择器方式获取匹配的所有标签。</li>
</ul>
<p>以上获取 HTML 页面标签的方法，在 Element 对象中同样可以使用。</p>
<blockquote>
<p>注意：获取的 HTML 页面中的标签，既是 Node 对象，也是 Element 对象。</p>
</blockquote>
<h2 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h2><h3 id="获取父元素"><a href="#获取父元素" class="headerlink" title="获取父元素"></a>获取父元素</h3><p>通过 HTML 页面的指定标签查找其父元素。</p>
<p><strong><code>parentElement</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">子元素.parentElement</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sonEle = <span class="built_in">document</span>.getElementById(<span class="string">"son"</span>);</div><div class="line"><span class="keyword">let</span> fatherEle = son.parentElement;</div><div class="line"><span class="built_in">console</span>.log( fatherEle );         <span class="comment">// &lt;div id="father"&gt;...&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p>注意：</p>
<p>“Node 对象”的<code>parentNode</code>和“Element 对象”的<code>parentElement</code>两个方法都可以用来获取父级，但是有区别：</p>
<ul>
<li><code>parentNode</code>表示获取指定元素的父节点。这个父节点可能是元素节点，也可能是文档节点。</li>
<li><code>parentElement</code>表示获取指定元素的父元素节点。该元素没有父节点，或者它的父节点不是一个元素节点，则返回<code>null</code>。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> htmlNode = <span class="built_in">document</span>.documentElement;     <span class="comment">// 获取 html 元素</span></div><div class="line"><span class="built_in">console</span>.log( htmlNode.parentNode );          <span class="comment">// #document</span></div><div class="line"><span class="built_in">console</span>.log( htmlNode.parentElement );       <span class="comment">// null</span></div></pre></td></tr></table></figure>
<p>原因在于<code>html</code>的父节点<code>document</code>并不是一个元素节点，而是一个文档节点。</p>
<h3 id="获取子元素"><a href="#获取子元素" class="headerlink" title="获取子元素"></a>获取子元素</h3><p>通过 HTML 页面的指定标签查找其子元素。</p>
<p><strong><code>firstElementChild</code></strong>：获取指定标签的第一个子元素。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父元素.firstElementChild</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fatherEle = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);</div><div class="line"><span class="keyword">let</span> sonELe = fatherEle.firstElementChild;</div><div class="line"><span class="built_in">console</span>.log( sonELe );      <span class="comment">// &lt;div id="son1"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong><code>lastElementChild</code></strong>：获取指定标签的最后一个子元素。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父元素.lastElementChild</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fatherEle = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);</div><div class="line"><span class="keyword">let</span> sonELe = fatherEle.lastElementChild;</div><div class="line"><span class="built_in">console</span>.log( sonELe );      <span class="comment">// &lt;div id="son3"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong><code>children</code></strong>：获取指定标签的所有子元素。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父元素.children</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fatherEle = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);</div><div class="line"><span class="keyword">let</span> sonELe = fatherEle.children;</div><div class="line"><span class="built_in">console</span>.log( sonELe );      <span class="comment">//  [ div#son1, div#son2, div#son3 ]</span></div></pre></td></tr></table></figure>
<p>“Node 对象”的<code>childNodes</code>和“Element 对象”的<code>children</code>两种方法都是用来获取所有子级，但是有区别：</p>
<ul>
<li><code>childNodes</code>返回指定元素的子元素集合，包括 HTML 节点、所有属性、文本节点。</li>
<li><code>children</code>返回指定元素的子元素集合，但它只返回 HTML 元素节点。</li>
</ul>
<h3 id="获取兄弟元素"><a href="#获取兄弟元素" class="headerlink" title="获取兄弟元素"></a>获取兄弟元素</h3><p>通过 HTML 页面的指定标签查找兄弟元素。</p>
<p><strong><code>previousElementSibling</code></strong>: 获取指定节点的前一个兄弟节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">兄弟元素.previousElementSibling</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> brother2Ele = <span class="built_in">document</span>.getElementById(<span class="string">"brother2"</span>);</div><div class="line"><span class="keyword">var</span> brotherEle = brother2Ele.previousElementSibling;</div><div class="line"><span class="built_in">console</span>.log( brotherEle );       <span class="comment">// &lt;div id="brother1"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong><code>nextElementSibling</code></strong>: 获取指定节点的后一个兄弟节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">兄弟节点.nextElementSibling</div></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> brother2Ele = <span class="built_in">document</span>.getElementById(<span class="string">"brother2"</span>);</div><div class="line"><span class="keyword">var</span> brotherEle = brother2Ele.nextElementSibling;</div><div class="line"><span class="built_in">console</span>.log( brotherEle );      <span class="comment">// &lt;div id="brother3"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<h2 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h2><p>Element 对象提供的属性操作的方法，是实际开发中应用最多的。（因为 Element 对象操作属性要比 Node 对象简便。）</p>
<h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><p>获取 HTML 页面标签的指定属性值。</p>
<p><strong><code>getAttribute()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.getAttribute( 属性名 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span> <span class="attr">title</span>=<span class="string">"a标签"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</div><div class="line"><span class="keyword">var</span> aAttr = aEle.getAttribute(<span class="string">"title"</span>);</div><div class="line"><span class="built_in">console</span>.log( aAttr );      <span class="comment">// a标签</span></div></pre></td></tr></table></figure>
<h3 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h3><p>设置 HTML 页面标签的指定属性。</p>
<p><strong><code>setAttribute()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.setAttribute( 属性名, 属性值 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</div><div class="line"><span class="keyword">var</span> aAttr = aEle.setAttribute(<span class="string">"title"</span>, <span class="string">"a标签"</span>);</div><div class="line"><span class="built_in">console</span>.log( aEle );      <span class="comment">// &lt;a href="#" id="link" title="a标签"&gt;&lt;/a&gt;</span></div></pre></td></tr></table></figure>
<h3 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h3><p>删除 HTML 页面标签的指定属性。</p>
<p><strong><code>removeAttribute()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.removeAttribute( 属性名 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span> <span class="attr">title</span>=<span class="string">"a标签"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</div><div class="line"><span class="keyword">var</span> aAttr = aEle.removeAttribute(<span class="string">"title"</span>);</div><div class="line"><span class="built_in">console</span>.log( aEle );       <span class="comment">// &lt;a href="#" id="link"&gt;&lt;/a&gt;</span></div></pre></td></tr></table></figure>
<h3 id="判断是否含有属性"><a href="#判断是否含有属性" class="headerlink" title="判断是否含有属性"></a>判断是否含有属性</h3><p>判断 HTML 页面标签的是否含有属性。</p>
<p><strong><code>hasAttribute()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.hasAttribute( 属性名 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span> <span class="attr">title</span>=<span class="string">"a标签"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</div><div class="line"><span class="keyword">var</span> aAttr = aEle.hasAttribute(<span class="string">"title"</span>);</div><div class="line"><span class="built_in">console</span>.log( aAttr );    <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="操作内容"><a href="#操作内容" class="headerlink" title="操作内容"></a>操作内容</h2><h3 id="获取或更新文本"><a href="#获取或更新文本" class="headerlink" title="获取或更新文本"></a>获取或更新文本</h3><p><strong><code>innerText</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.innerText</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span>&gt;</span> 我是一个 <span class="tag">&lt;<span class="name">i</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span>i标签<span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</div><div class="line"><span class="comment">// 获取文本</span></div><div class="line"><span class="keyword">let</span> aText = aEle.innerText;</div><div class="line"><span class="built_in">console</span>.log( aText );                   <span class="comment">// "我是一个"</span></div><div class="line"><span class="comment">// 更新文本</span></div><div class="line">aEle.innerText = <span class="string">"我换了一个新文本"</span>;</div><div class="line"><span class="keyword">let</span> newText = aEle.innerText;</div><div class="line"><span class="built_in">console</span>.log( newText );                 <span class="comment">// "我换了一个新文本"</span></div></pre></td></tr></table></figure>
<p><strong><code>textContent</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.textContent</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span>&gt;</span> 我是一个 <span class="tag">&lt;<span class="name">i</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span>i标签<span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</div><div class="line"><span class="comment">// 获取文本</span></div><div class="line"><span class="keyword">let</span> aText = aEle.textContent;</div><div class="line"><span class="built_in">console</span>.log( aText );                  <span class="comment">// "我是一个i标签"</span></div><div class="line"><span class="comment">// 更新文本</span></div><div class="line">aEle.textContent = <span class="string">"我换了一个新文本"</span>;</div><div class="line"><span class="keyword">let</span> newText = aEle.textContent;</div><div class="line"><span class="built_in">console</span>.log( newText );                <span class="comment">// "我换了一个新文本"</span></div></pre></td></tr></table></figure>
<p>除了这里我们提到的两个属性可以操作文本内容外，前面的<a href="https://runjaelyn.github.io/2017/08/19/node/" target="_blank" rel="external">《DOM - Node 对象》</a>中的<code>nodeValue</code>属性也可以操作文本内容，所以我们对这三个属性做一个对比：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fip2956ymaj315y094dhc.jpg" alt=""></p>
<p>注意：并不建议使用<code>innerText</code>属性，因为它并不属性任何标准，而且性能不好。</p>
<h3 id="获取或更新-HTML"><a href="#获取或更新-HTML" class="headerlink" title="获取或更新 HTML"></a>获取或更新 HTML</h3><p><strong><code>innerHTML</code></strong>：我们可以通过 innerHTML 属性来获取或更新 HTML 页面的指定标签所包含的 HTML 代码内容。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.innerHTML</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span>&gt;</span> 我是一个 <span class="tag">&lt;<span class="name">i</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span>i标签<span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</div><div class="line"><span class="comment">// 获取 HTML</span></div><div class="line"><span class="keyword">let</span> aHtml = aEle.innerHTML;</div><div class="line"><span class="built_in">console</span>.log( aHtml );      <span class="comment">// "我是一个 &lt;i style="display: none"&gt;i标签&lt;/i&gt;"</span></div><div class="line"><span class="comment">// 更新 HTML</span></div><div class="line">aEle.innerHTML = <span class="string">"&lt;span&gt;我是a标签里的span标签&lt;/span&gt;"</span>;</div><div class="line"><span class="keyword">let</span> newHtml = aEle.innerHTML;</div><div class="line"><span class="built_in">console</span>.log( newHtml );    <span class="comment">// "&lt;span&gt;我是a标签里的span标签&lt;/span&gt;"</span></div></pre></td></tr></table></figure>
<p><strong><code>innerHTML</code>属性和 DOM 操作的优缺点：</strong></p>
<p>1）innerHTML 属性：</p>
<ul>
<li><p>优点：</p>
<ul>
<li>和 DOM 操作方法相比，可以使用更少的代码添加大量的新标签。</li>
<li>向页面中添加大量新元素时，速度比 DOM 操作更快。</li>
<li>当需要移除元素中的所有内容时，它更简单（直接设置一个空字符串即可）。</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>不应该用它来添加来自于用户输入的内容，因为存在安全隐患。</li>
<li>在添加一个很大的 DOM 片段时，这个方法很难独立区分出每一个元素。</li>
<li>事件处理程序可能不像预期那样生效。</li>
</ul>
</li>
</ul>
<p>2）DOM 操作：</p>
<ul>
<li><p>优点：</p>
<ul>
<li>如果 DOM 片段中拥有大量的兄弟节点，处理其中一个元素节点时使用这种方法更合适。</li>
<li>不会影响事件处理程序。</li>
<li>可以轻易地使用脚本来逐步添加元素。</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>如果需要对页面内容进行大量修改，它的速度比 innerHTML 属性更慢。</li>
<li>与使用 innerHTML 属性相比，它需要更多的代码来实现同样的功能。</li>
</ul>
</li>
</ul>
<h2 id="CSS-操作"><a href="#CSS-操作" class="headerlink" title="CSS 操作"></a>CSS 操作</h2><h3 id="操作内联样式"><a href="#操作内联样式" class="headerlink" title="操作内联样式"></a>操作内联样式</h3><p>HTML 页面标签的内联样式主要是通过 style 属性进行设置，所以 DOM 操作标签的内联样式也是通过 style 属性来完成的。</p>
<h4 id="设置内联样式"><a href="#设置内联样式" class="headerlink" title="设置内联样式"></a>设置内联样式</h4><p>想改变 HTML 页面标签的内联样式，我们可以通过以下方式实现。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.style.样式属性名 = 样式属性值</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">box.style.height = <span class="string">"100px"</span>;</div><div class="line">box.style.backgroundColor = <span class="string">"red"</span>;</div><div class="line"><span class="built_in">console</span>.log( box ); <span class="comment">// &lt;div id="box" style="height: 100px; background-color: red;"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>在修改例如<code>background-color</code>这样的 CSS 属性时，不能使用<code>element.style.background-color</code>这种方式，浏览器会解析成 JavaScript 的表达式。最终会报错。</p>
<blockquote>
<p>所有例如<code>background-color</code>这样的 CSS 属性在使用时，必须要改为驼峰式命名方式（例如 <code>backgroundColor</code>）。</p>
</blockquote>
<h4 id="设置多个内联样式"><a href="#设置多个内联样式" class="headerlink" title="设置多个内联样式"></a>设置多个内联样式</h4><p>上面<code>元素.style.样式属性名</code>的方式每次只能设置单个内联样式，当我们需要同时设置多个内联样式时，可以通过以下方法实现。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.style.cssText = 样式</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">box.style.cssText = <span class="string">"height: 100px; background-color: red;"</span></div><div class="line"><span class="built_in">console</span>.log( box ); <span class="comment">// &lt;div id="box" style="height: 100px; background-color: red;"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<h4 id="获取内联样式"><a href="#获取内联样式" class="headerlink" title="获取内联样式"></a>获取内联样式</h4><p>获取 HTML 页面标签的内联样式，我们同样可以通过以下方式实现。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.style.样式属性名</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"height: 100px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="built_in">console</span>.log( box.style.height );      <span class="comment">// 100px</span></div></pre></td></tr></table></figure>
<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p>内联样式<code>style</code>也是元素的一个属性，所以也可以通过前面提到的操作属性的方式来操作内联样式。</p>
<p><strong>设置内联样式</strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.setAttribute( <span class="string">"style"</span>, 样式 );</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">box.setAttribute(<span class="string">"style"</span>, <span class="string">"background-color:red"</span>);</div><div class="line"><span class="built_in">console</span>.log( box );      <span class="comment">// &lt;div id="box" style="background-color: red"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong>获取内联样式</strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.getAttribute( <span class="string">"style"</span> );</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"height: 100px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="keyword">let</span> boxStyle = box.getAttribute(<span class="string">"style"</span>);</div><div class="line"><span class="built_in">console</span>.log( boxStyle )     <span class="comment">// "height: 100px"</span></div></pre></td></tr></table></figure>
<h3 id="操作样式表样式"><a href="#操作样式表样式" class="headerlink" title="操作样式表样式"></a>操作样式表样式</h3><p>通过<code>element.style</code>属性，我们只能获取内联样式内容，并不能获取 CSS （内部／外部）样式表内容。所以，我们还需要以下方法来获取样式表中的样式。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IE Chrome</span></div><div class="line"><span class="built_in">document</span>.styleSheets[样式表下标].rules[样式下标].style.样式属性名</div><div class="line"></div><div class="line"><span class="comment">// Firefox</span></div><div class="line"><span class="built_in">document</span>.styleSheets[样式表下标].cssRules[样式下标].style.样式属性名</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取样式</span></div><div class="line"><span class="keyword">let</span> myStyle = <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].rules[<span class="number">0</span>].style.backgroundColor;</div><div class="line"><span class="built_in">console</span>.log( myStyle );       <span class="comment">// "red"</span></div><div class="line"></div><div class="line"><span class="comment">// 更新样式</span></div><div class="line"><span class="built_in">document</span>.styleSheets[<span class="number">0</span>].rules[<span class="number">0</span>].style.backgroundColor = <span class="string">"blue"</span>;</div></pre></td></tr></table></figure>
<h3 id="获取最终样式"><a href="#获取最终样式" class="headerlink" title="获取最终样式"></a>获取最终样式</h3><p>前面两种获取元素样式的方法，一个是获取内联样式，一个是获取样式表样式。但是，当一个元素身上两种样式都存在时，我们怎么确定用哪种方式去获取。所以，还有第三种方法，获取元素的最终样式，也就是元素最终在页面上显示的样式。</p>
<p><strong><code>getComputedStyle()</code></strong></p>
<p>我们可以通过这个方法获取 HTML 页面标签的当前样式内容（内联样式及外联样式）。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.getComputedStyle( 元素, <span class="literal">null</span> ).样式属性名</div></pre></td></tr></table></figure>
<p>因为<code>getComputedStyle()</code>方法会返回一个包含当前所有的 CSS 样式的对象，然后我们就可以再通过<code>object.样式属性名</code>的方式得到指定的样式属性值。</p>
<p>例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="keyword">let</span> myStyle = <span class="built_in">window</span>.getComputedStyle( box, <span class="literal">null</span> ).height;</div><div class="line"><span class="built_in">console</span>.log( myStyle );       <span class="comment">// "100px"</span></div></pre></td></tr></table></figure>
<p><strong><code>currentStyle</code></strong></p>
<p>IE 8 及之前版本的浏览器并不支持<code>getComputedStyle()</code>方法。如果，在 IE 8 及之前版本的浏览器，我们需要使用这个属性实现。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.currentStyle.属性样式名</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="keyword">let</span> myStyle = box.currentStyle.height;</div><div class="line"><span class="built_in">console</span>.log( myStyle );       <span class="comment">// "100px"</span></div></pre></td></tr></table></figure>
<p><strong>提供兼容方案</strong></p>
<p>用户既可能使用 IE 8 及之前的版本，也可能使用 IE 9 及之后的版本，还可能使用其他浏览器。所以，我们在实际开发中，需要提供一个全浏览器兼容的解决方案。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, attrName</span>)</span>&#123;</div><div class="line">    <span class="comment">// 判断 window.getComputedStyle() 方法是否存在</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.getComputedStyle)&#123;</div><div class="line">        <span class="keyword">return</span> getComputedStyle(elem, <span class="literal">null</span>)[attrName];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> elem.currentStyle[attrName];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取元素尺寸"><a href="#获取元素尺寸" class="headerlink" title="获取元素尺寸"></a>获取元素尺寸</h3><h4 id="获取可见尺寸"><a href="#获取可见尺寸" class="headerlink" title="获取可见尺寸"></a>获取可见尺寸</h4><p>获取 HTML 页面标签的可见宽度和高度的属性如下：</p>
<ul>
<li>可见宽度：<code>clientWidth</code></li>
<li>可见高度：<code>clientHeight</code></li>
</ul>
<p>例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid black;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">11px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">12px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="built_in">console</span>.log( box.clientWidth );      <span class="comment">// 122</span></div><div class="line"><span class="built_in">console</span>.log( box.clientHeight );     <span class="comment">// 122</span></div></pre></td></tr></table></figure>
<p>说明：</p>
<p>可见宽度的值实际上是标签的宽度，再加上内边距的宽度的值。我们可以总结出如下公式:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clientWidth = width + padding-left + padding-right</div></pre></td></tr></table></figure>
<h4 id="获取实际尺寸"><a href="#获取实际尺寸" class="headerlink" title="获取实际尺寸"></a>获取实际尺寸</h4><p>获取 HTML 页面标签的实际宽度和高度的属性如下:</p>
<ul>
<li>宽度: <code>offsetWidth</code></li>
<li>高度: <code>offsetHeight</code></li>
</ul>
<p>例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid black;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">11px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">12px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="built_in">console</span>.log( box.offsetWidth );       <span class="comment">// 142</span></div><div class="line"><span class="built_in">console</span>.log( box.offsetHeight );      <span class="comment">// 142</span></div></pre></td></tr></table></figure>
<p>说明：</p>
<p>可见宽度的值实际上是标签的宽度，再加上内边距的宽度的值。我们可以总结出如下公式:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">offsetWidth = width + padding-left + padding-right + border-width</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DOM 访问或操作 HTML 页面内容主要是依靠 DOM 节点树这个模型。但在 DOM 中的三个主要对象，除了 Document 和 Node 之外，还有一个就是 Element 对象。&lt;/p&gt;
&lt;p&gt;Element 对象描述了所有相同种类的元素所普遍具有的方法和属性，也是访问和操作 HTML 页面内容的主要途径之一。&lt;/p&gt;
    
    </summary>
    
      <category term="DOM" scheme="http://yoursite.com/categories/DOM/"/>
    
    
      <category term="dom" scheme="http://yoursite.com/tags/dom/"/>
    
      <category term="element" scheme="http://yoursite.com/tags/element/"/>
    
  </entry>
  
  <entry>
    <title>DOM - Node 对象</title>
    <link href="http://yoursite.com/2017/08/19/node/"/>
    <id>http://yoursite.com/2017/08/19/node/</id>
    <published>2017-08-19T06:37:40.000Z</published>
    <updated>2017-08-31T08:40:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Node 对象，也就是 DOM 中的节点对象。关于节点对象的名称、值和类型等等知识点，我们在前面<a href="https://runjaelyn.github.io/2017/07/18/dom/" target="_blank" rel="external">《DOM 文档对象模型》</a>中已经讲过了。</p>
<p>所以这篇文章主要是汇总讲一些操作 DOM 节点的方法。</p>
<a id="more"></a>
<h2 id="遍历节点"><a href="#遍历节点" class="headerlink" title="遍历节点"></a>遍历节点</h2><h3 id="获取父节点"><a href="#获取父节点" class="headerlink" title="获取父节点"></a>获取父节点</h3><p>通过 HTML 页面的指定标签查找其父节点。</p>
<p><strong><code>parentNode</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">子节点.parentNode</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sonNode = <span class="built_in">document</span>.getElementById(<span class="string">"son"</span>);</div><div class="line"><span class="keyword">let</span> fatherNode = sonNode.parentNode;</div><div class="line"><span class="built_in">console</span>.log( fatherNode );      <span class="comment">// &lt;div id="father"&gt;...&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<h3 id="获取子节点"><a href="#获取子节点" class="headerlink" title="获取子节点"></a>获取子节点</h3><p>通过 HTML 页面的指定标签查找其子节点。</p>
<p><strong><code>firstChild</code></strong>：获取指定标签的第一个子节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父节点.firstChild</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fatherNode = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);</div><div class="line"><span class="keyword">var</span> sonNode = fatherNode.firstChild;</div><div class="line"><span class="built_in">console</span>.log( sonNode );      <span class="comment">// #text</span></div></pre></td></tr></table></figure>
<p><strong><code>lastChild</code></strong>：获取指定标签的最后一个子节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父节点.lastChild</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fatherNode = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);</div><div class="line"><span class="keyword">var</span> sonNode = fatherNode.lastChild;</div><div class="line"><span class="built_in">console</span>.log( sonNode );      <span class="comment">// #text</span></div></pre></td></tr></table></figure>
<p><strong><code>childNodes</code></strong>：获取指定标签的所有子节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父节点.childNodes</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fatherNode = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);</div><div class="line"><span class="keyword">var</span> sonNode = fatherNode.childNodes;</div><div class="line"><span class="built_in">console</span>.log( sonNode );      <span class="comment">// [text, div#son1, text, div#son2, text, div#son3, text]</span></div></pre></td></tr></table></figure>
<p>注意：以上三种方法获取出来的子节点都包含了<code>#text</code>。我们通过前面讲的节点类型可以知道，<code>#text</code>表示的是文本节点。也就是说，换行符或者空格符都属于文本节点。</p>
<p>想要只获取到元素节点，那么其中一个解决办法就是写 html 代码时不要换行和空格：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fatherNode = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);</div><div class="line"><span class="keyword">var</span> sonNode = fatherNode.childNodes;</div><div class="line"><span class="built_in">console</span>.log( sonNode );       <span class="comment">// [div#son1, div#son2, div#son3]</span></div></pre></td></tr></table></figure>
<p>但是这种方法对于我们来说并不适用，规范的代码格式才更有利于我们后期对代码的维护和修改。所以后面在<a href="https://runjaelyn.github.io/2017/08/19/element/" target="_blank" rel="external">《DOM - Element 对象》</a>中我们还有其他解决办法。</p>
<h3 id="获取兄弟节点"><a href="#获取兄弟节点" class="headerlink" title="获取兄弟节点"></a>获取兄弟节点</h3><p>通过 HTML 页面的指定标签查找兄弟节点。</p>
<p><strong><code>previousSibling</code></strong>：获取指定节点的前一个兄弟节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">兄弟节点.previousSibling</div></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> brother2Node = <span class="built_in">document</span>.getElementById(<span class="string">"brother2"</span>);</div><div class="line"><span class="keyword">var</span> brotherNode = brother2Node.previousSibling;</div><div class="line"><span class="built_in">console</span>.log( brotherNode );                     <span class="comment">// #text</span></div><div class="line"><span class="built_in">console</span>.log( brotherNode.previousSibling );     <span class="comment">// &lt;div id="brother1"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong><code>nextSibling</code></strong>：获取指定节点的后一个兄弟节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">兄弟节点.nextSibling</div></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> brother2Node = <span class="built_in">document</span>.getElementById(<span class="string">"brother2"</span>);</div><div class="line"><span class="keyword">var</span> brotherNode = brother2Node.nextSibling;</div><div class="line"><span class="built_in">console</span>.log( brotherNode );                 <span class="comment">// #text</span></div><div class="line"><span class="built_in">console</span>.log( brotherNode.nextSibling );     <span class="comment">// &lt;div id="brother3"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<h2 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h2><p>要将一个节点插入到页面中的某个位置，我们可以通过如下方法实现：</p>
<p><strong><code>appendChild()</code></strong>：将一个节点作为最后一个子元素添加到指定父节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父节点.appendChild( 子节点 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> divNode = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line"><span class="built_in">document</span>.body.appendChild( divNode );</div></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fib8vmtmywj30um0du75x.jpg" alt=""></p>
<p>从上面结果可以看到，新创建的<code>&lt;div&gt;</code>元素作为<code>&lt;body&gt;</code>的最后一个子元素插入到了页面上。</p>
<p><strong><code>insertBefore()</code></strong>：在父节点的某个已有的子节点之前再插入一个子节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父节点.insertBefore( 新子节点, 旧子节点 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> divNode = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);     <span class="comment">// 创建 div </span></div><div class="line"><span class="built_in">document</span>.body.appendChild( divNode );            <span class="comment">// 将其插入到 body 的末尾</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> aNode = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);         <span class="comment">// 创建 a </span></div><div class="line"><span class="built_in">document</span>.body.insertBefore( aNode, divNode );    <span class="comment">// 将其插入到 div 之前</span></div></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fib9k9484uj317s0o2tch.jpg" alt=""></p>
<p>从上面结果可以看到，新创建的<code>&lt;a&gt;</code>标签作为<code>&lt;body&gt;</code>的子元素插入到了前面新建的<code>&lt;div&gt;</code>之前。</p>
<h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p>从 HTML 页面中删除指定元素节点（标签）。</p>
<p><strong><code>removeChild()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父节点.removeChild( 子节点 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> father = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);     <span class="comment">// 获取父节点</span></div><div class="line"><span class="keyword">var</span> son = <span class="built_in">document</span>.getElementById(<span class="string">"son"</span>);           <span class="comment">// 获取子节点</span></div><div class="line">father.removeChild( son );                          <span class="comment">// 删除子节点</span></div></pre></td></tr></table></figure>
<h2 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h2><p>将 HTML 页面中指定元素节点（标签）替换掉。</p>
<p><strong><code>replaceChild()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父节点.replaceChild( 新子节点, 旧子节点 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> father = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);    <span class="comment">// 获取父节点</span></div><div class="line"><span class="keyword">var</span> son = <span class="built_in">document</span>.getElementById(<span class="string">"son"</span>);          <span class="comment">// 获取已有子节点</span></div><div class="line"><span class="keyword">var</span> newChild = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);        <span class="comment">// 创建新节点</span></div><div class="line">father.replaceChild( newChild, son );              <span class="comment">// 新节点替换已有旧子节点</span></div></pre></td></tr></table></figure>
<h2 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h2><p>将 HTML 页面中指定元素节点（标签）进行复制。</p>
<p><strong><code>cloneNode()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">选中节点.cloneNode( 布尔值 )</div></pre></td></tr></table></figure>
<p>说明：<code>cloneNode()</code>方法的参数<code>boolean</code>表示是否采用深度克隆。如果为<code>true</code>，则该节点的所有后代节点也都会被克隆；如果为<code>false</code>，则只克隆该节点本身。</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> father = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);    <span class="comment">// 获取节点</span></div><div class="line"><span class="keyword">var</span> newFather = father.cloneNode( <span class="literal">true</span> );          <span class="comment">// 复制已获取节点</span></div><div class="line"><span class="built_in">document</span>.body.appendChild( newFather );            <span class="comment">// 将复制好的新节点添加到 body 中</span></div></pre></td></tr></table></figure>
<h2 id="操作文本节点"><a href="#操作文本节点" class="headerlink" title="操作文本节点"></a>操作文本节点</h2><p><strong><code>nodeValue</code></strong></p>
<p>通过学习 DOM 查询我们知道，获取或更新文本就是对文本节点的操作。文本节点的 nodeValue 属性可以得到文本内容，也可以设置文本内容。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">文本节点.nodeValue</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span>&gt;</span> 我是一个 <span class="tag">&lt;<span class="name">i</span>&gt;</span>i标签<span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);<span class="comment">// 获取 &lt;a&gt; 标签</span></div><div class="line"><span class="keyword">let</span> aVal = aEle.firstChild.nodeValue;      <span class="comment">// 先获取 &lt;a&gt; 标签的文本节点，再获取文本节点中的文本内容</span></div><div class="line"><span class="built_in">console</span>.log( aVal );                       <span class="comment">// "我是一个"</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node 对象，也就是 DOM 中的节点对象。关于节点对象的名称、值和类型等等知识点，我们在前面&lt;a href=&quot;https://runjaelyn.github.io/2017/07/18/dom/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《DOM 文档对象模型》&lt;/a&gt;中已经讲过了。&lt;/p&gt;
&lt;p&gt;所以这篇文章主要是汇总讲一些操作 DOM 节点的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="DOM" scheme="http://yoursite.com/categories/DOM/"/>
    
    
      <category term="dom" scheme="http://yoursite.com/tags/dom/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
</feed>
