<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Komorebi</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-09T05:29:08.423Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>有猫饼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 的数据类型</title>
    <link href="http://yoursite.com/2018/01/12/dataType/"/>
    <id>http://yoursite.com/2018/01/12/dataType/</id>
    <published>2018-01-12T02:00:00.000Z</published>
    <updated>2018-08-09T05:29:08.423Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://runjaelyn.github.io/2018/01/10/variable/" target="_blank" rel="external">《JavaScript 的变量和常量》</a>一章中我们知道，开发者为了能够更方便的操作数据，会将数据进行命名保存。但是，仅仅是对每一条数据进行命名保存是不够的。因为在开发过程中，往往会涉及到大量的数据，任何东西一旦数量多了之后就会变得难以管理。所以，除了对数据进行命名保存外，开发者们还对所有的数据都进行了分类，让程序中用到的任何一条数据都是属于某一类数据类型的。</p>
<a id="more"></a>
<h2 id="数据类型的分类"><a href="#数据类型的分类" class="headerlink" title="数据类型的分类"></a>数据类型的分类</h2><p>截止到 ES6 为止，JavaScript 将所有的数据划分为了 7 种不同的数据类型。其中 6 种属于简单数据类型，1 种属于复杂数据类型。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>number</td>
<td>数值</td>
</tr>
<tr>
<td>string</td>
<td>字符串</td>
</tr>
<tr>
<td>boolean</td>
<td>布尔值</td>
</tr>
<tr>
<td>undefined</td>
<td>未定义</td>
</tr>
<tr>
<td>null</td>
<td>空值</td>
</tr>
<tr>
<td>symbol</td>
<td>唯一值</td>
</tr>
<tr>
<td>object</td>
<td>对象</td>
</tr>
</tbody>
</table>
<h2 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h2><p>简单数据类型也称之为“基础数据类型“、”原始数据类型”。</p>
<h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><p>number 类型即“数值类型”。我们数学中用到的所有数字都属于 number 类型。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">100</span>;   <span class="comment">// 整数</span></div><div class="line"><span class="number">0.1</span>;   <span class="comment">// 小数</span></div><div class="line"><span class="number">-50</span>;   <span class="comment">// 负数</span></div></pre></td></tr></table></figure>
<p>JavaScript 的 number 类型中除了数学中的数字外，还有一个特殊值 —— <code>NaN</code>。</p>
<p><code>NaN</code>（Not a Number），表示“非数字”。它的特殊之处不仅仅在于“非数字”属于数值类型，<code>NaN</code>还有两个特点：</p>
<ol>
<li>任何跟<code>NaN</code>有关的操作，得到的结果都是<code>NaN</code>。</li>
<li><code>NaN</code>跟任何数据都不相等，包括<code>NaN</code>自己。</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> - <span class="number">10</span>);     <span class="comment">// NaN</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>);   <span class="comment">// false（JavaScript 中判断两个值是否相等用“==”，后面会详讲）</span></div></pre></td></tr></table></figure>
<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>string 类型即“字符串类型”。任何数据只要被引号包起来，那么就属于 string 类型。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">"hello"</span>;</div><div class="line"><span class="string">'123'</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p> 注意：在 JavaScript 中单双引号没有区别。但是同类型引号不能互相包含。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 错误语法</span></div><div class="line"><span class="string">"hello, "</span>JavaScript<span class="string">""</span>;</div><div class="line"><span class="comment">// 正确语法</span></div><div class="line"><span class="string">"hello, my name is 'HanMeiMei'"</span>;</div><div class="line"><span class="string">'this is an "apple"'</span>;</div></pre></td></tr></table></figure>
<h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><p>除了常见的单双引号外，ES6 中还新增了一种字符串的表现形式，叫做“模板字符串”。符号为 ``（与波浪号同一按键）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">`hello JavaScript`</span>;</div></pre></td></tr></table></figure>
<p>模板字符串与普通字符串的区别：</p>
<ol>
<li><p>模板字符串内部支持回车换行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 错误语法（普通字符串内部不支持回车换行）</div><div class="line">let str1 = "how are you?</div><div class="line">		   I'm fine, thank you.";</div><div class="line">// 正确语法</div><div class="line">let str2 = `how are you?</div><div class="line">		   I'm fine, thank you.`;</div></pre></td></tr></table></figure>
</li>
<li><p>可以解析模板字符串内部代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name = <span class="string">"韩梅梅"</span>;</div><div class="line"><span class="keyword">let</span> str1 = <span class="string">"hello, name"</span>;     <span class="comment">// hello, name</span></div><div class="line"><span class="comment">// 在模板字符串中，将需要解析的代码用 $&#123;&#125; 包起来</span></div><div class="line"><span class="keyword">let</span> str2 = <span class="string">`hello, <span class="subst">$&#123;name&#125;</span>`</span>;  <span class="comment">// hello, 韩梅梅</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><p>boolean 类型即“布尔值类型”。这个类型中只有两条数据：<code>true</code>和<code>false</code>，分别表示“真”和“假”。</p>
<h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><p>undefined 类型即“未定义类型”。这个类型中只有一条数据：<code>undefined</code>。</p>
<p><code>undefined</code>这个值一般用于表示”没有数据”。当没有数据而程序又在访问数据时，就会得到<code>undefined</code>这个值。</p>
<p>可以简单的理解为：“有容器，没数据”。即当容器创建好，但容器中并没有保存数据时，这个时候就默认容器中的数据值为<code>undefined</code> 。内存会为<code>undefined</code>分配储存空间。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> num;</div><div class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p>null 类型即“空值类型”。这个类型中也只有一条数据：<code>null</code>。</p>
<p><code>null</code>这个值用于表示”没有/空”，一般用于释放内存。当一个容器的数据值被设置为<code>null</code>后，内存中就不再为该数据分配储存空间。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> num = <span class="number">1000</span>;</div><div class="line">num = <span class="literal">null</span>;</div></pre></td></tr></table></figure>
<h3 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h3><p>symbol 类型即唯一值类型。这个类型是 ES6 中新增的一种数据类型，用来表示唯一的值。即在这个类型下的所有数据都是不相等的。</p>
<h2 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h2><p>复杂数据类型也称之为“引用数据类型”。JavaScript 中的复杂数据类型只有一种：object。</p>
<h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>object 类型即对象类型。在 JavaScript 中，只要是不属于 6 种简单类型的数据，都可以看做属于复杂类型。</p>
<p>例如后面我们会讲到的<code>Array</code>、<code>Set</code>、<code>Map</code>等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://runjaelyn.github.io/2018/01/10/variable/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《JavaScript 的变量和常量》&lt;/a&gt;一章中我们知道，开发者为了能够更方便的操作数据，会将数据进行命名保存。但是，仅仅是对每一条数据进行命名保存是不够的。因为在开发过程中，往往会涉及到大量的数据，任何东西一旦数量多了之后就会变得难以管理。所以，除了对数据进行命名保存外，开发者们还对所有的数据都进行了分类，让程序中用到的任何一条数据都是属于某一类数据类型的。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript 基础语法" scheme="http://yoursite.com/categories/JavaScript-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="简单数据类型" scheme="http://yoursite.com/tags/%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="复杂数据类型" scheme="http://yoursite.com/tags/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 的变量和常量</title>
    <link href="http://yoursite.com/2018/01/10/variable/"/>
    <id>http://yoursite.com/2018/01/10/variable/</id>
    <published>2018-01-10T02:00:00.000Z</published>
    <updated>2018-08-07T06:11:09.750Z</updated>
    
    <content type="html"><![CDATA[<p>任何程序的运行的都离不开数据。同理，任何程序的开发也离不开数据。不管是日常的代码练习还是实际的项目开发，都会涉及到数据的操作（例如：数据的增删改查）。为了能够更方便的去操作数据，开发者们对数据进行了命名保存，即把需要操作的数据保存在一个有名字的容器中。</p>
<p>在 JavaScript 中，变量和常量就可以看做是“有名字的保存数据的容器”。</p>
<a id="more"></a>
<h2 id="变量的声明"><a href="#变量的声明" class="headerlink" title="变量的声明"></a>变量的声明</h2><p>想要保存数据，首先需要将容器创建出来。我们将创建容器的过程称之为“变量的声明”。</p>
<p>变量的声明方式总共分为两种：</p>
<ol>
<li><code>var</code>：ES6 出来之前最常用的声明变量的方式。</li>
<li><code>let</code>：ES6 中新增的声明变量的方式。</li>
</ol>
<p>两种声明方式的语法结构如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> 变量名;</div><div class="line"><span class="keyword">let</span> 变量名;</div></pre></td></tr></table></figure>
<p>例如，我们要通过<code>var</code>声明一个名字叫做<code>num</code>的变量，代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num;</div></pre></td></tr></table></figure>
<p>同理，如果我们要通过<code>let</code>声明一个名字叫做<code>username</code>的变量，代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> username;</div></pre></td></tr></table></figure>
<h2 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h2><p>容器创建好之后，就可以将数据保存到容器里了。我们把数据保存进容器的过程称之为“变量的赋值”。</p>
<p><code>var</code>和<code>let</code>的赋值方式一样，语法结构如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">变量名 = 数据;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：JavaScript 中的<code>=</code>和数学中的<code>=</code>含义并不相同。在 JavaScript 中，<code>=</code>叫做赋值符，表示将<code>=</code>右边的数据赋值给<code>=</code>左边的变量。</p>
</blockquote>
<p>例如：我们要将数字<code>100</code>赋值给变量<code>num</code>。代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num;</div><div class="line">num = <span class="number">100</span>;</div></pre></td></tr></table></figure>
<p>又例如：我们要将姓名<code>John</code>赋值给变量<code>name</code>。代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> username;</div><div class="line">username = <span class="string">'John'</span>;</div></pre></td></tr></table></figure>
<p>同一个变量可以进行多次赋值，后面赋值的数据会将前面赋值的数据覆盖掉，以此来实现变量值的修改。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> username;</div><div class="line">username = <span class="string">'John'</span>;   <span class="comment">// 第一次赋值</span></div><div class="line">username = <span class="string">'Lucy'</span>;   <span class="comment">// 第二次赋值</span></div></pre></td></tr></table></figure>
<p>上面代码中，变量<code>username</code>最终保存的数据为<code>Lucy</code>。</p>
<h2 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h2><p>我们可以先创建容器，再保存数据。也可以在创建容器的同时就将数据保存进去。即声明变量的同时就对变量进行赋值，我们将这个声明和赋值同时进行的过程称之为“变量的初始化”。</p>
<p>我们将上面两个例子改写成变量初始化的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</div><div class="line"><span class="keyword">let</span> username = <span class="string">'John'</span>;</div></pre></td></tr></table></figure>
<h2 id="常量的初始化"><a href="#常量的初始化" class="headerlink" title="常量的初始化"></a>常量的初始化</h2><p>保存数据的容器除了变量之外还有常量。在 ES6 出来之前，并没有专门声明常量的方式。ES6 中才新增了关键字<code>const</code>用来声明常量。</p>
<p>常量的使用要求在声明的同时必须赋值，否则程序会报错。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 错误语法</span></div><div class="line"><span class="keyword">const</span> num;</div><div class="line">num = <span class="number">10</span>;</div><div class="line"><span class="comment">// 正确语法</span></div><div class="line"><span class="keyword">const</span> num = <span class="number">10</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p> 注意：常量一旦被初始化，值就不能被改变。常量的使用只能进行读取操作。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> num = <span class="number">10</span>;</div><div class="line">num = <span class="number">20</span>;   <span class="comment">// 报错，常量不允许修改</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;任何程序的运行的都离不开数据。同理，任何程序的开发也离不开数据。不管是日常的代码练习还是实际的项目开发，都会涉及到数据的操作（例如：数据的增删改查）。为了能够更方便的去操作数据，开发者们对数据进行了命名保存，即把需要操作的数据保存在一个有名字的容器中。&lt;/p&gt;
&lt;p&gt;在 JavaScript 中，变量和常量就可以看做是“有名字的保存数据的容器”。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript 基础语法" scheme="http://yoursite.com/categories/JavaScript-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="let" scheme="http://yoursite.com/tags/let/"/>
    
      <category term="var" scheme="http://yoursite.com/tags/var/"/>
    
      <category term="const" scheme="http://yoursite.com/tags/const/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 内存空间</title>
    <link href="http://yoursite.com/2017/12/30/memory/"/>
    <id>http://yoursite.com/2017/12/30/memory/</id>
    <published>2017-12-30T04:30:10.000Z</published>
    <updated>2018-08-09T09:18:25.619Z</updated>
    
    <content type="html"><![CDATA[<p>程序的运行需要内存。只要程序提出要求，操作系统或者运行时（runtime）就必须供给内存。</p>
<p>但是对于前端开发来说，内存并不是一个经常被提及的概念，很容易被大家忽视。可如果想要对 JavaScript 的理解更加深刻，就必须对内存有一个清晰的认知。</p>
<a id="more"></a>
<h2 id="内存生命周期"><a href="#内存生命周期" class="headerlink" title="内存生命周期"></a>内存生命周期</h2><p>在 JavaScript 中内存的生命周期分为三个阶段：</p>
<ol>
<li>分配你所需要的内存</li>
<li>使用（读/写）分配到的内存 </li>
<li>不需要时将内存释放、归还</li>
</ol>
<p>为了便于理解，我们使用一个简单的例子来解释这个周期。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">20</span>;               <span class="comment">// 第一阶段：分配变量 a 所需要的空间</span></div><div class="line"><span class="built_in">console</span>.log(a + <span class="number">100</span>);     <span class="comment">// 第二阶段：使用分配到的内存空间</span></div><div class="line">a = <span class="literal">null</span>;                 <span class="comment">// 第三阶段：使用完毕之后，释放内存空间</span></div></pre></td></tr></table></figure>
<p>前两步我们都很好理解，JavaScript 在定义变量的时候就完成了内存分配。第三步释放内存空间则是我们需要重点理解的一个点。</p>
<h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><p>对于持续运行的服务进程（daemon），必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。</p>
<p>不再用到的内存，没有及时释放，就叫做“内存泄漏”（memory leak）。</p>
<h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>有些代码语言（比如 C 语言）必须手动释放内存，程序员负责内存管理。这样的话，对于程序员来说，其实是非常麻烦的。所以大多数代码语言（比如 JavaScript 和 C#，Java 等）都提供自动内存管理，以此来减轻程序员的负担。</p>
<p>这种自动内存管理的操作，我们称之为“垃圾回收机制”（garbage collector）。</p>
<blockquote>
<p>原理：垃圾收集器会定期（周期性）找出那些不再继续使用的数据，然后释放其所占内存。</p>
</blockquote>
<p>最常见的回收方式分为两种：标记清除和引入计数。</p>
<h2 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h2><p>堆（heap）和栈（stack）是程序运行时内存中分配出来的数据区，用于保存程序运行过程中用到的所有数据。</p>
<h3 id="基础数据类型与栈"><a href="#基础数据类型与栈" class="headerlink" title="基础数据类型与栈"></a>基础数据类型与栈</h3><p>JavaScript 有六种基础数据类型：<code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>number</code>、<code>string</code>、<code>symbol</code>（ES6）。</p>
<p>JavaScript 中的基础数据类型，都是一些简单的数据段，这些值都有固定的大小，往往保存在栈内存中，由系统自动分配存储空间，我们可以直接操作保存在栈内存空间的值.</p>
<blockquote>
<p>结论：基础数据类型都是通过数据值进行访问。</p>
</blockquote>
<h3 id="引用数据类型与堆"><a href="#引用数据类型与堆" class="headerlink" title="引用数据类型与堆"></a>引用数据类型与堆</h3><p>JavaScript 中的引用数据类型，比如数组<code>Array</code>，他们值的大小是不固定的。所以<strong>引用数据类型的值保存在堆内存中</strong>。</p>
<p>但是 JavaScript 不允许直接操作堆内存空间里保存的数据。所以引用类型的数据除了将实际的值保存在堆空间中以外，还需要在栈空间中保存了当前数据的引用（这里的引用，我们可以粗浅地理解为数据在堆空间中的地址）。那么操作引用类型的数据时，实际上是先通过栈空间中的<strong>引用</strong>去找到堆空间中的数据然后才进行操作。</p>
<blockquote>
<p>结论：引用类型的值都是通过数据引用（地址）进行访问。</p>
</blockquote>
<h2 id="数据存取方式"><a href="#数据存取方式" class="headerlink" title="数据存取方式"></a>数据存取方式</h2><p>数据在堆内存和栈内存中的存取方式是不一样的。</p>
<h3 id="栈的数据存取"><a href="#栈的数据存取" class="headerlink" title="栈的数据存取"></a>栈的数据存取</h3><p>栈（stack）是系统自动分配的内存空间。它对数据的存取原则为“<strong>先进后出，后进先出</strong>”。</p>
<p>我们可以通过类比乒乓球盒子来分析。如下图左侧：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fhkn1bcdozj31360p2tc1.jpg" alt=""></p>
<p>这种乒乓球的存放方式与栈中存取数据的方式如出一辙。</p>
<p>处于盒子中最顶层的乒乓球E，它一定是最后被放进去的，但可以最先被使用。而我们如果想要使用底层的乒乓球A，就必须将上面的4个乒乓球都取出来，让乒乓球A处于盒子开口处，这样才能拿到乒乓球A。</p>
<p>栈内存空间中的数据也一样，处于栈底部的数据<code>1</code>一定是最先保存的，处于栈顶部的数据<code>true</code>一定是最后保存的。我们只能操作处于栈顶部的数据，当垃圾回收机制要开始销毁栈内存中无用的数据时，也只能从栈顶部开始销毁。</p>
<h3 id="堆的数据存取"><a href="#堆的数据存取" class="headerlink" title="堆的数据存取"></a>堆的数据存取</h3><p>堆（heap）是在程序运行时动态分配的内存空间。堆存取数据的方式，则与书架和书非常相似。</p>
<p>对于存放在书架上的书来说，我们并不需要记住每一本放进书架的先后顺序。我们只要知道书的名字，就可以很方便的取出我们想要的书，而不用像从乒乓球盒子里取乒乓球一样，非得将上面的所有乒乓球都拿出来才能取到下面的某一个乒乓球。</p>
<p>而堆存取数据，也就是这个特点，我们只需要知道堆中每一条数据的引用（地址），就可以通过引用（地址）找到对应的数据，而不用去关心数据存进堆中的先后顺序。</p>
<h2 id="图解举例"><a href="#图解举例" class="headerlink" title="图解举例"></a>图解举例</h2><p>为了更好的搞懂栈内存与堆内存，我们可以结合以下例子与图解进行理解。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">0</span>;   <span class="comment">// 栈</span></div><div class="line"><span class="keyword">var</span> b = <span class="string">"hello world"</span>;   <span class="comment">// 栈</span></div><div class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;   <span class="comment">// 栈</span></div><div class="line">	</div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">m</span>: <span class="number">20</span> &#125;;   <span class="comment">// 变量 obj 存在于栈中，&#123; m: 20 &#125; 作为对象存在于堆内存中</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];   <span class="comment">// 变量 arr 存在于栈中，[1, 2, 3] 作为对象存在于堆内存中</span></div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhknbpz837j30za0j0q56.jpg" alt=""></p>
<blockquote>
<p>因此，当我们要访问堆内存中的引用数据类型（如对象，数组，函数等）时，实际上我们首先是从栈中获取该对象的地址引用（或者地址指针），然后再通过这个地址从堆内存中取得我们需要的数据。</p>
</blockquote>
<h2 id="引用类型的特点"><a href="#引用类型的特点" class="headerlink" title="引用类型的特点"></a>引用类型的特点</h2><p>大致了解了 JavaScript 的内存空间，我们就可以借助内存空间的特性来验证一下引用类型的特点了。</p>
<p>例一：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> b = a;  <span class="comment">// 将 a 的数据复制给 b</span></div><div class="line">b = <span class="number">30</span>;</div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fhknn2es7ej311m0iydhx.jpg" alt=""></p>
<p>在栈内存中的数据发生复制行为时，系统会自动为新的变量分配一个新值。<code>var b = a</code> 执行之后，<code>a</code> 和 <code>b</code> 的值虽然都等于 20，但是他们其实已经是相互独立互不影响的值了。所以，我们修改了 <code>b</code> 的值以后，<code>a</code> 的值并不会发生变化。</p>
<p>例二：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person1 = &#123; <span class="attr">name</span>: <span class="string">"zhangsan"</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</div><div class="line"><span class="keyword">var</span> person2 = person1;  <span class="comment">// 将 person1 的值复制给 person2</span></div><div class="line">person2.name = <span class="string">"lisi"</span>;</div><div class="line"><span class="built_in">console</span>.log(person1.name);</div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhkt5ff5syj30xe10etcp.jpg" alt=""></p>
<p>当我们通过 <code>var person2 = person1</code> 执行一次复制引用类型的操作时，引用类型的复制也会为新的变量分配一个新的值保存在栈内存中。但不同的是，这个新的值，仅仅只是引用类型的一个地址指针。当地址指针相同时，尽管他们相互独立，但是这两个地址指针指向的都是堆内存中的同一个地方，所以在堆内存中访问到的具体对象实际上是同一个。</p>
<p>因此，当我们改变 <code>person2</code> 的时候，就是在改变堆内存中 <code>person2</code> 指向的这个对象。而同时，<code>person1</code> 指向的也是这个对象，所以 <code>person1</code> 也会跟着发生变化。这就是引用类型的特性。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们通过一个表格对栈内存和堆内存做一个总结：</p>
<table>
<thead>
<tr>
<th>栈内存</th>
<th>堆内存</th>
</tr>
</thead>
<tbody>
<tr>
<td>保存基本数据类型</td>
<td>保存引用数据类型</td>
</tr>
<tr>
<td>通过值访问</td>
<td>通过地址访问</td>
</tr>
<tr>
<td>保存的值大小固定</td>
<td>保存的值大小不定，可动态调整</td>
</tr>
<tr>
<td>由系统自动分配内存</td>
<td>由程序员通过代码分配内存</td>
</tr>
<tr>
<td>主要用来执行程序</td>
<td>主要用来存放对象</td>
</tr>
<tr>
<td>空间小，运行效率高</td>
<td>空间大，运行效率较低</td>
</tr>
<tr>
<td>存取顺序为先进后出</td>
<td>无序存储，根据引用（地址）直接获取</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序的运行需要内存。只要程序提出要求，操作系统或者运行时（runtime）就必须供给内存。&lt;/p&gt;
&lt;p&gt;但是对于前端开发来说，内存并不是一个经常被提及的概念，很容易被大家忽视。可如果想要对 JavaScript 的理解更加深刻，就必须对内存有一个清晰的认知。&lt;/p&gt;
    
    </summary>
    
    
      <category term="内存" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98/"/>
    
      <category term="垃圾回收机制" scheme="http://yoursite.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    
      <category term="堆" scheme="http://yoursite.com/tags/%E5%A0%86/"/>
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>浏览器发展史</title>
    <link href="http://yoursite.com/2017/12/19/browserHistory/"/>
    <id>http://yoursite.com/2017/12/19/browserHistory/</id>
    <published>2017-12-19T02:31:00.000Z</published>
    <updated>2018-07-24T05:23:06.324Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个前端开发人员，经常与浏览器打交道，了解浏览器的一些相关历史也非常有必要的。</p>
<a id="more"></a>
<h2 id="导航者浏览器的诞生"><a href="#导航者浏览器的诞生" class="headerlink" title="导航者浏览器的诞生"></a>导航者浏览器的诞生</h2><p>最早一代的浏览器是什么其实没有人关心，毕竟在历史的长河中没有大作为的都是不重要的。而真正重要的一代浏览器，是网景公司（Netscape Corporation）在 1994 年底发布的 —— （Navigator）导航者浏览器（台湾译为领航员浏览器）1.0 版。</p>
<p>网景的创始人马克·安德森（Marc Andreessen）最早在伊利诺伊大学主修计算机专业，并在学校的国家超级计算机应用中心兼职。在那里，他与其他几位同伴共同开发了一款浏览器（就是后来网景导航者浏览器的原型），一上线就大受网民的欢迎。于是，马克·安德森决定在硅谷创业，开发浏览器。只经过了不到一年的时间，在 1994 年的年底，网景导航者浏览器从一发布就已经占领了浏览器市场占有率的首位。</p>
<p>因此在 1995 年，网景公司凭借着导航者浏览器成为了 Web 时代开启时最著名的第一代互联网公司。而他们公司就只做一款产品，就是浏览器。</p>
<h2 id="IE-浏览器的诞生"><a href="#IE-浏览器的诞生" class="headerlink" title="IE 浏览器的诞生"></a>IE 浏览器的诞生</h2><p>网景导航者浏览器的成功，让微软公司意识到了危机。所以微软为了应对网景的日益强大，直接购买了网景导航者浏览器原型版本的源代码（也就是马克·安德森在大学时期做的第一个版本的浏览器）。然后，稍作修改后就发布了。</p>
<p>因此，1995 年 8 月 16 日，微软推出了 IE 1.0 浏览器。同年 11 月发布了其第二个版本 IE 2.0。但是 IE 的这两个版本都几乎没有人使用，因为做的很烂。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fml1ndc6n6j305k05k3ye.jpg" alt=""></p>
<p>不过在 IE3.0 的版本时，这种“极度嫌弃”的情况发生了质的改变。因为从 IE3.0 开始，微软将 IE 浏览器强行内置在了 Windows 的操作系统中。</p>
<p>同时，微软也在商业市场发力，联合大型互联网服务提供商，美国在线、AT&amp;T 等，让他们放弃网景导航者浏览器而改用 IE 作为首选浏览器。盖茨还曾经问过美国在线的高管，“微软需要出多少钱才能让你们放弃网景而改用 IE 作为推荐浏览器？”</p>
<h2 id="第一次浏览器大战"><a href="#第一次浏览器大战" class="headerlink" title="第一次浏览器大战"></a>第一次浏览器大战</h2><p>当微软在暗戳戳的到处下黑手的时候，网景在干什么呢？</p>
<p>在财力上拼不过别人的时候，网景当时就想要通过快速增加自己浏览器的功能来获取更多的安装量。但是，也正是因为大量新功能的增加，浏览器出现了性能不断下降、bug 频频出现、软件卡顿等等一系列问题，导致客户也逐渐失去了对导航者浏览器的信心。</p>
<p>最后，因为网景产品的问题，加上微软的围追堵截，网景的浏览器逐渐失去了市场份额，而 IE 浏览器基本垄断了浏览器的市场。从一开始 8% 的市场占有率上升到了 80% 多的市场占有率，以至于最后把网景公司给挤死了。</p>
<p>浏览器之间的第一次大战，最终以 IE 的胜利作为结束。在 1998 年，网景最后被美国在线（AOL）以 42 亿美元收购。</p>
<h2 id="火狐浏览器的诞生"><a href="#火狐浏览器的诞生" class="headerlink" title="火狐浏览器的诞生"></a>火狐浏览器的诞生</h2><p>网景公司难道甘心就这么被干掉吗？肯定不甘心啊，是你要是这么被搞死，你也要死前挣扎一下的吧。因此，网景公司在临死前开始搞事情，他们把公司唯一一款核心产品，也就是网景导航者浏览器的核心源代码开源了！！！开源，也就意味着，浏览器的源代码，你有我有大家都有了。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fmkz98z7xej30ml0ett9y.jpg" alt=""></p>
<p>网景的一批老员工们在网景公司破产后，又一起成立了一个组织，计划重新开发下一代的网景导航者浏览器，这个组织就是 Mozilla.org，叫做 Mozilla。不过不久后，导航者浏览器的源代码就差不多被全部抛弃， Mozilla 组织开发出了在稳定性和功能上更出色的新一代浏览器。这个浏览器就是 Mozilla Application Suite，简称 Mozilla。</p>
<p>2002 年的时候，它们又从 Mozilla 浏览器项目中分支出来的一个实验性的项目，希望能够做出更轻便、快速、简单与高扩充性的浏览器。在 2004 年 2 月 9 日，该浏览器正式命名为”Mozilla Firefox”，并在 2004 年 11 月 9 日发布了 Firefox 的第一个正式版本 Firefox1.0，即火狐浏览器。</p>
<h2 id="IE-浏览器的衰败"><a href="#IE-浏览器的衰败" class="headerlink" title="IE 浏览器的衰败"></a>IE 浏览器的衰败</h2><p>Mozilla 组织在积极研发火狐浏览器的时候，微软这个时候在干啥呢？</p>
<p>微软继 IE3.0 之后又相继推出了后续版本，而 IE6.0 让 IE 浏览器到达了巅峰状态。IE6 成功后，微软认为它们的浏览器技术已经绝对领先了，于是…..解散了技术团队。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fml0idx47tj308c07gwf9.jpg" alt=""></p>
<p>因此在 21 世纪初，Mozilla Firefox 重创 IE6.0，IE6.0 的地位变得岌岌可危。而 Firefox 在 2009 年迎来了顶峰，市占率接近 30%。</p>
<h2 id="谷歌浏览器的诞生"><a href="#谷歌浏览器的诞生" class="headerlink" title="谷歌浏览器的诞生"></a>谷歌浏览器的诞生</h2><p>在 Firefox 浏览器最辉煌的时候，迎来了让它逐步没落的对手 —— 2008 年 9 月 2 日，Google 发布了第一个 beta 版本的 Chrome 浏览器。</p>
<p>事实上，就在多年以前，Google 和 Mozilla 达成一项合作协议，双方在浏览器技术方面合作，同时 Mozilla 浏览器的搜索引擎默认为 Google，为此，Google 需每年向 Mozilla 支付1亿美元，但是没想到哇！养虎为患哇！¥#%&amp;@*… … Google 在 Mozilla 技术上融会贯通，构建了自己的 V8 引擎。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fmkzv6kfvgj30b408cmx6.jpg" alt=""></p>
<p>从 Chrome 出现的那一天开始，消费者们就发现替代 IE 最好浏览器是 Chrome，因此 Firefox 也开始失宠了。</p>
<h2 id="第二次浏览器大战"><a href="#第二次浏览器大战" class="headerlink" title="第二次浏览器大战"></a>第二次浏览器大战</h2><p>虽然 Chrome 成为了当时最受欢迎的浏览器，但是非常要命的是，继网景将浏览器代码开源后，Chrome 也将浏览器代码开源了。也就是说大家都可以任意的裁剪编译源代码，由此衍生出了庞大的浏览器产业。苹果公司的 safari 浏览器，以小巧著名的 Opera 浏览器等等。一时间各大浏览器厂商都在想法设法的抢占市场占有率。</p>
<p>跟第一次浏览器大战相比，第二次浏览器大战的参赛人员明显更多，那会造成什么后果呢？</p>
<p>后果就是程序员们暴躁了。由于每一款浏览器的语法标准都不一样，也就意味着程序员们如果想要项目在每一款浏览器上都能正常运行，就必须针对不同的浏览器进行不同的开发。这样长久下去…程序员应该就会死绝了。</p>
<p>所以在这一次的浏览器大战中，浏览器厂商们为了不让程序员死绝，大家都逐渐意识到了“标准”的重要性。因为如果几款浏览器都采用统一标准，那么程序员针对这几款浏览器就只需要开发一个版本的项目就可以了。换句话说，也就是谁家的浏览器能更接近标准，谁也就能在市场上获得更高的认可。</p>
<p>所以第二次浏览器大战，成为了浏览器的标准统一之战。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个前端开发人员，经常与浏览器打交道，了解浏览器的一些相关历史也非常有必要的。&lt;/p&gt;
    
    </summary>
    
      <category term="发展史" scheme="http://yoursite.com/categories/%E5%8F%91%E5%B1%95%E5%8F%B2/"/>
    
    
      <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="IE" scheme="http://yoursite.com/tags/IE/"/>
    
  </entry>
  
  <entry>
    <title>搭建 Github 个人博客(四)：配置博客评论功能</title>
    <link href="http://yoursite.com/2017/07/16/commentBlog/"/>
    <id>http://yoursite.com/2017/07/16/commentBlog/</id>
    <published>2017-07-16T07:49:19.000Z</published>
    <updated>2018-07-19T06:49:53.228Z</updated>
    
    <content type="html"><![CDATA[<p>之前写了三篇关于怎么在 Github Pages 上使用 Hexo 搭建个人博客的教程。这两天自己想着给博客加一个评论的功能，上网搜了一下教程，发现网上关于这方面的文章比较少。东拼西凑的看了好几篇文章，终于是把这个功能是弄出来了。</p>
<p>所以，弄好之后干脆就把自己的操作过程整理一下，写一篇关于给博客添加评论系统的教程。</p>
<a id="more"></a>
<h2 id="评论系统选择"><a href="#评论系统选择" class="headerlink" title="评论系统选择"></a>评论系统选择</h2><p>现在很多的技术博客都是程序员们自己搭建的，所以博客本身并不带有评论功能。这时候我们就需要借助第三方的评论系统，来为自己的博客添加评论功能。</p>
<p>上网搜了一下，现在使用人数比较多的几个第三方评论系统：</p>
<ul>
<li><strong>多说</strong>：以前是比较火的，但是在 2017 年 6 月 1 日已经正式关停服务，所以没法再使用了。</li>
<li><strong>畅言</strong>：搜狐旗下产品。但是需要个人博客备案后才能使用（我不会备案，所以放弃）。</li>
<li><strong>友言</strong>：JiaThis 旗下产品。但由于它是 Http 请求，而 Github Pages 现在是 Https 请求，在 Https 站点无法调用 Http 请求，所以也无法使用。</li>
<li><strong>网易云跟帖</strong>：我屁颠颠的去搜，结果告诉我，云跟帖产品将于2017年8月1日停止服务… …然后，没有然后了。</li>
<li><strong>Disqus</strong>：国外的评论系统。火是很火，但是国内被墙了，而且官网全英文。所以我放弃了。</li>
</ul>
<p>我能找到的几个主流的评论系统基本上已经全军覆没了。无意中看到有很多人在推荐 <strong>gitment</strong>，所以就去搜了一下。</p>
<blockquote>
<p>gitment 是国内的大神<a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="external">孙士权</a>基于 GitHub 的 Issues 开发的一款评论系统。</p>
</blockquote>
<p>因此最终我选择了用 gitment 来搭建设置博客的评论功能（其实也没啥选择，只有这个能用）。</p>
<h2 id="申请一个Github-OAuth-Application"><a href="#申请一个Github-OAuth-Application" class="headerlink" title="申请一个Github OAuth Application"></a>申请一个Github OAuth Application</h2><p>使用 gitment 的第一步，就是需要去申请一个 GitHub 的 OAuth Application。</p>
<p>（1）点击个人头像选择 <strong>Settings</strong> 进入设置页面。</p>
<p>（2）选择下图左侧红框选中的选项 <strong>OAuth Apps</strong>。</p>
<p>（3）看到出现下图右侧中的提示，点击绿色按钮 <strong>Register a new application</strong> 注册一个应用程序。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fixisaw6chj31kw19e0zu.jpg" alt=""></p>
<p>（4）按照下图填写相关信息。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fixizjs8nfj31gk130tii.jpg" alt=""></p>
<p>（5）注册成功之后会跳转到一个新页面，在新页面中我们可以得到我们的 <strong>Client ID</strong> 和 <strong>Client Secret</strong>，如下图所示：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fiw2mnzjhlj31ka0s0wja.jpg" alt=""></p>
<p style="color: gray">（我也不知道这两串数字能不能展示出来，所以先糊了再说。）</p>

<p>记住自己的 <strong>Client ID</strong> 和 <strong>Client Secret</strong>，后面需要用到。</p>
<h2 id="在博客中调用-gitment"><a href="#在博客中调用-gitment" class="headerlink" title="在博客中调用 gitment"></a>在博客中调用 gitment</h2><p>上一步中的 <strong>Client ID</strong> 和 <strong>Client Secret</strong> 得到之后，接下来我们需要在自己的博客页面（具体位置看后面解释）中添加如下代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitmentContainer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://imsun.github.io/gitment/style/default.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://imsun.github.io/gitment/dist/gitment.browser.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</div><div class="line">    <span class="attr">owner</span>: <span class="string">'Your GitHub username'</span>,</div><div class="line">    <span class="attr">repo</span>: <span class="string">'The repo to store comments'</span>,</div><div class="line">    <span class="attr">oauth</span>: &#123;</div><div class="line">        <span class="attr">client_id</span>: <span class="string">'Your client ID'</span>,</div><div class="line">        <span class="attr">client_secret</span>: <span class="string">'Your client secret'</span>,</div><div class="line">    &#125;,</div><div class="line">&#125;);</div><div class="line">gitment.render(<span class="string">'gitmentContainer'</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>说明</strong>：以上代码有四个需要修改的地方：</p>
<ol>
<li><code>Your GitHub username</code>：填写你的博客所在的 GitHub 账户名；</li>
<li><code>The repo to store comments</code>：填写存放评论的 GitHub 仓库名（由于 gitment 的评论是通过 issues 来存放的，所以建议这里填写个人博客所在的仓库）。</li>
<li><code>Your client ID</code>：前面所申请到的 Client ID。</li>
<li><code>Your client secret</code>：前面所申请到的 Client Secret。</li>
</ol>
<p>填完之后把代码保存然后执行以下命令上传到 Github 就可以了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<h3 id="调用-gitment-的位置"><a href="#调用-gitment-的位置" class="headerlink" title="调用 gitment 的位置"></a>调用 gitment 的位置</h3><p>上面的那一大段代码，到底添加到什么地方，是我纠结了半天的问题。搜索了很多都没有详细解释这一块内容的，原作者的博客中也只写了下面这一句话。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fj2oa7gadhj314k04q74l.jpg" alt=""></p>
<p>我找了很久这个“你的页面”到底是指的哪个页面。</p>
<p>后来发现，实际上，这段代码的作用就是调用 gitment 并添加评论功能。所以，你博客里哪个页面需要评论功能，就在哪个页面添加这个代码。但是又会有一个新的问题，我们的每一篇博文都需要有评论功能，总不能每发一篇博文都去添加一次。</p>
<p>所以我去翻了一下我的主题文件目录。（我用的是<strong>Even</strong>主题，其他主题应该也差不多）。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fj2u71luagj31kw0j3gvq.jpg" alt=""></p>
<p>我在主题文件里找到一个<code>comments.swig</code>文件，然后将上面的代码按照上图所示位置添加进去。再保存上传以后就成功了。</p>
<h2 id="初始化评论"><a href="#初始化评论" class="headerlink" title="初始化评论"></a>初始化评论</h2><p>由于 gitment 的原理是为每一遍博文以其 URL 作为标识创建一个 GitHub issue，对该篇博客的评论就是对这个 issue 的评论。因此，我们需要为每篇博文初始化一下评论系统，初始化后，你可以在你的 GitHub 上会创建相对应的 issue。</p>
<p>接下来，介绍一下如何初始化评论系统：</p>
<p>（1）上面的代码添加成功并上传后，你就可以在你的博文页下面看到一个评论框。还有一个报错提示，提示该篇博文的评论系统还没初始化。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fixi2dvwwyj31ce0saq5m.jpg" alt=""></p>
<p>（2）点击登录之后，使用自己的 GitHub 账号登录后，就可以在上面错误信息处看到一个 <strong>Initialize Comments</strong> 的按钮。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fixi3pioplj317o0qg406.jpg" alt=""></p>
<p>（3）点击 <strong>Initialize Comments</strong> 按钮后，就可以开始对该篇博文进行评论了，同时也可以在对应的 GitHub 仓库看到相应的 issue。</p>
<h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><p>因为我们在页面填写的 Client ID 和 Client Secret 别人都是可以看到的。虽然我也不知道这两串数字具体有什么用，但是如果这两串数字还有其他作用的话，那么明文显示在页面代码中就会存在安全性问题。但是也没有想到好的解决办法，所以暂时的办法就是创建一个小号，用小号的 Client ID 和 Client Secret。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写了三篇关于怎么在 Github Pages 上使用 Hexo 搭建个人博客的教程。这两天自己想着给博客加一个评论的功能，上网搜了一下教程，发现网上关于这方面的文章比较少。东拼西凑的看了好几篇文章，终于是把这个功能是弄出来了。&lt;/p&gt;
&lt;p&gt;所以，弄好之后干脆就把自己的操作过程整理一下，写一篇关于给博客添加评论系统的教程。&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
      <category term="gitment" scheme="http://yoursite.com/tags/gitment/"/>
    
      <category term="评论" scheme="http://yoursite.com/tags/%E8%AF%84%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>搭建 Github 个人博客(三)：设置 hexo 博客主题</title>
    <link href="http://yoursite.com/2017/07/15/themeBlog/"/>
    <id>http://yoursite.com/2017/07/15/themeBlog/</id>
    <published>2017-07-15T09:10:43.000Z</published>
    <updated>2018-08-16T01:54:23.637Z</updated>
    
    <content type="html"><![CDATA[<p>之前写了两篇文章来教大家怎么去创建 GitHub 个人博客，然后再怎么配合 hexo 去开发博客。<br><a id="more"></a></p>
<ul>
<li><a href="https://runjaelyn.github.io/2017/06/09/signupBlog/" target="_blank" rel="external">搭建 Github 个人博客(一)：搭建博客基础页面</a> </li>
<li><a href="https://runjaelyn.github.io/2017/06/25/hexoBlog/" target="_blank" rel="external">搭建 Github 个人博客(二)：配合使用 hexo 开发博客</a>  </li>
</ul>
<p>本来这个教程到此也差不多结束了。但是后来有些笨鸡娃子找到我说，不会设置博客主题，所以还是决定再写最后一篇教程讲一下怎么去用 hexo 去设置博客的主题。</p>
<h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><p>在设置主题之前，首先需要去找一款喜欢的主题样式。hexo 有自己的博客主题官网 <a href="https://hexo.io/themes/" target="_blank" rel="external">Themes | Hexo</a>，可以在官网里去找喜欢的主题样式。百度上也可以搜到一些开发者们自己写的一些好看主题。具体的自行百度，随便一搜就出来很多了。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fi147brqq9j30w20fan17.jpg" alt=""></p>
<p>选择好主题后，找到该主题的地址。我们用官网的一个主题为例：</p>
<p>（1）点击主题名字进入主题详情页面。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhzlcff7x5j31kw0th47f.jpg" alt=""></p>
<ul>
<li><p>详情页面里有一个<code>README.md</code>的主题说明的文档。大部分的主题在这个文档里都会有下载安装配置的流程说明。</p>
<p>  <img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhzlgmy5d8j31ia0voq74.jpg" alt=""></p>
<p>  例如我们当前选择的这个主题，详情页面往下拉就能看到下载安装主题需要执行的相关命令，直接按照文档里给出的命令依次去执行就可以了。</p>
<p>  如果遇到文档没有写安装教程的，或者 … 看不懂英文的 … 那就继续看我们这个教程的下一步吧。</p>
</li>
</ul>
<p>（2）点击详情页面的绿色按钮，复制红框中的主题地址。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fhzjm91vxmj31kw0p77ac.jpg" alt=""></p>
<p>在其他网站找的主题也一样的会有一个主题的地址，同样的复制下来就行。</p>
<h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p>有了主题地址之后，接下来我们就可以开始安装了。</p>
<p>（1）打开命令行工具，进入到你的博客文件夹。然后执行以下格式的命令，将选中的主题克隆下来。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone <span class="string">"url"</span> themes/<span class="string">"themeName"</span>    <span class="comment">// 不要复制这一行！！！看下面解释！！！</span></div></pre></td></tr></table></figure>
<ul>
<li><code>&quot;url&quot;</code>就是我们刚刚复制的主题地址。</li>
<li><code>&quot;themeName&quot;</code>是我们当前选择的主题名字</li>
</ul>
<p>将你找到的主题地址和主题名字替换掉上面的<code>&quot;url&quot;</code>和<code>&quot;themeName&quot;</code>。</p>
<p>例如我们刚刚在官网找到的那个主题，执行命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/levblanc/hexo-theme-aero-dual.git themes/aero-dual</div></pre></td></tr></table></figure>
<ul>
<li><code>themes/aero-dual</code>前面的<code>themes</code>是存储所有主题文件的文件夹名字，<code>aero-dual</code>是当前主题文件夹的名字，也是当前主题的名字。</li>
</ul>
<p>（2）看到出现类似下面这种 100% 的命令，就表示主题下载成功了。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhzjxhuws9j311m05o412.jpg" alt=""></p>
<p>（3）下载成功之后，在我们的博客文件目录就可以看到我们刚刚下载好的主题文件。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fi14mvl2jjj30wg06mq3x.jpg" alt=""></p>
<p>（4）用编辑器打开博客文件目录中的<code>_config.yml</code>文件。将主题配置改为当前选择的主题名字。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Extensions</span></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></div><div class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></div><div class="line"><span class="attr">theme:</span> <span class="string">aero-dual</span></div></pre></td></tr></table></figure>
<p>（5）通过命令进入到当前主题文件夹，例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/aero-dual</div></pre></td></tr></table></figure>
<p><code>aero-dual</code>这是我的主题名字！你们自己换成你们自己选择的主题名字。</p>
<p>（6）然后再执行下面的代码，将当前更改的信息进行合并。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure>
<p>（7）最后，主题配置完成。回到博客文件目录执行以下命令重新部署整个博客。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>好，完成。重新打开博客就可以发现新的主题已经生效了。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhzqf6q16dj31kw10bgzu.jpg" alt=""></p>
<h2 id="功能配置"><a href="#功能配置" class="headerlink" title="功能配置"></a>功能配置</h2><p>到上一步，我们的主题其实就已经安装好了。博客基本上也可以正常使用了。</p>
<p>但是有的时候，博客或者主题的一些默认配置并不是我们想要的，所以我们还可以根据自己的需求去更改一些配置。这里简单梳理几个常用的配置信息。</p>
<h3 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h3><p>找到博客目录下的<code>_config.yml</code>文件。</p>
<p>注意：以下所有配置，冒号后面都要有一个空格。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span>                       <span class="comment">## 博客主标题 </span></div><div class="line"><span class="attr">subtitle:</span>                    <span class="comment">## 博客副标题  </span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>              <span class="comment">## 语言 中文</span></div></pre></td></tr></table></figure>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>每一个主题的文件目录下也都有一个<code>_config.yml</code>文件，这个就是主题配置文件。不同的主题配置信息也不一样。</p>
<h4 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h4><p>因为添加评论功能的配置比较复杂，所以单独写了一篇博客来讲解。</p>
<p><a href="https://runjaelyn.github.io/2017/07/16/commentBlog/" target="_blank" rel="external">《搭建 Github 个人博客(四)：配置博客评论功能》</a></p>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p><strong>文章摘要</strong></p>
<p>有一些主题博客首页默认显示全文，如果只希望现实某一个段落在首页，可以在文章内容中插入<code>&lt;!--more--&gt;</code>以隐藏后面的内容。</p>
<hr>
<p>所有关于博客搭建的教程就写到这了。以后想到还有什么漏掉的再来修改。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写了两篇文章来教大家怎么去创建 GitHub 个人博客，然后再怎么配合 hexo 去开发博客。&lt;br&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="theme" scheme="http://yoursite.com/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>搭建 Github 个人博客(二)：配合使用 hexo 开发博客</title>
    <link href="http://yoursite.com/2017/06/25/hexoBlog/"/>
    <id>http://yoursite.com/2017/06/25/hexoBlog/</id>
    <published>2017-06-25T06:31:42.000Z</published>
    <updated>2018-07-19T06:46:05.070Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://runjaelyn.github.io/2017/06/09/signupBlog/" target="_blank" rel="external">《搭建 Github 个人博客(一)：搭建博客基础页面》</a>中我们讲了怎么去搭建一个 GitHub 博客的基础页面。实际上，基础页面搭建完成之后，我们就已经可以通过 Github Pages 直接写 HTML 静态博客了。</p>
<a id="more"></a>
<p>但是尝试之后我们会发现，这种博客使用起来相当麻烦。页面不够好看，操作又不方便，后期维护起来又很繁杂。所以，我们需要借用一些静态博客框架来辅助我们开发 github 博客。</p>
<p>现在比较流行的静态博客框架也比较多，不同的静态程序可以说都有各自的好处。这篇文章我们主要讲的是使用<a href="https://hexo.io/" target="_blank" rel="external">HEXO</a>这个框架来搭建 GitHub 个人博客。</p>
<h2 id="运行环境准备"><a href="#运行环境准备" class="headerlink" title="运行环境准备"></a>运行环境准备</h2><p>hexo 是一款基于 Node.js 的静态博客框架，所以我们需要安装 Node.js。</p>
<ul>
<li><a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js</a>（下载最新版的Node.js）</li>
<li><a href="https://git-scm.com/" target="_blank" rel="external">Git</a></li>
<li>文本编辑器（用于修改配置文件以及写文章）</li>
</ul>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>当 Node.js 和 Git 都安装好了之后，就可以正式安装 hexo 了。</p>
<p>（1）打开命令行工具（Mac：终端 <code>Terminal</code> / windows：CMD） ，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g hexo</div></pre></td></tr></table></figure>
<p>注意：Hexo 官网上的安装命令是 <code>npm install -g hexo-cli</code>，安装时不要忘记前面加上<code>sudo</code>，否则会因为权限问题报错。</p>
<ul>
<li>选装 cnpm</li>
</ul>
<p>因为 npm 安装插件是从国外服务器下载，受网络影响大，可能出现异常。所以我们可以利用淘宝提供的国内镜像。</p>
<p>命令行执行以下代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm --registry=https://registry.npm.taobao.org install -g cnpm</div></pre></td></tr></table></figure>
<p>安装完后最好通过 <code>cnpm -v</code> 命令查看其版本号，或关闭终端重新打开。安装完直接使用有可能会出现错误。</p>
<p><code>cnpm</code> 跟 <code>npm</code> 用法完全一致，只是在执行命令时将 <code>npm</code> 改为 <code>cnpm</code>（如果使用了淘宝镜像，后面操作将以 <code>cnpm</code> 代替 <code>npm</code>）</p>
<p>（2）输入管理员密码即开始安装 </p>
<p>（3）新建一个文件夹，例如 <code>blog</code>。用来存放自己博客相关的文件。</p>
<p>（4）在终端里通过 <code>cd</code> 命令进入到 <code>blog</code> 文件夹。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fgxfdois13j30r804gwf5.jpg" alt=""></p>
<p>（5）确定进入到 <code>blog</code> 文件夹之后，执行以下命令，对 <code>blog</code> 文件夹进行初始化。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
<p>（6）初始化完成之后，执行以下命令，安装所有的依赖和插件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<p>（7）安装完成后，执行以下命令，开启 hexo 本地服务器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo sever		或简写 hexo s</div></pre></td></tr></table></figure>
<p>当看到以下命令出现，就表示服务器启动成功。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fgxfek2yetj30ru0143yr.jpg" alt=""></p>
<p>然后就可以在浏览器中打开<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>来查看博客了。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fgxff2rb0oj30qk0d1n3y.jpg" alt=""></p>
<p>至此，我们的 hexo 静态博客框架安装就完成了。</p>
<h2 id="关联-github"><a href="#关联-github" class="headerlink" title="关联 github"></a>关联 github</h2><p>现阶段，我们只是在本地搭建好了博客页面，其他人是无法访问的。所以，本地安装完成之后，接下来我们需要关联 github。</p>
<p>（1）用编辑器打开 <code>blog</code> 文件夹里面的一个 <code>_config.yml</code> 的文件。将文件末尾修改为以下内容：</p>
<p>注：<code>runjaelyn</code> 改为你自己 <code>github</code> 的用户名</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span> </div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/runjaelyn/runjaelyn.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure>
<p style="color:red">注意：在配置所有的 _config.yml 文件时（包括后面会用到的主题 theme 文件夹中的），所有的冒号 : 后边都要加一个空格，否则执行 hexo 命令会报错。</p>

<p>（2）修改完成并保存。然后通过 <code>cd</code> 命令进入到 <code>blog</code> 文件夹目录，在命令行执行生成静态页面的命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate		或简写 hexo g</div></pre></td></tr></table></figure>
<ul>
<li><p>此时若出现如下报错：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR Local hexo not found <span class="keyword">in</span> ~/blog</div><div class="line">ERROR Try runing: <span class="string">'npm install hexo --save'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>则执行命令：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo --save</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>若无报错，自行忽略此步骤。</li>
</ul>
<p>（3）静态页面生成成功之后，执行配置命令 <code>deploy</code>，部署网站。（以后每次部署网站前，都需要预先生成静态文件）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy		或简写 hexo d</div></pre></td></tr></table></figure>
<p>（4）部署网站执行成功后，会显示类似于下列的命令。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fgxffveqejj31100ae782.jpg" alt=""></p>
<p>但是，也有可能会出现几种报错的情况：</p>
<p style="color:red">1. 无法连接 Git 或找不到 Git。</p>

<p>则执行如下命令来安装 <code>hexo-deployer-git</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fgxfg618n4j30qw05ktae.jpg" alt=""></p>
<p style="color:red">2. 没有配置用户名和密码。</p>

<p>若在本机上是第一次使用 Git，那么 Git 会要求配置的是你个人的用户名称和电子邮件地址。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fgxfgf2dzij30ow05qq3n.jpg" alt=""></p>
<p>这两条配置很重要，每次 Git 提交时都会引用这两条信息，用来说明是谁提交了更新。所以，需要则执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"name"</span></div><div class="line">git config --global user.email <span class="string">"name@example.com"</span></div></pre></td></tr></table></figure>
<p>上面<code>&quot;&quot;</code>里的内容填写自己的名字和邮箱就可以了。</p>
<p style="color:red">3. 未关联 GitHub。</p>

<p>若你未关联 Github，那么在执行 <code>hexo deploy</code> 命令时终端会提示你输入Github 的用户名和密码，即</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fgxfh04943j31140baae1.jpg" alt=""></p>
<p>依次输入你自己的 github 账号和密码就可以了。</p>
<p>（5）以上报错问题解决好了之后，重新执行配置命令 <code>deploy</code>，部署网站。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy		或简写 hexo d</div></pre></td></tr></table></figure>
<p>（6）显示成功之后，打开浏览器，输入你自己的 GitHub 地址。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fgxfhczaskj30mc01qjri.jpg" alt=""></p>
<p><code>runjaelyn</code> 改为你自己的用户名。</p>
<p>至此，我们刚刚在本地搭建的博客页面，现在就已经关联到了 github 上，其他人可以通过你的 Github 博客地址访问你的博客了。</p>
<h2 id="发表新文章"><a href="#发表新文章" class="headerlink" title="发表新文章"></a>发表新文章</h2><p>博客搭建好了之后，我们就可以开始往博客里添加我们的博客内容了。</p>
<p>（1）通过 <code>cd</code> 进入到 <code>blog</code> 文件夹，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"文章标题"</span></div></pre></td></tr></table></figure>
<p>创建成功后会有如下提示：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fgxfice2lyj30ms01s0tb.jpg" alt=""></p>
<p>创建成功后，打开 <code>blog</code> 文件夹里的 <code>source／_posts</code> ，就可以看到我们刚刚通过 hexo <code>new</code> 出来的文章 <code>.md</code> 文件。    </p>
<p>然后我们就可以添加我们的文章内容了（内容遵循 <code>Markdown</code> 的语法规则）。 </p>
<p>（2）文章编辑好保存后，执行如下命令，重新生成并部署：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean </div><div class="line">hexo g </div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>（3）成功后刷新博客就可以看到新文章已经显示在页面了。</p>
<p>到此为止，我们的博客就搭建完成了。</p>
<p>如果觉得 hexo 默认主题样式不好看的话，还可以自己去网上找其他主题，更换主题模式。</p>
<p>以后，我们就都可以通过 hexo 来管理操作我们的博客了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;https://runjaelyn.github.io/2017/06/09/signupBlog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《搭建 Github 个人博客(一)：搭建博客基础页面》&lt;/a&gt;中我们讲了怎么去搭建一个 GitHub 博客的基础页面。实际上，基础页面搭建完成之后，我们就已经可以通过 Github Pages 直接写 HTML 静态博客了。&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>搭建 Github 个人博客(一)：搭建博客基础页面</title>
    <link href="http://yoursite.com/2017/06/09/signupBlog/"/>
    <id>http://yoursite.com/2017/06/09/signupBlog/</id>
    <published>2017-06-09T15:25:01.000Z</published>
    <updated>2018-07-19T06:46:15.941Z</updated>
    
    <content type="html"><![CDATA[<p>现在网络上技术类相关的博客由很多，很多类似于CSDN、博客园也都可以写文章。我们这篇教程主要介绍的是用 githubpages 搭建自己独立的技术博客。</p>
<a id="more"></a>
<h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>要创建 GitHub 的个人技术博客，首先需要进入<a href="https://github.com/" target="_blank" rel="external">Github官网</a>注册一个 GitHub 的账号。</p>
<p>（如果已经有 <code>github</code> 账号，可跳前两个步骤，直接进入第三步。）</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcyl3w5wj31kw0yoaiu.jpg" alt=""></p>
<h2 id="初始设置"><a href="#初始设置" class="headerlink" title="初始设置"></a>初始设置</h2><p>账号注册成功之后会跳到一个账户初始设置的页面，一般情况下我们采用默认设置就行。不用做任何更改，直接点击绿色 <code>Continue</code> 按钮。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcykhxlbj31kw0xggtm.jpg" alt=""></p>
<h3 id="验证邮箱"><a href="#验证邮箱" class="headerlink" title="验证邮箱"></a>验证邮箱</h3><p>初始设置完成之后，打开你注册账号时填写的邮箱，查看 GitHub 发给你的邮件。</p>
<p>我们需要对邮箱进行验证，后面生成的个人主页才会被接受和发布。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcylv8fkj31kw0dy42y.jpg" alt=""></p>
<p>点击验证邮箱，验证成功后跳转到如下页面。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fgfc10zrt7j31kw0tcjx9.jpg" alt=""></p>
<p>点击第二个按钮，创建一个新项目。</p>
<h2 id="创建页面仓库"><a href="#创建页面仓库" class="headerlink" title="创建页面仓库"></a>创建页面仓库</h2><p>这个页面用来填写关于你新建的这个仓库的一些初始化设置。</p>
<p>（找不到页面入口的可以点击这里<a href="https://github.com/new" target="_blank" rel="external">创建页面仓库</a>）</p>
<p>注意：</p>
<ol>
<li><p>仓库名称尽量跟你的 GitHub 用户名（注册账号时填写的用户名）保持一致。</p>
</li>
<li><p>因为 Github Pages 发布的页面统一使用 <code>github.io</code> 域名，所以你的仓库名还需要在你的用户名后面加上后缀 <code>.github.io</code>。</p>
</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fgfcymfif2j31kw0ypgu4.jpg" alt=""></p>
<p>其他的一些可选选项根据自己需求填写，完成之后点击绿色按钮 <code>Create reponsitory</code> 创建仓库。</p>
<h2 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h2><p>仓库创建好后，接下来就是在仓库中生成我们的页面。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcyj5d3uj31kw0yrjyl.jpg" alt=""></p>
<p>点击页面内的 <code>setting</code> ，进入设置页面。</p>
<p>在生成完整的页面之前，我们需要先给我们的页面设置一个主题样式，所以滑到页面后面，可以看到有一个主题选择按钮，点击 <code>choose a theme</code>。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fgfcyjvaofj317s0yi44h.jpg" alt=""></p>
<p>在主题页面选择一个自己喜欢的主题，选定后点击 <code>select theme</code></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcymovenj31kw10gwok.jpg" alt=""></p>
<p>主题设置成功后会跳转到一个“README“文件的配置页面。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fgfcykpcpoj31kw0pjaeo.jpg" alt=""></p>
<p>因为我们是将“README”作为我们博客的首页，所以选择直接将它提交到主分支即可。</p>
<p>其他的设置在后面我们都可以修改，所以这里不做任何改动，采用默认设置。</p>
<p>然后点击绿色 <code>Commit changes</code> 按钮。</p>
<p>到这为止，我们的 GitHub 博客就已经搭建好了。</p>
<h2 id="博客地址"><a href="#博客地址" class="headerlink" title="博客地址"></a>博客地址</h2><p>那么，别人要怎么访问我们的博客呢？</p>
<p>还是进入到我们刚刚选择主题时的 <code>setting</code> 页面。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fgfcyiik04j315u0zmq8v.jpg" alt=""></p>
<p>在主题选择这一栏的上方，有一个链接。点击这个链接，就可以看到我们的博客首页了，里面有我们刚刚设置的博客主题，和“REANME”文件里的内容。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fgfcympialj31kw0xigs1.jpg" alt=""></p>
<p>这个链接地址就是我们的博客地址，别人也就可以通过这个地址来访问我们 GitHub 博客了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在网络上技术类相关的博客由很多，很多类似于CSDN、博客园也都可以写文章。我们这篇教程主要介绍的是用 githubpages 搭建自己独立的技术博客。&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
</feed>
