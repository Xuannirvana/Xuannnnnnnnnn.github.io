<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Event 事件 - 扩展]]></title>
      <url>/2017/08/30/event02/</url>
      <content type="html"><![CDATA[<p>我们在<a href="https://runjaelyn.github.io/2017/08/30/event01/" target="_blank" rel="external">《Event 事件 - 基础》</a>中讲了关于事件的“事件驱动的三要素”、“事件分类”和“事件绑定”等基础内容，接下来我们在前面内容的基础之上，再来对事件的知识点进行一些扩展的学习。</p>
<a id="more"></a>
<h2 id="事件中的-this"><a href="#事件中的-this" class="headerlink" title="事件中的 this"></a>事件中的 this</h2><p>在事件的处理函数中，可以通过 this 关键字来指代绑定该事件的标签。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"para"</span>&gt;</span> 我是一个p标签 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果我们要在点击完<code>&lt;p&gt;</code>标签后获取到它里面的内容，常规做法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">para.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( para.textContent );        <span class="comment">// 我是一个p标签</span></div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>上述代码可以使用 this 关键字进行改写:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">para.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.textContent );        <span class="comment">// 我是一个p标签</span></div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<h3 id="监听器的-this-兼容优化方案"><a href="#监听器的-this-兼容优化方案" class="headerlink" title="监听器的 this 兼容优化方案"></a>监听器的 this 兼容优化方案</h3><p>通过<code>addEventListener()</code>方法为 HTML 页面的标签绑定事件时，<code>this</code>关键字指代绑定该事件的标签元素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"para"</span>&gt;</span> 我是一个p标签 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">para.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span> );        <span class="comment">// &lt;p id="para"&gt; 我是一个p标签 &lt;/p&gt;</span></div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>通过<code>attachEvent()</code>方法为 HTML 页面的标签绑定事件时，<code>this</code>关键字指代绑定<code>window</code>对象。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"para"</span>&gt;</span> 我是一个p标签 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">para.attachEvent(<span class="string">'onclick'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span> );       <span class="comment">// [Object window]</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>由于在<code>addEventListener()</code>方法中的<code>this</code>和在<code>attachEvent()</code>方法中的<code>this</code>指代不同，我们需要进一步优化我们的兼容方案。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">elem, event, callback</span>)</span>&#123;</div><div class="line">    <span class="comment">// 判断是否存在 addEventListener</span></div><div class="line">    <span class="keyword">if</span> (elem.addEventListener)&#123;</div><div class="line">        elem.addEventListener(event, callback, <span class="literal">false</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        elem.attachEvent(<span class="string">'on'</span> + event, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            callback.call(elem);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bind(para, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span> );</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>HTML 页面的标签绑定事件的处理函数中，提供了一个事件对象（event）。这个事件对象会返回关于该事件的信息，以及该事件绑定在哪个元素中。</p>
<p>事件对象是以事件的处理函数中的参数形式出现，并不需要我们自己创建，直接使用即可。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">事件源.addEventListener(eventName, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="comment">// event 就是事件对象</span></div><div class="line">&#125;, boolean)</div></pre></td></tr></table></figure>
<p>事件对象说明：</p>
<ul>
<li>当事件发生时，只能在事件函数内部访问的对象；</li>
<li>处理函数结束后会自动销毁；</li>
</ul>
<h3 id="兼容的事件对象"><a href="#兼容的事件对象" class="headerlink" title="兼容的事件对象"></a>兼容的事件对象</h3><p>使用 DOM 标准的事件绑定时，Event 事件对象在 IE 8 及之前的版本浏览器情况有所不同。</p>
<p>（1）IE 9 及之后的版本和其他浏览器：通过事件的处理函数的形参直接得到 Event 对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( event )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>（2）IE 8 及之前的版本浏览器：Event 事件对象被提供在 window 对象中。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="built_in">window</span>.event )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>想要实现 Event 事件对象的兼容，我们可以在事件的处理函数中添加以下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">event = event || <span class="built_in">window</span>.event;</div></pre></td></tr></table></figure>
<h3 id="Event-对象的属性"><a href="#Event-对象的属性" class="headerlink" title="Event 对象的属性"></a>Event 对象的属性</h3><h4 id="target"><a href="#target" class="headerlink" title="target"></a><code>target</code></h4><p>Event 事件对象提供了<code>target</code>属性用于获取触发事件的目标元素（标签）。</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 我是a标签 <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( event.target );      </div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>上面例子：如果点击<code>&lt;a&gt;</code>标签，则打印<code>&lt;a&gt;</code>标签；如果点击<code>&lt;li&gt;</code>标签，则打印<code>&lt;li&gt;</code>标签及其子级；如果点击<code>&lt;ul&gt;</code>标签，则打印<code>&lt;ul&gt;</code>标签及其子级。</p>
<h4 id="IE-8-及-之前的target"><a href="#IE-8-及-之前的target" class="headerlink" title="IE 8 及 之前的target"></a>IE 8 及 之前的<code>target</code></h4><p>IE 8 及之前的版本浏览器不支持<code>target</code>属性，而是提供了<code>srcElement</code>属性进行替换。</p>
<p>所以，上述示例代码在 IE 8 及之前的版本浏览器中，应该是如下代码:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( event.srcElement )</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>如果提供兼容解决方案的话，我们可以在事件的处理函数中加入如下代码:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> target = event.target || event.srcElement;</div></pre></td></tr></table></figure>
<h4 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h4><p>相对于浏览器位置：</p>
<ul>
<li><code>event.clientX</code>：返回当事件被触发时鼠标指针向对于浏览器页面（或客户区）的水平坐标。</li>
<li><code>event.clientY</code>：返回当事件被触发时鼠标指针向对于浏览器页面（客户区）的垂直坐标。</li>
</ul>
<p>相对于屏幕位置：</p>
<ul>
<li><code>event.screenX</code>：返回事件发生时鼠标指针相对于屏幕的水平坐标。</li>
<li><code>event.screenY</code>：返回事件发生时鼠标指针相对于屏幕的垂直坐标。</li>
</ul>
<p>相对于事件源位置：</p>
<ul>
<li><code>event.offsetX</code>：返回事件发生时鼠标指针相对于事件源的水平坐标</li>
<li><code>event.offsetY</code>：返回事件发生时鼠标指针相对于事件源的垂直坐标</li>
<li><code>event.layerX</code>：返回事件发生时鼠标指针相对于事件源的水平坐标（Firefox）</li>
<li><code>event.layerY</code>：返回事件发生时鼠标指针相对于事件源的垂直坐标（Firefox）</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">"mousemove"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(event.clientX, event.clientY)</div><div class="line">    <span class="built_in">console</span>.log(event.offsetX, event.offsetY)</div><div class="line">    <span class="comment">// ... ...</span></div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><ul>
<li><code>keyCode</code>：获取按下的键盘按键的值的字符代码。</li>
<li><code>altKey</code>：指示在指定的事件发生时，Alt 键是否被按下。</li>
<li><code>ctrlKey</code>：指示当事件发生时，Ctrl 键是否被按下。</li>
<li><code>shiftKey</code>：指示当事件发生时，”SHIFT” 键是否被按下。</li>
</ul>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">box.addEventListener(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( event.keyCode );      <span class="comment">// 输出当前按键对应的 keyCode 数值</span></div><div class="line">    <span class="built_in">console</span>.log( event.shiftKey );     <span class="comment">// 按下“SHIFT”键输出 true，否则输出 false</span></div><div class="line">    <span class="comment">// ... ...</span></div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<h4 id="type属性"><a href="#type属性" class="headerlink" title="type属性"></a>type属性</h4><p>用来检测事件类型</p>
<p>采用上面的例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">box.addEventListener(<span class="string">"keydown"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( event.type );       <span class="comment">// keydown</span></div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<h3 id="Event-对象的方法"><a href="#Event-对象的方法" class="headerlink" title="Event 对象的方法"></a>Event 对象的方法</h3><h4 id="阻止默认事件"><a href="#阻止默认事件" class="headerlink" title="阻止默认事件"></a>阻止默认事件</h4><p>HTML 页面的一些标签具有默认行为。所谓默认行为，就是不用编写 JavaScript 代码就可以实现的动态效果。例如如下标签:</p>
<ul>
<li><code>&lt;a&gt;</code>标签：用户点击<code>&lt;a&gt;</code>标签，页面会发生跳转行为。</li>
<li><code>&lt;form&gt;</code>标签：用户点击表单的提交按钮，表单会发生提交行为。</li>
</ul>
<p>阻止默认行为，就是不让 HTML 页面这些标签的默认行为发生。想要阻止默认行为可以通过 Event 事件对象提供的属性和方法实现:</p>
<ul>
<li>IE 8 及之前版本的浏览器: <code>returnValue</code>属性</li>
<li>IE 9 及之后版本和其他浏览器: <code>preventDefault()</code>方法</li>
</ul>
<p>想要提供兼容方案，可以使用如下代码实现:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (event.preventDefault)&#123;</div><div class="line">    event.preventDefault();</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    event.returnValue = <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><blockquote>
<p>事件流描述的是从页面中接受事件的顺序，也可以理解为事件在页面中传播的顺序。</p>
</blockquote>
<p>JavaScript 事件流最早要从 IE 和网景公司的浏览器大战说起，IE 提出的是冒泡流，而网景提出的是捕获流，后来在 W3C 组织的统一之下，JavaScript 支持了冒泡流和捕获流，但是目前低版本的 IE 浏览器还是只能支持冒泡流(IE6、IE7、IE8 均只支持冒泡流)，所以为了能够兼容更多的浏览器，建议大家使用冒泡流。</p>
<h3 id="事件流的分类"><a href="#事件流的分类" class="headerlink" title="事件流的分类"></a>事件流的分类</h3><p>我们将事件流一共分为了以下三种：</p>
<ul>
<li>冒泡型事件流（ Event Bubbling ）</li>
<li>捕获型事件流（ Event Capturing ）</li>
<li>DOM 事件流模型</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fin65r6x3oj313q0lk77r.jpg" alt=""></p>
<p>那么这三种事件流到底有什么区别呢？所以我们来看一个例子。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们创建三个<code>&lt;div&gt;</code>，最终样式如下图所示（这里 CSS 代码就省略不写了）：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fin3f5aohkj31a60gojrz.jpg" alt=""></p>
<h4 id="捕获型事件流"><a href="#捕获型事件流" class="headerlink" title="捕获型事件流"></a>捕获型事件流</h4><p>现在，我们依次给这三个<code>&lt;div&gt;</code>绑定点击事件，JavaScript 代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">box1.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"box1"</span> );</div><div class="line">&#125;, <span class="literal">true</span>)</div><div class="line">box2.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"box2"</span> );</div><div class="line">&#125;, <span class="literal">true</span>)</div><div class="line">box3.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"box3"</span> );</div><div class="line">&#125;, <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<p>然后，我们去页面上执行点击事件，会出现奇怪的情况：</p>
<ul>
<li>当我们点击最里层的<code>box3</code>时，控制台依次输出：</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fin3v7cr7mj314k06mmxf.jpg" alt=""></p>
<ul>
<li>当我们点击中间层的<code>box2</code>时，控制台输出：</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fin3ubtxebj314k0503yn.jpg" alt=""></p>
<ul>
<li>当我们点击最外层的<code>box1</code>时，控制台输出：</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fin3l2v90pj314k034q2y.jpg" alt=""></p>
<p>说明：我们给三个<code>addEventListener()</code>方法的第三个参数都给了<code>true</code>，就表示该元素在事件的“捕获阶段”响应事件，即从最外层依次往里层目标元素触发事件。</p>
<h4 id="冒泡型事件流"><a href="#冒泡型事件流" class="headerlink" title="冒泡型事件流"></a>冒泡型事件流</h4><p>接下来我们把我们绑定的点击事件的代码改一下，把<code>addEventListener()</code>方法的第三个参数换成<code>false</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">box1.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"box1"</span> );</div><div class="line">&#125;, <span class="literal">false</span>)</div><div class="line">box2.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"box2"</span> );</div><div class="line">&#125;, <span class="literal">false</span>)</div><div class="line">box3.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">"box3"</span> );</div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>然后，我们再去页面上执行点击事件，又会出现不一样的情况：</p>
<ul>
<li>当我们点击最里层的<code>box3</code>时，控制台输出：</li>
</ul>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fin3k11ay9j314i06agly.jpg" alt=""></p>
<ul>
<li>当我们点击中间层的<code>box2</code>时，控制台输出：</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fin3m9ez6jj314k04y0t0.jpg" alt=""></p>
<ul>
<li>当我们点击最外层的<code>box1</code>时，控制台输出：</li>
</ul>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fin3l2v90pj314k034q2y.jpg" alt=""></p>
<p>说明：我们给三个<code>addEventListener()</code>方法的第三个参数都给了<code>false</code>，就表示该元素在事件的“冒泡阶段”响应事件，即从目标元素依次往最外层触发事件。</p>
<h4 id="DOM-事件流模型"><a href="#DOM-事件流模型" class="headerlink" title="DOM 事件流模型"></a>DOM 事件流模型</h4><p>DOM 事件流模型同时支持两种事件模型，即捕获型事件与冒泡型事件，但是，捕获型事件先发生。两种事件流都会触发 DOM 中的所有对象，从 document 对象开始，也在 document 对象结束（大部分兼容标准的浏览器会继续将事件是捕捉/冒泡延续到 window 对象）。</p>
<p><strong>事件周期</strong></p>
<p>根据 W3C 标准，一个事件完整的传递过程可以分为三个阶段：</p>
<ul>
<li>捕获阶段：事件根据 DOM 树结构从最上层节点依次向目标节点传播的阶段。</li>
<li>触发阶段：真正的目标节点正在处理事件的阶段。</li>
<li>冒泡阶段：事件根据 DOM 树结构从目标节点依次向上传播的阶段。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fin57kxptxj31460nwgpi.jpg" alt=""></p>
<h3 id="阻止事件流"><a href="#阻止事件流" class="headerlink" title="阻止事件流"></a>阻止事件流</h3><p>从上面的示例中可以知道，不管是冒泡阶段还是捕获阶段，我们的事件都会一层一层的进行传播。但是如果我们只想触发当前节点的事件，而不继续向上冒泡或向下捕获，我们可以通过 Event 事件对象提供的属性来进行阻止事件流:</p>
<ul>
<li>IE 8 及之前版本的浏览器: <code>cancelBubble</code>属性</li>
<li>IE 9 及之后版本和其他浏览器: <code>stopPropagation()</code>方法</li>
</ul>
<p>想要提供兼容方案，可以使用如下代码实现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( event.stopPropagation )&#123;</div><div class="line">    event.stopPropagation();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    event.cancelBubble = <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>在讨论什么是事件委托之前，我们先来看一个示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 链接1 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 链接2 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 链接3 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>一个<code>&lt;ul&gt;</code>列表，如果我们要给每个<code>&lt;a&gt;</code>标签绑定一个点击事件，常规代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> allA = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allA.length; i++)&#123;</div><div class="line">    allA[i].addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log( <span class="keyword">this</span> );</div><div class="line">    &#125;, <span class="literal">false</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码执行结果，每点击一个<code>&lt;a&gt;</code>标签，就可以得到一个当前的<code>&lt;a&gt;</code>标签元素。</p>
<p>但是，如果我们的<code>&lt;a&gt;</code>标签不是静态的节点而是动态生成的呢？如下代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 链接1 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 链接2 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 链接3 <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们在页面上增加一个“增加”按钮，每点击一次，增加一个<code>&lt;li&gt;</code>和<code>&lt;a&gt;</code>;</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</div><div class="line">    li.innerHTML = <span class="string">'&lt;a href="#"&gt; 链接4 &lt;/a&gt;'</span>;</div><div class="line">    list.appendChild( li ) ;</div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>然后这个时候我们再执行点击事件，会发现：新添加的选项的<code>&lt;a&gt;</code>标签并没有点击事件。如果我们想为新添加的<code>&lt;a&gt;</code>标签同样绑定<code>click</code>事件，可以将事件绑定到所有<code>&lt;a&gt;</code>标签共有的祖先元素上。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">list.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>( event.target.nodeName === <span class="string">"A"</span> )&#123;</div><div class="line">        <span class="built_in">console</span>.log( <span class="string">"我是a标签"</span> )</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>这种将事件绑定在其祖先元素身上的方式，我们就可以称之为<strong>事件委托</strong>。</p>
<blockquote>
<p>事件委托原理：事件委托就是利用的 DOM 事件的事件冒泡阶段。把具体节点上发生的事件，委托给更大范围的节点去处理。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Event 事件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> this </tag>
            
            <tag> event </tag>
            
            <tag> 事件流 </tag>
            
            <tag> 冒泡 </tag>
            
            <tag> 捕获 </tag>
            
            <tag> 事件委托 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Event 事件 - 基础]]></title>
      <url>/2017/08/30/event01/</url>
      <content type="html"><![CDATA[<p>Javascript 使我们可以动态的去创建操作一个页面。当我们在与浏览器交互的时候，浏览器就会触发各种事件。</p>
<p>比如我们打开某一个网页的时候，浏览器需要加载完成这个网页，就会触发一个加载事件；当我们点击页面中的某一个“地方”，浏览器就会在那个“地方”触发一个点击事件。<br><a id="more"></a></p>
<h2 id="事件驱动三要素"><a href="#事件驱动三要素" class="headerlink" title="事件驱动三要素"></a>事件驱动三要素</h2><ul>
<li><strong>事件源</strong>：即触发事件的元素</li>
<li><strong>事件</strong>：被 JavaScript 监测到的行为。例如：<ul>
<li>鼠标点击</li>
<li>键盘按键</li>
<li>选取输入框</li>
<li>… …</li>
</ul>
</li>
<li><strong>事件处理函数</strong>：事件发生时要进行的操作，又叫做”事件句柄”或”事件监听器”。</li>
</ul>
<h2 id="事件分类"><a href="#事件分类" class="headerlink" title="事件分类"></a>事件分类</h2><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fj1k1o62ovj316q0umaep.jpg" alt=""></p>
<h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><p>为 HTML 页面指定标签绑定指定事件，可以通过以下三种方式实现:</p>
<ul>
<li>HTML 标签的事件属性：这种方式 HTML 代码和 JavaScript 逻辑不能很好地分离，所以不建议使用。</li>
<li>DOM 标准的事件：这种方式只能为指定的一个标签绑定一个事件，并且只能具有一个事件处理函数。</li>
<li>事件监听器：这种方式是目前最受欢迎的一种方式。但 IE 8 及之前的版本不支持！</li>
</ul>
<h3 id="HTML-标签的事件属性"><a href="#HTML-标签的事件属性" class="headerlink" title="HTML 标签的事件属性"></a>HTML 标签的事件属性</h3><p>即把事件作为 HTML 标签的属性直接绑定在 HTML 标签身上，属于 DOM 0 级事件。例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"点击"</span> <span class="attr">onclick</span>=<span class="string">"test()"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="DOM-标准的事件"><a href="#DOM-标准的事件" class="headerlink" title="DOM 标准的事件"></a>DOM 标准的事件</h3><p>通过<code>on</code>加事件类型的方式去绑定事件，也属于 DOM 0 级事件。例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"点击"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方式一</span></div><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 方式二</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line">btn.onclick = test;</div></pre></td></tr></table></figure>
<h3 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h3><p>DOM 提供了事件监听器，可以同时绑定或删除多个事件，并且具有多个事件处理函数。属于 DOM 2 级事件。</p>
<p>具体监听器语法结构如下:</p>
<p><strong>绑定：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">事件源.addEventListener( eventName, functionName, boolean );</div></pre></td></tr></table></figure>
<p><strong>删除：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">事件源.removeEventListener( eventName, functionName, boolean );</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>eventName</code>：为元素指定具体的事件名称（例如单击事件是<code>click</code>等）；</li>
<li><code>functionName</code>：绑定事件的处理函数；</li>
<li><code>boolean</code>：布尔值。设置事件是捕获阶段还是冒泡阶段。默认值为<code>false</code>，为冒泡阶段；</li>
</ul>
<p>例（绑定）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"点击"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'你终于点中了我...'</span> );</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>例（删除）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建事件句柄</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'你终于点中了我...'</span> );</div><div class="line">&#125;</div><div class="line"><span class="comment">// 绑定事件</span></div><div class="line">btn.addEventListener(<span class="string">'click'</span>, handle, <span class="literal">false</span>);</div><div class="line"><span class="comment">// 删除事件</span></div><div class="line">btn.removeEventListener(<span class="string">'click'</span>, handle, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p><code>addEventListener()</code>方法还可以为指定一个元素绑定一个事件同时具有多个处理函数。如下代码示例:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'执行第一次点击事件'</span> );</div><div class="line">&#125;, <span class="literal">false</span>);</div><div class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="string">'执行第二次点击事件'</span> );</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<h4 id="IE-8-及之前的监听器"><a href="#IE-8-及之前的监听器" class="headerlink" title="IE 8 及之前的监听器"></a>IE 8 及之前的监听器</h4><p>我们前面提到，事件监听器的方式 IE 8 以及之前的浏览器并不支持。所以提供了其他方法实现。</p>
<p>语法结构：</p>
<p><strong>绑定：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">事件源.attachEvent( eventName, functionName );</div></pre></td></tr></table></figure>
<p><strong>删除：</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">事件源.detachEvent( eventName, functionName );</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>eventName</code>：为元素指定具体的事件名称（例如单击事件是<code>click</code>等）；</li>
<li><code>functionName</code>：绑定事件的处理函数；</li>
</ul>
<blockquote>
<p>注意：<code>attachEvent()</code>方法的<code>eventName</code>参数与<code>addEventListener()</code>方法的<code>eventName</code>参数不同。</p>
</blockquote>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"点击"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">btn.attachEvent(<span class="string">'onclick'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'你终于点中了我...'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="监听器的兼容方案"><a href="#监听器的兼容方案" class="headerlink" title="监听器的兼容方案"></a>监听器的兼容方案</h4><p>我们可以封装一个函数专门来解决事件监听器的浏览器之间兼容问题。具体代码示例如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">elem, event, callback</span>)</span>&#123;</div><div class="line">    <span class="comment">// 判断是否存在 addEventListener</span></div><div class="line">    <span class="keyword">if</span> (elem.addEventListener)&#123;</div><div class="line">        elem.addEventListener(event, callback, <span class="literal">false</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        elem.attachEvent(<span class="string">'on'</span> + event, callback);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bind(btn, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'你终于点中了我...'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Event 事件 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 事件三要素 </tag>
            
            <tag> 事件分类 </tag>
            
            <tag> 事件绑定 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM - Element 对象]]></title>
      <url>/2017/08/19/element/</url>
      <content type="html"><![CDATA[<p>DOM 访问或操作 HTML 页面内容主要是依靠 DOM 节点树这个模型。但在 DOM 中的三个主要对象，除了 Document 和 Node 之外，还有一个就是 Element 对象。</p>
<p>Element 对象描述了所有相同种类的元素所普遍具有的方法和属性，也是访问和操作 HTML 页面内容的主要途径之一。</p>
<a id="more"></a>
<h2 id="Element-与-Node"><a href="#Element-与-Node" class="headerlink" title="Element 与 Node"></a>Element 与 Node</h2><p><strong>元素与节点的区别：</strong></p>
<p>1）通过节点访问或操作 HTML 页面内容：</p>
<ul>
<li>元素节点：表示 HTML 页面中的标签。</li>
<li>属性节点：表示 HTML 页面中标签的属性。</li>
<li>文本节点：表示 HTML 页面中标签的文本内容。</li>
</ul>
<p>2）通过元素访问或操作 HTML 页面内容：</p>
<ul>
<li>元素：表示 HTML 页面中的标签。</li>
</ul>
<p>也就是说：</p>
<blockquote>
<p>使用节点方式时：标签、属性和文本是同级关系；</p>
<p>使用元素方式时：只有标签，属性和文本成为了标签的一部分。</p>
</blockquote>
<h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><p>由于 Element 对象是继承于 Document 对象的，所以 Document 对象的属性和方法，Element 对象都可以直接使用。</p>
<p>我们已经掌握如何通过 Document 对象获取 HTML 页面标签:</p>
<ul>
<li><code>getElementById()</code>方法：通过标签的<code>id</code>属性值获取指定标签。</li>
<li><code>getElementsByClassName()</code>方法：通过标签的<code>class</code>属性值获取指定标签。</li>
<li><code>getElementsByTagName()</code>方法：通过标签名获取指定标签。</li>
<li><code>getElementsByName()</code>方法：通过标签的<code>name</code>属性值获取指定标签。</li>
<li><code>querySelector()</code>方法：通过 CSS 选择器方式获取匹配的第一个标签。</li>
<li><code>querySelectorAll()</code>方法：通过 CSS 选择器方式获取匹配的所有标签。</li>
</ul>
<p>以上获取 HTML 页面标签的方法，在 Element 对象中同样可以使用。</p>
<blockquote>
<p>注意：获取的 HTML 页面中的标签，既是 Node 对象，也是 Element 对象。</p>
</blockquote>
<h2 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h2><h3 id="获取父元素"><a href="#获取父元素" class="headerlink" title="获取父元素"></a>获取父元素</h3><p>通过 HTML 页面的指定标签查找其父元素。</p>
<p><strong><code>parentElement</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">子元素.parentElement</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sonEle = <span class="built_in">document</span>.getElementById(<span class="string">"son"</span>);</div><div class="line"><span class="keyword">let</span> fatherEle = son.parentElement;</div><div class="line"><span class="built_in">console</span>.log( fatherEle );         <span class="comment">// &lt;div id="father"&gt;...&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p>注意：</p>
<p>“Node 对象”的<code>parentNode</code>和“Element 对象”的<code>parentElement</code>两个方法都可以用来获取父级，但是有区别：</p>
<ul>
<li><code>parentNode</code>表示获取指定元素的父节点。这个父节点可能是元素节点，也可能是文档节点。</li>
<li><code>parentElement</code>表示获取指定元素的父元素节点。该元素没有父节点，或者它的父节点不是一个元素节点，则返回<code>null</code>。</li>
</ul>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> htmlNode = <span class="built_in">document</span>.documentElement;     <span class="comment">// 获取 html 元素</span></div><div class="line"><span class="built_in">console</span>.log( htmlNode.parentNode );          <span class="comment">// #document</span></div><div class="line"><span class="built_in">console</span>.log( htmlNode.parentElement );       <span class="comment">// null</span></div></pre></td></tr></table></figure>
<p>原因在于<code>html</code>的父节点<code>document</code>并不是一个元素节点，而是一个文档节点。</p>
<h3 id="获取子元素"><a href="#获取子元素" class="headerlink" title="获取子元素"></a>获取子元素</h3><p>通过 HTML 页面的指定标签查找其子元素。</p>
<p><strong><code>firstElementChild</code></strong>：获取指定标签的第一个子元素。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父元素.firstElementChild</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fatherEle = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);</div><div class="line"><span class="keyword">let</span> sonELe = fatherEle.firstElementChild;</div><div class="line"><span class="built_in">console</span>.log( sonELe );      <span class="comment">// &lt;div id="son1"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong><code>lastElementChild</code></strong>：获取指定标签的最后一个子元素。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父元素.lastElementChild</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fatherEle = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);</div><div class="line"><span class="keyword">let</span> sonELe = fatherEle.lastElementChild;</div><div class="line"><span class="built_in">console</span>.log( sonELe );      <span class="comment">// &lt;div id="son3"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong><code>children</code></strong>：获取指定标签的所有子元素。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父元素.children</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fatherEle = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);</div><div class="line"><span class="keyword">let</span> sonELe = fatherEle.children;</div><div class="line"><span class="built_in">console</span>.log( sonELe );      <span class="comment">//  [ div#son1, div#son2, div#son3 ]</span></div></pre></td></tr></table></figure>
<p>“Node 对象”的<code>childNodes</code>和“Element 对象”的<code>children</code>两种方法都是用来获取所有子级，但是有区别：</p>
<ul>
<li><code>childNodes</code>返回指定元素的子元素集合，包括 HTML 节点、所有属性、文本节点。</li>
<li><code>children</code>返回指定元素的子元素集合，但它只返回 HTML 元素节点。</li>
</ul>
<h3 id="获取兄弟元素"><a href="#获取兄弟元素" class="headerlink" title="获取兄弟元素"></a>获取兄弟元素</h3><p>通过 HTML 页面的指定标签查找兄弟元素。</p>
<p><strong><code>previousElementSibling</code></strong>: 获取指定节点的前一个兄弟节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">兄弟元素.previousElementSibling</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> brother2Ele = <span class="built_in">document</span>.getElementById(<span class="string">"brother2"</span>);</div><div class="line"><span class="keyword">var</span> brotherEle = brother2Ele.previousElementSibling;</div><div class="line"><span class="built_in">console</span>.log( brotherEle );       <span class="comment">// &lt;div id="brother1"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong><code>nextElementSibling</code></strong>: 获取指定节点的后一个兄弟节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">兄弟节点.nextElementSibling</div></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> brother2Ele = <span class="built_in">document</span>.getElementById(<span class="string">"brother2"</span>);</div><div class="line"><span class="keyword">var</span> brotherEle = brother2Ele.nextElementSibling;</div><div class="line"><span class="built_in">console</span>.log( brotherEle );      <span class="comment">// &lt;div id="brother3"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<h2 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h2><p>Element 对象提供的属性操作的方法，是实际开发中应用最多的。（因为 Element 对象操作属性要比 Node 对象简便。）</p>
<h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><p>获取 HTML 页面标签的指定属性值。</p>
<p><strong><code>getAttribute()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.getAttribute( 属性名 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span> <span class="attr">title</span>=<span class="string">"a标签"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</div><div class="line"><span class="keyword">var</span> aAttr = aEle.getAttribute(<span class="string">"title"</span>);</div><div class="line"><span class="built_in">console</span>.log( aAttr );      <span class="comment">// a标签</span></div></pre></td></tr></table></figure>
<h3 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h3><p>设置 HTML 页面标签的指定属性。</p>
<p><strong><code>setAttribute()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.setAttribute( 属性名, 属性值 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</div><div class="line"><span class="keyword">var</span> aAttr = aEle.setAttribute(<span class="string">"title"</span>, <span class="string">"a标签"</span>);</div><div class="line"><span class="built_in">console</span>.log( aEle );      <span class="comment">// &lt;a href="#" id="link" title="a标签"&gt;&lt;/a&gt;</span></div></pre></td></tr></table></figure>
<h3 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h3><p>删除 HTML 页面标签的指定属性。</p>
<p><strong><code>removeAttribute()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.removeAttribute( 属性名 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span> <span class="attr">title</span>=<span class="string">"a标签"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</div><div class="line"><span class="keyword">var</span> aAttr = aEle.removeAttribute(<span class="string">"title"</span>);</div><div class="line"><span class="built_in">console</span>.log( aEle );       <span class="comment">// &lt;a href="#" id="link"&gt;&lt;/a&gt;</span></div></pre></td></tr></table></figure>
<h3 id="判断是否含有属性"><a href="#判断是否含有属性" class="headerlink" title="判断是否含有属性"></a>判断是否含有属性</h3><p>判断 HTML 页面标签的是否含有属性。</p>
<p><strong><code>hasAttribute()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.hasAttribute( 属性名 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span> <span class="attr">title</span>=<span class="string">"a标签"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</div><div class="line"><span class="keyword">var</span> aAttr = aEle.hasAttribute(<span class="string">"title"</span>);</div><div class="line"><span class="built_in">console</span>.log( aAttr );    <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="操作内容"><a href="#操作内容" class="headerlink" title="操作内容"></a>操作内容</h2><h3 id="获取或更新文本"><a href="#获取或更新文本" class="headerlink" title="获取或更新文本"></a>获取或更新文本</h3><p><strong><code>nodeValue</code></strong></p>
<p>通过学习 DOM 查询我们知道，获取或更新文本就是对文本节点的操作。文本节点的 nodeValue 属性可以得到文本内容，也可以设置文本内容。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">文本节点.nodeValue</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span>&gt;</span> 我是一个 <span class="tag">&lt;<span class="name">i</span>&gt;</span>i标签<span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);<span class="comment">// 获取 &lt;a&gt; 标签</span></div><div class="line"><span class="keyword">let</span> aVal = aEle.firstChild.nodeValue;      <span class="comment">// 先获取 &lt;a&gt; 标签的文本节点，再获取文本节点中的文本内容</span></div><div class="line"><span class="built_in">console</span>.log( aVal );                       <span class="comment">// "我是一个"</span></div></pre></td></tr></table></figure>
<p><strong><code>innerText</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.innerText</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span>&gt;</span> 我是一个 <span class="tag">&lt;<span class="name">i</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span>i标签<span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</div><div class="line"><span class="comment">// 获取文本</span></div><div class="line"><span class="keyword">let</span> aText = aEle.innerText;</div><div class="line"><span class="built_in">console</span>.log( aText );                   <span class="comment">// "我是一个"</span></div><div class="line"><span class="comment">// 更新文本</span></div><div class="line">aEle.innerText = <span class="string">"我换了一个新文本"</span>;</div><div class="line"><span class="keyword">let</span> newText = aEle.innerText;</div><div class="line"><span class="built_in">console</span>.log( newText );                 <span class="comment">// "我换了一个新文本"</span></div></pre></td></tr></table></figure>
<p><strong><code>textContent</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.textContent</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span>&gt;</span> 我是一个 <span class="tag">&lt;<span class="name">i</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span>i标签<span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</div><div class="line"><span class="comment">// 获取文本</span></div><div class="line"><span class="keyword">let</span> aText = aEle.textContent;</div><div class="line"><span class="built_in">console</span>.log( aText );                  <span class="comment">// "我是一个i标签"</span></div><div class="line"><span class="comment">// 更新文本</span></div><div class="line">aEle.textContent = <span class="string">"我换了一个新文本"</span>;</div><div class="line"><span class="keyword">let</span> newText = aEle.textContent;</div><div class="line"><span class="built_in">console</span>.log( newText );                <span class="comment">// "我换了一个新文本"</span></div></pre></td></tr></table></figure>
<p>以上三个属性的对比：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fip2956ymaj315y094dhc.jpg" alt=""></p>
<p>注意：并不建议使用<code>innerText</code>属性，因为它并不属性任何标准，而且性能不好。</p>
<h3 id="获取或更新-HTML"><a href="#获取或更新-HTML" class="headerlink" title="获取或更新 HTML"></a>获取或更新 HTML</h3><p><strong><code>innerHTML</code></strong>：我们可以通过 innerHTML 属性来获取或更新 HTML 页面的指定标签所包含的 HTML 代码内容。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.innerHTML</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link"</span>&gt;</span> 我是一个 <span class="tag">&lt;<span class="name">i</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span>i标签<span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> aEle = <span class="built_in">document</span>.getElementById(<span class="string">"link"</span>);</div><div class="line"><span class="comment">// 获取 HTML</span></div><div class="line"><span class="keyword">let</span> aHtml = aEle.innerHTML;</div><div class="line"><span class="built_in">console</span>.log( aHtml );      <span class="comment">// "我是一个 &lt;i style="display: none"&gt;i标签&lt;/i&gt;"</span></div><div class="line"><span class="comment">// 更新 HTML</span></div><div class="line">aEle.innerHTML = <span class="string">"&lt;span&gt;我是a标签里的span标签&lt;/span&gt;"</span>;</div><div class="line"><span class="keyword">let</span> newHtml = aEle.innerHTML;</div><div class="line"><span class="built_in">console</span>.log( newHtml );    <span class="comment">// "&lt;span&gt;我是a标签里的span标签&lt;/span&gt;"</span></div></pre></td></tr></table></figure>
<p><strong><code>innerHTML</code>属性和 DOM 操作的优缺点：</strong></p>
<p>1）innerHTML 属性：</p>
<ul>
<li><p>优点：</p>
<ul>
<li>和 DOM 操作方法相比，可以使用更少的代码添加大量的新标签。</li>
<li>向页面中添加大量新元素时，速度比 DOM 操作更快。</li>
<li>当需要移除元素中的所有内容时，它更简单（直接设置一个空字符串即可）。</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>不应该用它来添加来自于用户输入的内容，因为存在安全隐患。</li>
<li>在添加一个很大的 DOM 片段时，这个方法很难独立区分出每一个元素。</li>
<li>事件处理程序可能不像预期那样生效。</li>
</ul>
</li>
</ul>
<p>2）DOM 操作：</p>
<ul>
<li><p>优点：</p>
<ul>
<li>如果 DOM 片段中拥有大量的兄弟节点，处理其中一个元素节点时使用这种方法更合适。</li>
<li>不会影响事件处理程序。</li>
<li>可以轻易地使用脚本来逐步添加元素。</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>如果需要对页面内容进行大量修改，它的速度比 innerHTML 属性更慢。</li>
<li>与使用 innerHTML 属性相比，它需要更多的代码来实现同样的功能。</li>
</ul>
</li>
</ul>
<h2 id="CSS-操作"><a href="#CSS-操作" class="headerlink" title="CSS 操作"></a>CSS 操作</h2><h3 id="操作内联样式"><a href="#操作内联样式" class="headerlink" title="操作内联样式"></a>操作内联样式</h3><p>HTML 页面标签的内联样式主要是通过 style 属性进行设置，所以 DOM 操作标签的内联样式也是通过 style 属性来完成的。</p>
<h4 id="设置内联样式"><a href="#设置内联样式" class="headerlink" title="设置内联样式"></a>设置内联样式</h4><p>想改变 HTML 页面标签的内联样式，我们可以通过以下方式实现。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.style.样式属性名 = 样式属性值</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">box.style.height = <span class="string">"100px"</span>;</div><div class="line">box.style.backgroundColor = <span class="string">"red"</span>;</div><div class="line"><span class="built_in">console</span>.log( box ); <span class="comment">// &lt;div id="box" style="height: 100px; background-color: red;"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>在修改例如<code>background-color</code>这样的 CSS 属性时，不能使用<code>element.style.background-color</code>这种方式，浏览器会解析成 JavaScript 的表达式。最终会报错。</p>
<blockquote>
<p>所有例如<code>background-color</code>这样的 CSS 属性在使用时，必须要改为驼峰式命名方式（例如 <code>backgroundColor</code>）。</p>
</blockquote>
<h4 id="设置多个内联样式"><a href="#设置多个内联样式" class="headerlink" title="设置多个内联样式"></a>设置多个内联样式</h4><p>上面<code>元素.style.样式属性名</code>的方式每次只能设置单个内联样式，当我们需要同时设置多个内联样式时，可以通过以下方法实现。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.style.cssText = 样式</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">box.style.cssText = <span class="string">"height: 100px; background-color: red;"</span></div><div class="line"><span class="built_in">console</span>.log( box ); <span class="comment">// &lt;div id="box" style="height: 100px; background-color: red;"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<h4 id="获取内联样式"><a href="#获取内联样式" class="headerlink" title="获取内联样式"></a>获取内联样式</h4><p>获取 HTML 页面标签的内联样式，我们同样可以通过以下方式实现。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.style.样式属性名</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"height: 100px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="built_in">console</span>.log( box.style.height );      <span class="comment">// 100px</span></div></pre></td></tr></table></figure>
<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p>内联样式<code>style</code>也是元素的一个属性，所以也可以通过前面提到的操作属性的方式来操作内联样式。</p>
<p><strong>设置内联样式</strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.setAttribute( <span class="string">"style"</span>, 样式 );</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">box.setAttribute(<span class="string">"style"</span>, <span class="string">"background-color:red"</span>);</div><div class="line"><span class="built_in">console</span>.log( box );      <span class="comment">// &lt;div id="box" style="background-color: red"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong>获取内联样式</strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.getAttribute( <span class="string">"style"</span> );</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"height: 100px"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="keyword">let</span> boxStyle = box.getAttribute(<span class="string">"style"</span>);</div><div class="line"><span class="built_in">console</span>.log( boxStyle )     <span class="comment">// "height: 100px"</span></div></pre></td></tr></table></figure>
<h3 id="操作样式表样式"><a href="#操作样式表样式" class="headerlink" title="操作样式表样式"></a>操作样式表样式</h3><p>通过<code>element.style</code>属性，我们只能获取内联样式内容，并不能获取 CSS （内部／外部）样式表内容。所以，我们还需要以下方法来获取样式表中的样式。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IE Chrome</span></div><div class="line"><span class="built_in">document</span>.styleSheets[样式表下标].rules[样式下标].style.样式属性名</div><div class="line"></div><div class="line"><span class="comment">// Firefox</span></div><div class="line"><span class="built_in">document</span>.styleSheets[样式表下标].cssRules[样式下标].style.样式属性名</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取样式</span></div><div class="line"><span class="keyword">let</span> myStyle = <span class="built_in">document</span>.styleSheets[<span class="number">0</span>].rules[<span class="number">0</span>].style.backgroundColor;</div><div class="line"><span class="built_in">console</span>.log( myStyle );       <span class="comment">// "red"</span></div><div class="line"></div><div class="line"><span class="comment">// 更新样式</span></div><div class="line"><span class="built_in">document</span>.styleSheets[<span class="number">0</span>].rules[<span class="number">0</span>].style.backgroundColor = <span class="string">"blue"</span>;</div></pre></td></tr></table></figure>
<h3 id="获取最终样式"><a href="#获取最终样式" class="headerlink" title="获取最终样式"></a>获取最终样式</h3><p>前面两种获取元素样式的方法，一个是获取内联样式，一个是获取样式表样式。但是，当一个元素身上两种样式都存在时，我们怎么确定用哪种方式去获取。所以，还有第三种方法，获取元素的最终样式，也就是元素最终在页面上显示的样式。</p>
<p><strong><code>getComputedStyle()</code></strong></p>
<p>我们可以通过这个方法获取 HTML 页面标签的当前样式内容（内联样式及外联样式）。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.getComputedStyle( 元素, <span class="literal">null</span> ).样式属性名</div></pre></td></tr></table></figure>
<p>因为<code>getComputedStyle()</code>方法会返回一个包含当前所有的 CSS 样式的对象，然后我们就可以再通过<code>object.样式属性名</code>的方式得到指定的样式属性值。</p>
<p>例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="keyword">let</span> myStyle = <span class="built_in">window</span>.getComputedStyle( box, <span class="literal">null</span> ).height;</div><div class="line"><span class="built_in">console</span>.log( myStyle );       <span class="comment">// "100px"</span></div></pre></td></tr></table></figure>
<p><strong><code>currentStyle</code></strong></p>
<p>IE 8 及之前版本的浏览器并不支持<code>getComputedStyle()</code>方法。如果，在 IE 8 及之前版本的浏览器，我们需要使用这个属性实现。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">元素.currentStyle.属性样式名</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box</span>&#123;</div><div class="line">    <span class="attribute">background-color</span>: red;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="keyword">let</span> myStyle = box.currentStyle.height;</div><div class="line"><span class="built_in">console</span>.log( myStyle );       <span class="comment">// "100px"</span></div></pre></td></tr></table></figure>
<p><strong>提供兼容方案</strong></p>
<p>用户既可能使用 IE 8 及之前的版本，也可能使用 IE 9 及之后的版本，还可能使用其他浏览器。所以，我们在实际开发中，需要提供一个全浏览器兼容的解决方案。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, attrName</span>)</span>&#123;</div><div class="line">    <span class="comment">// 判断 window.getComputedStyle() 方法是否存在</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.getComputedStyle)&#123;</div><div class="line">        <span class="keyword">return</span> getComputedStyle(elem, <span class="literal">null</span>)[attrName];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> elem.currentStyle[attrName];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取元素尺寸"><a href="#获取元素尺寸" class="headerlink" title="获取元素尺寸"></a>获取元素尺寸</h3><h4 id="获取可见尺寸"><a href="#获取可见尺寸" class="headerlink" title="获取可见尺寸"></a>获取可见尺寸</h4><p>获取 HTML 页面标签的可见宽度和高度的属性如下：</p>
<ul>
<li>可见宽度：<code>clientWidth</code></li>
<li>可见高度：<code>clientHeight</code></li>
</ul>
<p>例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid black;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">11px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">12px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="built_in">console</span>.log( box.clientWidth );      <span class="comment">// 122</span></div><div class="line"><span class="built_in">console</span>.log( box.clientHeight );     <span class="comment">// 122</span></div></pre></td></tr></table></figure>
<p>说明：</p>
<p>可见宽度的值实际上是标签的宽度，再加上内边距的宽度的值。我们可以总结出如下公式:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clientWidth = width + padding-left + padding-right</div></pre></td></tr></table></figure>
<h4 id="获取实际尺寸"><a href="#获取实际尺寸" class="headerlink" title="获取实际尺寸"></a>获取实际尺寸</h4><p>获取 HTML 页面标签的实际宽度和高度的属性如下:</p>
<ul>
<li>宽度: <code>offsetWidth</code></li>
<li>高度: <code>offsetHeight</code></li>
</ul>
<p>例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid black;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">11px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">12px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="built_in">console</span>.log( box.offsetWidth );       <span class="comment">// 142</span></div><div class="line"><span class="built_in">console</span>.log( box.offsetHeight );      <span class="comment">// 142</span></div></pre></td></tr></table></figure>
<p>说明：</p>
<p>可见宽度的值实际上是标签的宽度，再加上内边距的宽度的值。我们可以总结出如下公式:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">offsetWidth = width + padding-left + padding-right + border-width</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> DOM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dom </tag>
            
            <tag> element </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM - Node 对象]]></title>
      <url>/2017/08/19/node/</url>
      <content type="html"><![CDATA[<p>Node 对象，也就是 DOM 中的节点对象。关于节点对象的名称、值和类型等等知识点，我们在前面<a href="https://runjaelyn.github.io/2017/07/18/dom/" target="_blank" rel="external">《DOM 文档对象模型》</a>中已经讲过了。</p>
<p>所以这篇文章主要是汇总讲一些操作 DOM 节点的方法。</p>
<a id="more"></a>
<h2 id="遍历节点"><a href="#遍历节点" class="headerlink" title="遍历节点"></a>遍历节点</h2><h3 id="获取父节点"><a href="#获取父节点" class="headerlink" title="获取父节点"></a>获取父节点</h3><p>通过 HTML 页面的指定标签查找其父节点。</p>
<p><strong><code>parentNode</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">子节点.parentNode</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sonNode = <span class="built_in">document</span>.getElementById(<span class="string">"son"</span>);</div><div class="line"><span class="keyword">let</span> fatherNode = sonNode.parentNode;</div><div class="line"><span class="built_in">console</span>.log( fatherNode );      <span class="comment">// &lt;div id="father"&gt;...&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<h3 id="获取子节点"><a href="#获取子节点" class="headerlink" title="获取子节点"></a>获取子节点</h3><p>通过 HTML 页面的指定标签查找其子节点。</p>
<p><strong><code>firstChild</code></strong>：获取指定标签的第一个子节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父节点.firstChild</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fatherNode = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);</div><div class="line"><span class="keyword">var</span> sonNode = fatherNode.firstChild;</div><div class="line"><span class="built_in">console</span>.log( sonNode );      <span class="comment">// #text</span></div></pre></td></tr></table></figure>
<p><strong><code>lastChild</code></strong>：获取指定标签的最后一个子节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父节点.lastChild</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fatherNode = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);</div><div class="line"><span class="keyword">var</span> sonNode = fatherNode.lastChild;</div><div class="line"><span class="built_in">console</span>.log( sonNode );      <span class="comment">// #text</span></div></pre></td></tr></table></figure>
<p><strong><code>childNodes</code></strong>：获取指定标签的所有子节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父节点.childNodes</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fatherNode = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);</div><div class="line"><span class="keyword">var</span> sonNode = fatherNode.childNodes;</div><div class="line"><span class="built_in">console</span>.log( sonNode );      <span class="comment">// [text, div#son1, text, div#son2, text, div#son3, text]</span></div></pre></td></tr></table></figure>
<p>注意：以上三种方法获取出来的子节点都包含了<code>#text</code>。我们通过前面讲的节点类型可以知道，<code>#text</code>表示的是文本节点。也就是说，换行符或者空格符都属于文本节点。</p>
<p>想要只获取到元素节点，那么其中一个解决办法就是写 html 代码时不要换行和空格：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fatherNode = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);</div><div class="line"><span class="keyword">var</span> sonNode = fatherNode.childNodes;</div><div class="line"><span class="built_in">console</span>.log( sonNode );       <span class="comment">// [div#son1, div#son2, div#son3]</span></div></pre></td></tr></table></figure>
<p>但是这种方法对于我们来说并不适用，规范的代码格式才更有利于我们后期对代码的维护和修改。所以后面在<a href="https://runjaelyn.github.io/2017/08/19/element/" target="_blank" rel="external">《DOM - Element 对象》</a>中我们还有其他解决办法。</p>
<h3 id="获取兄弟节点"><a href="#获取兄弟节点" class="headerlink" title="获取兄弟节点"></a>获取兄弟节点</h3><p>通过 HTML 页面的指定标签查找兄弟节点。</p>
<p><strong><code>previousSibling</code></strong>：获取指定节点的前一个兄弟节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">兄弟节点.previousSibling</div></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> brother2Node = <span class="built_in">document</span>.getElementById(<span class="string">"brother2"</span>);</div><div class="line"><span class="keyword">var</span> brotherNode = brother2Node.previousSibling;</div><div class="line"><span class="built_in">console</span>.log( brotherNode );                     <span class="comment">// #text</span></div><div class="line"><span class="built_in">console</span>.log( brotherNode.previousSibling );     <span class="comment">// &lt;div id="brother1"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong><code>nextSibling</code></strong>：获取指定节点的后一个兄弟节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">兄弟节点.nextSibling</div></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"brother3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> brother2Node = <span class="built_in">document</span>.getElementById(<span class="string">"brother2"</span>);</div><div class="line"><span class="keyword">var</span> brotherNode = brother2Node.nextSibling;</div><div class="line"><span class="built_in">console</span>.log( brotherNode );                 <span class="comment">// #text</span></div><div class="line"><span class="built_in">console</span>.log( brotherNode.nextSibling );     <span class="comment">// &lt;div id="brother3"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<h2 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h2><p>要将一个节点插入到页面中的某个位置，我们可以通过如下方法实现：</p>
<p><strong><code>appendChild()</code></strong>：将一个节点作为最后一个子元素添加到指定父节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父节点.appendChild( 子节点 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> divNode = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line"><span class="built_in">document</span>.body.appendChild( divNode );</div></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fib8vmtmywj30um0du75x.jpg" alt=""></p>
<p>从上面结果可以看到，新创建的<code>&lt;div&gt;</code>元素作为<code>&lt;body&gt;</code>的最后一个子元素插入到了页面上。</p>
<p><strong><code>insertBefore()</code></strong>：在父节点的某个已有的子节点之前再插入一个子节点。</p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父节点.insertBefore( 新子节点, 旧子节点 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> divNode = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);     <span class="comment">// 创建 div </span></div><div class="line"><span class="built_in">document</span>.body.appendChild( divNode );            <span class="comment">// 将其插入到 body 的末尾</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> aNode = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);         <span class="comment">// 创建 a </span></div><div class="line"><span class="built_in">document</span>.body.insertBefore( aNode, divNode );    <span class="comment">// 将其插入到 div 之前</span></div></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fib9k9484uj317s0o2tch.jpg" alt=""></p>
<p>从上面结果可以看到，新创建的<code>&lt;a&gt;</code>标签作为<code>&lt;body&gt;</code>的子元素插入到了前面新建的<code>&lt;div&gt;</code>之前。</p>
<h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p>从 HTML 页面中删除指定元素节点（标签）。</p>
<p><strong><code>removeChild()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父节点.removeChild( 子节点 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> father = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);     <span class="comment">// 获取父节点</span></div><div class="line"><span class="keyword">var</span> son = <span class="built_in">document</span>.getElementById(<span class="string">"son"</span>);           <span class="comment">// 获取子节点</span></div><div class="line">father.removeChild( son );                          <span class="comment">// 删除子节点</span></div></pre></td></tr></table></figure>
<h2 id="替换节点"><a href="#替换节点" class="headerlink" title="替换节点"></a>替换节点</h2><p>将 HTML 页面中指定元素节点（标签）替换掉。</p>
<p><strong><code>replaceChild()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">父节点.replaceChild( 新子节点, 旧子节点 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> father = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);    <span class="comment">// 获取父节点</span></div><div class="line"><span class="keyword">var</span> son = <span class="built_in">document</span>.getElementById(<span class="string">"son"</span>);          <span class="comment">// 获取已有子节点</span></div><div class="line"><span class="keyword">var</span> newChild = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);        <span class="comment">// 创建新节点</span></div><div class="line">father.replaceChild( newChild, son );              <span class="comment">// 新节点替换已有旧子节点</span></div></pre></td></tr></table></figure>
<h2 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h2><p>将 HTML 页面中指定元素节点（标签）进行复制。</p>
<p><strong><code>cloneNode()</code></strong></p>
<p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">选中节点.cloneNode( 布尔值 )</div></pre></td></tr></table></figure>
<p>说明：<code>cloneNode()</code>方法的参数<code>boolean</code>表示是否采用深度克隆。如果为<code>true</code>，则该节点的所有后代节点也都会被克隆；如果为<code>false</code>，则只克隆该节点本身。</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> father = <span class="built_in">document</span>.getElementById(<span class="string">"father"</span>);    <span class="comment">// 获取节点</span></div><div class="line"><span class="keyword">var</span> newFather = father.cloneNode( <span class="literal">true</span> );          <span class="comment">// 复制已获取节点</span></div><div class="line"><span class="built_in">document</span>.body.appendChild( newFather );            <span class="comment">// 将复制好的新节点添加到 body 中</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> DOM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dom </tag>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM - Document 对象]]></title>
      <url>/2017/08/18/document/</url>
      <content type="html"><![CDATA[<p>Document 对象表示浏览器加载的 HTML 页面，并作为查找 HTML 页面内容的入口。它提供了全局函数，例如如何从 HTML 页面中查找指定标签或者在 HTML 页面中如何创建标签等。</p>
<a id="more"></a>
<p>我们通过如下代码来查看<code>document</code>对象：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( <span class="built_in">document</span> );</div></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fib7kogp32j30qo0ci3zk.jpg" alt=""></p>
<p>通过上面的测试结果，我们可以很清晰地看到，通过<code>document</code>对象可以得到整个 HTML 页面。所以，DOM 中很多的 API 都需要依赖<code>document</code>对象。</p>
<h2 id="DOM-查询（获取元素节点）"><a href="#DOM-查询（获取元素节点）" class="headerlink" title="DOM 查询（获取元素节点）"></a>DOM 查询（获取元素节点）</h2><p>获取元素节点的方法有很多，这里我们总结了常用的五种方法如下：</p>
<h3 id="id-属性值"><a href="#id-属性值" class="headerlink" title="id 属性值"></a>id 属性值</h3><p>通过标签的 id 属性值来获取元素。语法结构如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById( id属性值 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="built_in">console</span>.log( box );        <span class="comment">// &lt;div id="box"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<h3 id="class-属性值"><a href="#class-属性值" class="headerlink" title="class 属性值"></a>class 属性值</h3><p>通过标签的 class 属性值来获取元素。语法结构如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementsByClassName( <span class="class"><span class="keyword">class</span>属性值 )</span></div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>);</div><div class="line"><span class="built_in">console</span>.log( box );        <span class="comment">// [div.box]</span></div><div class="line"><span class="built_in">console</span>.log( box[<span class="number">0</span>] );     <span class="comment">// &lt;div class="box"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p>从上面代码结果可以看到，通过<code>class</code>获取到的元素结果是一个数组的形式。所以，如果要具体得到某一个元素，我们最终还需要通过数组下标去获取。</p>
<h3 id="标签名"><a href="#标签名" class="headerlink" title="标签名"></a>标签名</h3><p>通过标签名来获取元素。语法结构如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementsByTagName( 标签名 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</div><div class="line"><span class="built_in">console</span>.log( divEle );        <span class="comment">// [div]</span></div><div class="line"><span class="built_in">console</span>.log( divEle[<span class="number">0</span>] );     <span class="comment">// &lt;div&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p>从上面代码结果可以看到，通过标签名获取到的元素结果也是一个数组的形式。所以，如果要具体得到某一个元素，我们最终还需要通过数组下标去获取。</p>
<h3 id="name-属性值"><a href="#name-属性值" class="headerlink" title="name 属性值"></a>name 属性值</h3><p>通过标签的 name 属性值来获取元素。语法结构如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementsByName( name属性值 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementsByName(<span class="string">"username"</span>);</div><div class="line"><span class="built_in">console</span>.log( divEle );       <span class="comment">// [input]</span></div><div class="line"><span class="built_in">console</span>.log( divEle[<span class="number">0</span>] );    <span class="comment">// &lt;input type="text" name="username"&gt;</span></div></pre></td></tr></table></figure>
<p>从上面代码结果可以看到，通过<code>name</code>属性获取到的元素结果也是一个数组的形式。所以，如果要具体得到某一个元素，我们最终还需要通过数组下标去获取。</p>
<h3 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h3><p>在 HTML5 新特性中提供了两个可以通过 CSS 选择器方式来获取 HTML 页面标签的方法：</p>
<p><strong><code>querySelector()</code></strong></p>
<p>返回第一个选择器匹配的 HTML 页面元素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> boxEle = <span class="built_in">document</span>.querySelector(<span class="string">".box"</span>);</div><div class="line"><span class="built_in">console</span>.log( boxEle );      <span class="comment">// &lt;div class="box"&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p><strong><code>querySelectorAll()</code></strong></p>
<p>返回全部选择器匹配的 HTML 页面元素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> boxEle = <span class="built_in">document</span>.querySelectorAll(<span class="string">".box"</span>);</div><div class="line"><span class="built_in">console</span>.log( boxEle );      <span class="comment">// [div.box, div.box]</span></div></pre></td></tr></table></figure>
<p>注意：这两个方法只能在 IE8 之后的版本才执行。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>DOM 查询方法我们大致可以分为以下两类：</p>
<p>1）传统方式：<code>getElementById</code>、<code>getElementsByClassName</code>、<code>getElementsByTagName</code>、<code>getElementsByName</code></p>
<ul>
<li>优点：性能好、查询速度快</li>
<li>缺点：使用麻烦</li>
</ul>
<p>2）HTML5 新增：<code>querySelector</code>、<code>querySelectorAll</code></p>
<ul>
<li>优点：使用便捷</li>
<li>缺点：性能差、查询速度慢 </li>
</ul>
<h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><h3 id="创建元素节点"><a href="#创建元素节点" class="headerlink" title="创建元素节点"></a>创建元素节点</h3><p>通过<code>document</code>对象创建一个新的元素节点（标签），语法格式如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.createElement( 标签名 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> divEle = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</div><div class="line"><span class="built_in">console</span>.log( divEle );    <span class="comment">// &lt;div&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p>从上面例子可以看到，我们创建出了一个<code>&lt;div&gt;</code>标签。</p>
<p>这个时候我们再输出<code>document</code>对象查看整个 HTML 页面内容：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fioalwmjujj314u0dk407.jpg" alt=""></p>
<p>可以看到，在我们的<code>body</code>标签内并没有发现刚刚创建出来的<code>&lt;div&gt;</code>标签。为什么呢？</p>
<p>因为我们只是创建了这个标签，但并没有指定这个<code>&lt;div&gt;</code>标签创建出来后要添加到哪个地方，所以这个时候在页面上是找不到这个这个标签的。</p>
<p>想要把这个新建出来的标签显示出来，我们还需要用到后面<a href="https://runjaelyn.github.io/2017/08/18/node/" target="_blank" rel="external">《DOM - Node 对象》</a>中的<code>appendChild()</code>方法把它插入到页面上去。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">divEle.appendChild( <span class="built_in">document</span>.body );</div></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fioak5yj25j314u0fadi0.jpg" alt=""></p>
<h3 id="创建文本节点"><a href="#创建文本节点" class="headerlink" title="创建文本节点"></a>创建文本节点</h3><p>元素创建出来了，但是元素里面没有文本内容。通过<code>document</code>对象创建一个新的文本节点（文本内容），语法格式如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.createTextNode( 文本内容 )</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> divEle = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);             <span class="comment">// 创建 &lt;div&gt; </span></div><div class="line"><span class="built_in">document</span>.body.appendChild( divEle );                    <span class="comment">// 将其插入到 &lt;body&gt; 的末尾</span></div><div class="line">	</div><div class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">"hello world"</span>);      <span class="comment">// 创建文本"hello world"</span></div><div class="line">divEle.appendChild( text );                             <span class="comment">// 将其插入到 &lt;div&gt; 中</span></div></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fiba0yisyyj316s0latcg.jpg" alt=""></p>
<p>从上面结果可以看到，<code>&lt;body&gt;</code>末尾新增了一个<code>&lt;div&gt;</code>标签并带有文字内容<code>hello world</code>。</p>
<h3 id="创建属性节点"><a href="#创建属性节点" class="headerlink" title="创建属性节点"></a>创建属性节点</h3><p>通过<code>document</code>对象创建一个新的属性节点，语法格式如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.createAttribute( 属性名称 )</div></pre></td></tr></table></figure>
<p>注意：由于属性节点并不是子节点，在实际开发中，创建属性节点使用的场景很少，只需要了解即可。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> node = <span class="built_in">document</span>.getElementById(<span class="string">"div"</span>);       <span class="comment">// 获取 &lt;div&gt; 标签</span></div><div class="line"><span class="keyword">let</span> attr = <span class="built_in">document</span>.createAttribute(<span class="string">"my_attr"</span>);  <span class="comment">// 创建属性节点</span></div><div class="line">attr.nodeValue = <span class="string">"属性值"</span>;                        <span class="comment">// 设置属性节点的 nodeValue</span></div><div class="line">node.setAttributeNode( attr );                   <span class="comment">// 将属性节点添加到 &lt;div&gt; 标签中</span></div></pre></td></tr></table></figure>
<h2 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h2><h3 id="缓存-DOM-查询"><a href="#缓存-DOM-查询" class="headerlink" title="缓存 DOM 查询"></a>缓存 DOM 查询</h3><p>当我们通过 DOM 查询获取 HTML 页面中指定的标签后，如果需要多次操作同一个标签时，应该使用一个变量来保存 DOM 查询的结果。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> divEle = <span class="built_in">document</span>.getElementById(<span class="string">"div"</span>);            <span class="comment">// 获取 &lt;div&gt; 标签</span></div><div class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(<span class="string">"hello world"</span>);      <span class="comment">// 创建一个文本节点</span></div><div class="line">divEle.appendChild( text );                             <span class="comment">// 将文本节点添加到 &lt;div&gt; 节点中</span></div></pre></td></tr></table></figure>
<p>当把 DOM 查询的结果保存在一个变量后，实际上是把获取的指定标签在 DOM 节点树中的位置保存在变量中。这个元素节点（标签）的属性和方法可以通过这个变量来使用。</p>
<h3 id="动态和静态-NodeList"><a href="#动态和静态-NodeList" class="headerlink" title="动态和静态 NodeList"></a>动态和静态 NodeList</h3><p>NodeList 是指一组元素节点的集合，每个节点都有索引值（从 0 开始的数字，类似数组）。元素节点在 NodeList 中保存的顺序和它们在 HTML 页面中出现的顺序一致。</p>
<p>我们前面讲了六种 DOM 查询的方法，其中以下四种查询方法返回的就是一个 NodeList 集合:</p>
<ul>
<li><code>getElementsByName()</code></li>
<li><code>getElementsByTagName()</code></li>
<li><code>getElementsByClassName()</code></li>
<li><code>querySelectorAll()</code></li>
</ul>
<p>通过 NodeList 集合我们可以根据下标从中选择需要操作的元素，也可以遍历 NodeList 中的每个元素。</p>
<h4 id="动态-NodeList"><a href="#动态-NodeList" class="headerlink" title="动态 NodeList"></a>动态 NodeList</h4><p>通过<code>getElementsByName()</code>、<code>getElementsByTagName()</code>和<code>getElementsByClassName()</code>方法获取的 NodeList 就是动态的 NodeList。</p>
<p>在动态 NodeList 中，当脚本更新 HTML 页面之后，NodeList 也会同样进行更新。例如如下示例:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);       <span class="comment">// 获取所有的 li 元素</span></div><div class="line"><span class="built_in">console</span>.log( lis );                                  <span class="comment">// [ li, li, li, li ]    </span></div><div class="line"><span class="keyword">let</span> ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"ul"</span>)[<span class="number">0</span>];     <span class="comment">// 获取 ul 元素</span></div><div class="line"><span class="keyword">let</span> newLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);            <span class="comment">// 创建一个新的 li 元素</span></div><div class="line">ul.appendChild( newLi );                             <span class="comment">// 将新 li 添加到 ul 内</span></div><div class="line"><span class="built_in">console</span>.log( lis );                                  <span class="comment">// [ li, li, li, li, li ]</span></div></pre></td></tr></table></figure>
<h4 id="静态-NodeList"><a href="#静态-NodeList" class="headerlink" title="静态 NodeList"></a>静态 NodeList</h4><p>通过<code>querySelectorAll()</code>方法获取的 NodeList 就是动态的 NodeList。</p>
<p>在动态 NodeList 中，当脚本更新 HTML 页面之后，NodeList 也不会进行更新。例如如下示例:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">"li"</span>);           <span class="comment">// 获取所有的 li 元素</span></div><div class="line"><span class="built_in">console</span>.log( lis );                                  <span class="comment">// [ li, li, li, li ]    </span></div><div class="line"><span class="keyword">let</span> ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"ul"</span>)[<span class="number">0</span>];     <span class="comment">// 获取 ul 元素</span></div><div class="line"><span class="keyword">let</span> newLi = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);            <span class="comment">// 创建一个新的 li 元素</span></div><div class="line">ul.appendChild( newLi );                             <span class="comment">// 将新 li 添加到 ul 内</span></div><div class="line"><span class="built_in">console</span>.log( lis );                                  <span class="comment">// [ li, li, li, li ]</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> DOM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dom </tag>
            
            <tag> document </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM 文档对象模型]]></title>
      <url>/2017/07/18/dom/</url>
      <content type="html"><![CDATA[<p>应用程序开发过程中，程序不是直接对 HTML 文档进行操作的，而是首先由 HTML 分析器对 HTML 文档进行分析。然后，应用程序通过 HTML 分析器所提供的 DOM 接口对分析结果进行操作，从而间接的实现了对 HTML 文档的操作。</p>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h3><p>W3C 制定了一套书写 HTML 分析器的标准接口规范 – <strong>DOM</strong>。</p>
<p>DOM 的全称是 Document Object Model，译为<strong>文档对象模型</strong>。说的通俗一点，DOM 就是为 HTML 文档提供的一个API（接口）。提供这个接口有什么用呢？有了这个接口，我们就可以去操作 HTML 文档了。</p>
<blockquote>
<p>文档代表的是数据，而 DOM 则代表了如何去处理这些数据。简言之，它会将 Web 页面和脚本或程序语言连接起来。</p>
</blockquote>
<h3 id="为什么要使用DOM"><a href="#为什么要使用DOM" class="headerlink" title="为什么要使用DOM"></a>为什么要使用DOM</h3><p>相比起一成不变的静态页面，大家更喜欢动态化的 HTML 文档。而 JavaScript，就可以满足大家对动态化文档的需求。</p>
<p>通过 JavaScript，我们可以重构整个 HTML 文档，可以添加、删除、修改或重排页面上的项目。但是，JavaScript 并不能直接操作我们的文档。想要改变 HTML 中的某一个元素，JavaScript 需要找到访问该元素的入口。这个入口，连同对 HTML 元素进行一系列操作的方法和属性，都是通过文档对象模型（DOM）来获得的。</p>
<h3 id="DOM-的发展历程"><a href="#DOM-的发展历程" class="headerlink" title="DOM 的发展历程"></a>DOM 的发展历程</h3><p>DOM 的级别包含了从第 0 级到第 3 级。（注：第 0 级和第 3 级并不是 W3C 的标准）</p>
<p>（1）<strong>DOM 0 级</strong>: 定义了 Document 对象的一些属性和方法。</p>
<p>（2）<strong>DOM 1 级</strong>：是 W3C 在 1998 年 10 月提出的第一个正式的 W3C DOM 标准。</p>
<ul>
<li><code>DOM Core</code>（核心）：提供了 DOM 模型、内存管理、命名约定等方便访问和操作 HTML 页面的内容。</li>
<li><code>DOM HTML</code>：提供了一些 HTML 页面相关的对象以及 HTML 标签的属性和方法等。</li>
<li>注意：DOM 1 级中忽略了事件模型。</li>
</ul>
<p>（3）<strong>DOM 2 级</strong>：是基于 DOM 1 级并且扩展了 DOM 1 级，还添加了视图、事件以及 CSS 样式的内容。</p>
<ul>
<li><code>DOM View</code>：描述 HTML 文档的各种视图的接口。</li>
<li><code>DOM Events</code>：描述了事件流、事件监听注册、事件接口以及文档事件接口等内容。</li>
<li><code>DOM Style</code>：描述了 CSS 样式的接口。</li>
<li><code>DOM Traversal and Range</code>：描述遍历和操作 HTML 文档的接口。</li>
</ul>
<p>（4）<strong>DOM 3 级</strong>：引入了统一的文档读取和保存的方法，</p>
<ul>
<li><code>DOM Load and Save</code>：描述了文档的读取和保存的接口。</li>
<li><code>DOM Validation</code>：描述了文档验证的接口。</li>
<li>注意：DOM 3 级的引入的主要是对 XML 文档的支持，对于 HTML 文档的用处并不大。</li>
</ul>
<h3 id="DOM-的组成"><a href="#DOM-的组成" class="headerlink" title="DOM 的组成"></a>DOM 的组成</h3><ul>
<li><code>Core DOM</code>：也称核心 DOM 编程，定义了一套标准针对任何结构化文档的对象，包括HTML。 </li>
<li><code>XML DOM</code>：定义了一套标准的针对 XML 文档的对象。 </li>
<li><code>HTML DOM</code>：定义了一套标准的针对 HTML 文档的对象。</li>
</ul>
<h2 id="DOM-节点"><a href="#DOM-节点" class="headerlink" title="DOM 节点"></a>DOM 节点</h2><h3 id="DOM-节点树结构"><a href="#DOM-节点树结构" class="headerlink" title="DOM 节点树结构"></a>DOM 节点树结构</h3><p>DOM 将 HTML 页面表示为一个树形结构，方便访问和操作 HTML 页面中的内容。具体如何表示，我们可以通过以下示例来理解。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> DOM 节点树 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> hello world <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fi7h5l70msj31680vkn20.jpg" alt=""></p>
<p>当浏览器加载 HTML 页面时，就会创建这个 HTML 页面的模型。这个模型就叫做 DOM 树结构。</p>
<h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>节点<code>node</code>是个网络术语，表示网络中的连接点。一个网络是由各种不同的节点构成的集合。</p>
<p>在 DOM 树结构中主要由以下四种节点组成：</p>
<ul>
<li>文档节点：表示整个 HTML 页面（相当于<code>document</code>对象）。当需要访问任何标签、属性或文本时，都可以通过文档节点进行导航。</li>
<li>元素节点：表示 HTML 页面中的标签（即 HTML 页面的结构）。当访问 DOM 树时，需要从查找元素节点（标签）开始。</li>
<li>文本节点：表示 HTML 页面中的标签所包含的文本内容。</li>
<li>属性节点：表示 HTML 页面中的开始标签包含的属性。</li>
</ul>
<p>附：代码注释也是一个注释节点，但一般情况不作考虑。</p>
<p>注意：在 DOM 树结构中，属性节点比较特殊，它并不是所有元素节点的子节点。</p>
<p>根据节点的分类，前面的 DOM 树结构就可以更详细的表示为如下示例。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fi7j1z4ppgj31820y6n3j.jpg" alt=""></p>
<h3 id="判断节点类型"><a href="#判断节点类型" class="headerlink" title="判断节点类型"></a>判断节点类型</h3><p>当通过 DOM 节点树获取 HTML 页面的某个节点时，我们如何可以判断出当前节点时哪种类型的呢？</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fio8kq8dxcj314y0aq0u9.jpg" alt=""></p>
<h2 id="DOM-API"><a href="#DOM-API" class="headerlink" title="DOM API"></a>DOM API</h2><p>W3C 提供的 DOM 标准通过一系列对象实现，其中主要以 Document 对象、Element 对象和 Node 对象为主。</p>
<p>我们学习 DOM 标准的 API 内容，也主要通过 Document 对象、Element 对象和 Node 对象这三个对象学习。</p>
<ul>
<li><a href="https://runjaelyn.github.io/2017/08/18/document/" target="_blank" rel="external">DOM - Document 对象</a></li>
<li><a href="https://runjaelyn.github.io/2017/08/19/node/" target="_blank" rel="external">DOM - Node 对象</a></li>
<li><a href="https://runjaelyn.github.io/2017/08/19/element/" target="_blank" rel="external">DOM - Element 对象</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> DOM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[创建 Github 个人博客(三)：设置 hexo 博客主题]]></title>
      <url>/2017/07/15/themeBlog/</url>
      <content type="html"><![CDATA[<p>之前写了两篇文章来教大家怎么去创建 GitHub 个人博客，然后再怎么配合 hexo 去开发博客。<br><a id="more"></a></p>
<ul>
<li><a href="https://runjaelyn.github.io/2017/06/09/signupBlog/" target="_blank" rel="external">创建 Github 个人博客(一)：搭建博客基础页面</a> </li>
<li><a href="https://runjaelyn.github.io/2017/06/25/hexoBlog/" target="_blank" rel="external">创建 Github 个人博客(二)：配合使用 hexo 开发博客</a>  </li>
</ul>
<p>本来这个教程到此也差不多结束了。但是后来有些笨鸡娃子找到我说，不会设置博客主题，所以还是决定再写最后一篇教程讲一下怎么去用 hexo 去设置博客的主题。</p>
<h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><p>在设置主题之前，首先需要去找一款喜欢的主题样式。hexo 有自己的博客主题官网 <a href="https://hexo.io/themes/" target="_blank" rel="external">Themes | Hexo</a>，可以在官网里去找喜欢的主题样式。百度上也可以搜到一些开发者们自己写的一些好看主题。具体的自行百度，随便一搜就出来很多了。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fi147brqq9j30w20fan17.jpg" alt=""></p>
<p>选择好主题后，找到该主题的地址。我们用官网的一个主题为例：</p>
<p>（1）点击主题名字进入主题详情页面。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhzlcff7x5j31kw0th47f.jpg" alt=""></p>
<ul>
<li><p>详情页面里有一个<code>README.md</code>的主题说明的文档。大部分的主题在这个文档里都会有下载安装配置的流程说明。</p>
<p>  <img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhzlgmy5d8j31ia0voq74.jpg" alt=""></p>
<p>  例如我们当前选择的这个主题，详情页面往下拉就能看到下载安装主题需要执行的相关命令，直接按照文档里给出的命令依次去执行就可以了。</p>
<p>  如果遇到文档没有写安装教程的，或者 … 看不懂英文的 … 那就继续看我们这个教程的下一步吧。</p>
</li>
</ul>
<p>（2）点击详情页面的绿色按钮，复制红框中的主题地址。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fhzjm91vxmj31kw0p77ac.jpg" alt=""></p>
<p>在其他网站找的主题也一样的会有一个主题的地址，同样的复制下来就行。</p>
<h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p>有了主题地址之后，接下来我们就可以开始安装了。</p>
<p>（1）打开命令行工具，进入到你的博客文件夹。然后执行以下格式的命令，将选中的主题克隆下来。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone <span class="string">"url"</span> themes/<span class="string">"themeName"</span>    <span class="comment">// 不要复制这一行！！！看下面解释！！！</span></div></pre></td></tr></table></figure>
<ul>
<li><code>&quot;url&quot;</code>就是我们刚刚复制的主题地址。</li>
<li><code>&quot;themeName&quot;</code>是我们当前选择的主题名字</li>
</ul>
<p>将你找到的主题地址和主题名字替换掉上面的<code>&quot;url&quot;</code>和<code>&quot;themeName&quot;</code>。</p>
<p>例如我们刚刚在官网找到的那个主题，执行命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/levblanc/hexo-theme-aero-dual.git themes/aero-dual</div></pre></td></tr></table></figure>
<ul>
<li><code>themes/aero-dual</code>前面的<code>themes</code>是存储所有主题文件的文件夹名字，<code>aero-dual</code>是当前主题文件夹的名字，也是当前主题的名字。</li>
</ul>
<p>（2）看到出现类似下面这种 100% 的命令，就表示主题下载成功了。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhzjxhuws9j311m05o412.jpg" alt=""></p>
<p>（3）下载成功之后，在我们的博客文件目录就可以看到我们刚刚下载好的主题文件。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fi14mvl2jjj30wg06mq3x.jpg" alt=""></p>
<p>（4）用编辑器打开博客文件目录中的<code>_config.yml</code>文件。将主题配置改为当前选择的主题名字。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Extensions</span></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></div><div class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></div><div class="line"><span class="attr">theme:</span> <span class="string">aero-dual</span></div></pre></td></tr></table></figure>
<p>（5）通过命令进入到当前主题文件夹，例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/aero-dual</div></pre></td></tr></table></figure>
<p><code>aero-dual</code>这是我的主题名字！你们自己换成你们自己选择的主题名字。</p>
<p>（6）然后再执行下面的代码，将当前更改的信息进行合并。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure>
<p>（7）最后，主题配置完成。执行以下命令重新部署整个博客。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>好，完成。重新打开博客就可以发现新的主题已经生效了。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhzqf6q16dj31kw10bgzu.jpg" alt=""></p>
<h2 id="功能配置"><a href="#功能配置" class="headerlink" title="功能配置"></a>功能配置</h2><p>到上一步，我们的主题其实就已经安装好了。博客基本上也可以正常使用了。</p>
<p>但是有的时候，博客或者主题的一些默认配置并不是我们想要的，所以我们还可以根据自己的需求去更改一些配置。这里简单梳理几个常用的配置信息。</p>
<h3 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h3><p>找到博客目录下的<code>_config.yml</code>文件。</p>
<p>注意：以下所有配置，冒号后面都要有一个空格。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span>                       <span class="comment">## 博客主标题 </span></div><div class="line"><span class="attr">subtitle:</span>                    <span class="comment">## 博客副标题  </span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>              <span class="comment">## 语言 中文</span></div></pre></td></tr></table></figure>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>每一个主题的文件目录下也都有一个<code>_config.yml</code>文件，这个就是主题配置文件。不同的主题配置信息也不一样。</p>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p><strong>文章摘要</strong></p>
<p>有一些主题博客首页默认显示全文，如果只希望现实某一个段落在首页，可以在文章内容中插入<code>&lt;!--more--&gt;</code>以隐藏后面的内容。</p>
<hr>
<p>所有关于博客搭建的教程就写到这了。以后想到还有什么漏掉的再来修改。</p>
]]></content>
      
        <categories>
            
            <category> github </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> theme </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[创建 Github 个人博客(二)：配合使用 hexo 开发博客]]></title>
      <url>/2017/06/25/hexoBlog/</url>
      <content type="html"><![CDATA[<p>在<a href="https://runjaelyn.github.io/2017/06/09/signupBlog/" target="_blank" rel="external">《创建 Github 个人博客(一)：搭建博客基础页面》</a>中我们讲了怎么去搭建一个 GitHub 博客的基础页面。实际上，基础页面搭建完成之后，我们就已经可以通过 Github Pages 直接写 HTML 静态博客了。</p>
<a id="more"></a>
<p>但是尝试之后我们会发现，这种博客使用起来相当麻烦。页面不够好看，操作又不方便，后期维护起来又很繁杂。所以，我们需要借用一些静态博客框架来辅助我们开发 github 博客。</p>
<p>现在比较流行的静态博客框架也比较多，不同的静态程序可以说都有各自的好处。这篇文章我们主要讲的是使用<a href="https://hexo.io/" target="_blank" rel="external">HEXO</a>这个框架来搭建 GitHub 个人博客。</p>
<h2 id="运行环境准备"><a href="#运行环境准备" class="headerlink" title="运行环境准备"></a>运行环境准备</h2><p>hexo 是一款基于 Node.js 的静态博客框架，所以我们需要安装 Node.js。</p>
<ul>
<li><a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js</a>（下载最新版的Node.js）</li>
<li><a href="https://git-scm.com/" target="_blank" rel="external">Git</a></li>
<li>文本编辑器（用于修改配置文件以及写文章）</li>
</ul>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>当 Node.js 和 Git 都安装好了之后，就可以正式安装 hexo 了。</p>
<p>（1）打开命令行工具（Mac：终端 <code>Terminal</code> / windows：CMD） ，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g hexo</div></pre></td></tr></table></figure>
<p>注意：Hexo 官网上的安装命令是 <code>npm install -g hexo-cli</code>，安装时不要忘记前面加上<code>sudo</code>，否则会因为权限问题报错。</p>
<ul>
<li>选装 cnpm</li>
</ul>
<p>因为 npm 安装插件是从国外服务器下载，受网络影响大，可能出现异常。所以我们可以利用淘宝提供的国内镜像。</p>
<p>命令行执行以下代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm --registry=https://registry.npm.taobao.org install -g cnpm</div></pre></td></tr></table></figure>
<p>安装完后最好通过 <code>cnpm -v</code> 命令查看其版本号，或关闭终端重新打开。安装完直接使用有可能会出现错误。</p>
<p><code>cnpm</code> 跟 <code>npm</code> 用法完全一致，只是在执行命令时将 <code>npm</code> 改为 <code>cnpm</code>（如果使用了淘宝镜像，后面操作将以 <code>cnpm</code> 代替 <code>npm</code>）</p>
<p>（2）输入管理员密码即开始安装 </p>
<p>（3）新建一个文件夹，例如 <code>blog</code>。用来存放自己博客相关的文件。</p>
<p>（4）在终端里通过 <code>cd</code> 命令进入到 <code>blog</code> 文件夹。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fgxfdois13j30r804gwf5.jpg" alt=""></p>
<p>（5）确定进入到 <code>blog</code> 文件夹之后，执行以下命令，对 <code>blog</code> 文件夹进行初始化。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
<p>（6）初始化完成之后，执行以下命令，安装所有的依赖和插件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<p>（7）安装完成后，执行以下命令，开启 hexo 本地服务器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo sever		或简写 hexo s</div></pre></td></tr></table></figure>
<p>当看到以下命令出现，就表示服务器启动成功。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fgxfek2yetj30ru0143yr.jpg" alt=""></p>
<p>然后就可以在浏览器中打开<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>来查看博客了。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fgxff2rb0oj30qk0d1n3y.jpg" alt=""></p>
<p>至此，我们的 hexo 静态博客框架安装就完成了。</p>
<h2 id="关联-github"><a href="#关联-github" class="headerlink" title="关联 github"></a>关联 github</h2><p>现阶段，我们只是在本地搭建好了博客页面，其他人是无法访问的。所以，本地安装完成之后，接下来我们需要关联 github。</p>
<p>（1）用编辑器打开 <code>blog</code> 文件夹里面的一个 <code>_config.yml</code> 的文件。将文件末尾修改为以下内容：</p>
<p>注：<code>runjaelyn</code> 改为你自己 <code>github</code> 的用户名</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span> </div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/runjaelyn/runjaelyn.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure>
<p style="color:red">注意：在配置所有的 _config.yml 文件时（包括后面会用到的主题 theme 文件夹中的），所有的冒号 : 后边都要加一个空格，否则执行 hexo 命令会报错。</p>

<p>（2）修改完成并保存。然后通过 <code>cd</code> 命令进入到 <code>blog</code> 文件夹目录，在命令行执行生成静态页面的命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate		或简写 hexo g</div></pre></td></tr></table></figure>
<ul>
<li><p>此时若出现如下报错：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR Local hexo not found <span class="keyword">in</span> ~/blog</div><div class="line">ERROR Try runing: <span class="string">'npm install hexo --save'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>则执行命令：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo --save</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>若无报错，自行忽略此步骤。</li>
</ul>
<p>（3）静态页面生成成功之后，执行配置命令 <code>deploy</code>，部署网站。（以后每次部署网站前，都需要预先生成静态文件）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy		或简写 hexo d</div></pre></td></tr></table></figure>
<p>（4）部署网站执行成功后，会显示类似于下列的命令。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fgxffveqejj31100ae782.jpg" alt=""></p>
<p>但是，也有可能会出现几种报错的情况：</p>
<p style="color:red">1. 无法连接 Git 或找不到 Git。</p>

<p>则执行如下命令来安装 <code>hexo-deployer-git</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fgxfg618n4j30qw05ktae.jpg" alt=""></p>
<p style="color:red">2. 没有配置用户名和密码。</p>

<p>若在本机上是第一次使用 Git，那么 Git 会要求配置的是你个人的用户名称和电子邮件地址。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fgxfgf2dzij30ow05qq3n.jpg" alt=""></p>
<p>这两条配置很重要，每次 Git 提交时都会引用这两条信息，用来说明是谁提交了更新。所以，需要则执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"name"</span></div><div class="line">git config --global user.email <span class="string">"name@example.com"</span></div></pre></td></tr></table></figure>
<p>上面<code>&quot;&quot;</code>里的内容填写自己的名字和邮箱就可以了。</p>
<p style="color:red">3. 未关联 GitHub。</p>

<p>若你未关联 Github，那么在执行 <code>hexo deploy</code> 命令时终端会提示你输入Github 的用户名和密码，即</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fgxfh04943j31140baae1.jpg" alt=""></p>
<p>依次输入你自己的 github 账号和密码就可以了。</p>
<p>（5）以上报错问题解决好了之后，重新执行配置命令 <code>deploy</code>，部署网站。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy		或简写 hexo d</div></pre></td></tr></table></figure>
<p>（6）显示成功之后，打开浏览器，输入你自己的 GitHub 地址。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fgxfhczaskj30mc01qjri.jpg" alt=""></p>
<p><code>runjaelyn</code> 改为你自己的用户名。</p>
<p>至此，我们刚刚在本地搭建的博客页面，现在就已经关联到了 github 上，其他人可以通过你的 Github 博客地址访问你的博客了。</p>
<h2 id="发表新文章"><a href="#发表新文章" class="headerlink" title="发表新文章"></a>发表新文章</h2><p>博客搭建好了之后，我们就可以开始往博客里添加我们的博客内容了。</p>
<p>（1）通过 <code>cd</code> 进入到 <code>blog</code> 文件夹，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"文章标题"</span></div></pre></td></tr></table></figure>
<p>创建成功后会有如下提示：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fgxfice2lyj30ms01s0tb.jpg" alt=""></p>
<p>创建成功后，打开 <code>blog</code> 文件夹里的 <code>source／_posts</code> ，就可以看到我们刚刚通过 hexo <code>new</code> 出来的文章 <code>.md</code> 文件。    </p>
<p>然后我们就可以添加我们的文章内容了（内容遵循 <code>Markdown</code> 的语法规则）。 </p>
<p>（2）文章编辑好保存后，执行如下命令，重新生成并部署：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean </div><div class="line">hexo g </div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>（3）成功后刷新博客就可以看到新文章已经显示在页面了。</p>
<p>到此为止，我们的博客就搭建完成了。</p>
<p>如果觉得 hexo 默认主题样式不好看的话，还可以自己去网上找其他主题，更换主题模式。</p>
<p>以后，我们就都可以通过 hexo 来管理操作我们的博客了。</p>
]]></content>
      
        <categories>
            
            <category> github </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[创建 Github 个人博客(一)：搭建博客基础页面]]></title>
      <url>/2017/06/09/signupBlog/</url>
      <content type="html"><![CDATA[<p>现在网络上技术类相关的博客由很多，很多类似于CSDN、博客园也都可以写文章。我们这篇教程主要介绍的是用 githubpages 搭建自己独立的技术博客。</p>
<a id="more"></a>
<h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>要创建 GitHub 的个人技术博客，首先需要进入<a href="https://github.com/" target="_blank" rel="external">Github官网</a>注册一个 GitHub 的账号。</p>
<p>（如果已经有 <code>github</code> 账号，可跳前两个步骤，直接进入第三步。）</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcyl3w5wj31kw0yoaiu.jpg" alt=""></p>
<h2 id="初始设置"><a href="#初始设置" class="headerlink" title="初始设置"></a>初始设置</h2><p>账号注册成功之后会跳到一个账户初始设置的页面，一般情况下我们采用默认设置就行。不用做任何更改，直接点击绿色 <code>Continue</code> 按钮。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcykhxlbj31kw0xggtm.jpg" alt=""></p>
<h3 id="验证邮箱"><a href="#验证邮箱" class="headerlink" title="验证邮箱"></a>验证邮箱</h3><p>初始设置完成之后，打开你注册账号时填写的邮箱，查看 GitHub 发给你的邮件。</p>
<p>我们需要对邮箱进行验证，后面生成的个人主页才会被接受和发布。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcylv8fkj31kw0dy42y.jpg" alt=""></p>
<p>点击验证邮箱，验证成功后跳转到如下页面。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fgfc10zrt7j31kw0tcjx9.jpg" alt=""></p>
<p>点击第二个按钮，创建一个新项目。</p>
<h2 id="创建页面仓库"><a href="#创建页面仓库" class="headerlink" title="创建页面仓库"></a>创建页面仓库</h2><p>这个页面用来填写关于你新建的这个仓库的一些初始化设置。</p>
<p>（找不到页面入口的可以点击这里<a href="https://github.com/new" target="_blank" rel="external">创建页面仓库</a>）</p>
<p>注意：</p>
<ol>
<li><p>仓库名称尽量跟你的 GitHub 用户名（注册账号时填写的用户名）保持一致。</p>
</li>
<li><p>因为 Github Pages 发布的页面统一使用 <code>github.io</code> 域名，所以你的仓库名还需要在你的用户名后面加上后缀 <code>.github.io</code>。</p>
</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fgfcymfif2j31kw0ypgu4.jpg" alt=""></p>
<p>其他的一些可选选项根据自己需求填写，完成之后点击绿色按钮 <code>Create reponsitory</code> 创建仓库。</p>
<h2 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h2><p>仓库创建好后，接下来就是在仓库中生成我们的页面。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcyj5d3uj31kw0yrjyl.jpg" alt=""></p>
<p>点击页面内的 <code>setting</code> ，进入设置页面。</p>
<p>在生成完整的页面之前，我们需要先给我们的页面设置一个主题样式，所以滑到页面后面，可以看到有一个主题选择按钮，点击 <code>choose a theme</code>。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fgfcyjvaofj317s0yi44h.jpg" alt=""></p>
<p>在主题页面选择一个自己喜欢的主题，选定后点击 <code>select theme</code></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcymovenj31kw10gwok.jpg" alt=""></p>
<p>主题设置成功后会跳转到一个“README“文件的配置页面。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fgfcykpcpoj31kw0pjaeo.jpg" alt=""></p>
<p>因为我们是将“README”作为我们博客的首页，所以选择直接将它提交到主分支即可。</p>
<p>其他的设置在后面我们都可以修改，所以这里不做任何改动，采用默认设置。</p>
<p>然后点击绿色 <code>Commit changes</code> 按钮。</p>
<p>到这为止，我们的 GitHub 博客就已经搭建好了。</p>
<h2 id="博客地址"><a href="#博客地址" class="headerlink" title="博客地址"></a>博客地址</h2><p>那么，别人要怎么访问我们的博客呢？</p>
<p>还是进入到我们刚刚选择主题时的 <code>setting</code> 页面。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fgfcyiik04j315u0zmq8v.jpg" alt=""></p>
<p>在主题选择这一栏的上方，有一个链接。点击这个链接，就可以看到我们的博客首页了，里面有我们刚刚设置的博客主题，和“REANME”文件里的内容。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fgfcympialj31kw0xigs1.jpg" alt=""></p>
<p>这个链接地址就是我们的博客地址，别人也就可以通过这个地址来访问我们 GitHub 博客了。</p>
]]></content>
      
        <categories>
            
            <category> github </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
