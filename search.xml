<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[DOM 文档对象模型]]></title>
      <url>/2017/08/18/dom/</url>
      <content type="html"><![CDATA[<p>应用程序开发过程中，程序不是直接对 HTML 文档进行操作的，而是首先由 HTML 分析器对 HTML 文档进行分析。然后，应用程序通过 HTML 分析器所提供的 DOM 接口对分析结果进行操作，从而间接的实现了对 HTML 文档的操作。</p>
<a id="more"></a>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h3><p>W3C 制定了一套书写 HTML 分析器的标准接口规范 – <strong>DOM</strong>。</p>
<p>DOM 的全称是 Document Object Model，译为<strong>文档对象模型</strong>。说的通俗一点，DOM 就是为 HTML 文档提供的一个API（接口）。提供这个接口有什么用呢？有了这个接口，我们就可以去操作 HTML 文档了。</p>
<blockquote>
<p>文档代表的是数据，而 DOM 则代表了如何去处理这些数据。简言之，它会将 Web 页面和脚本或程序语言连接起来。</p>
</blockquote>
<h3 id="为什么要使用DOM"><a href="#为什么要使用DOM" class="headerlink" title="为什么要使用DOM"></a>为什么要使用DOM</h3><p>相比起一成不变的静态页面，大家更喜欢动态化的 HTML 文档。而 JavaScript，就可以满足大家对动态化文档的需求。</p>
<p>通过 JavaScript，我们可以重构整个 HTML 文档，可以添加、删除、修改或重排页面上的项目。但是，JavaScript 并不能直接操作我们的文档。想要改变 HTML 中的某一个元素，JavaScript 需要找到访问该元素的入口。这个入口，连同对 HTML 元素进行一系列操作的方法和属性，都是通过文档对象模型（DOM）来获得的。</p>
<h3 id="DOM-的发展历程"><a href="#DOM-的发展历程" class="headerlink" title="DOM 的发展历程"></a>DOM 的发展历程</h3><p>DOM 的级别包含了从第 0 级到第 3 级。</p>
<p>注：第 0 级和第 3 级并不是 W3C 的标准。</p>
<ul>
<li>DOM 0 级: 定义了 Document 对象的一些属性和方法。</li>
<li><p>DOM 1 级：是 W3C 在 1998 年 10 月提出的第一个正式的 W3C DOM 标准。</p>
<ul>
<li>DOM Core（核心）：提供了 DOM 模型、内存管理、命名约定等方便访问和操作 HTML 页面的内容。</li>
<li><p>DOM HTML：提供了一些 HTML 页面相关的对象以及 HTML 标签的属性和方法等。</p>
<blockquote>
<p>注意：DOM 1 级中忽略了事件模型。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>DOM 2 级：是基于 DOM 1 级并且扩展了 DOM 1 级，还添加了视图、事件以及 CSS 样式的内容。</p>
<ul>
<li>DOM View：描述 HTML 文档的各种视图的接口。</li>
<li>DOM Events：描述了事件流、事件监听注册、事件接口以及文档事件接口等内容。</li>
<li>DOM Style：描述了 CSS 样式的接口。</li>
<li>DOM Traversal and Range：描述遍历和操作 HTML 文档的接口。</li>
</ul>
</li>
<li><p>DOM 3 级：引入了统一的文档读取和保存的方法，</p>
<ul>
<li>DOM Load and Save: 描述了文档的读取和保存的接口。</li>
<li><p>DOM Validation: 描述了文档验证的接口。</p>
<blockquote>
<p>注意：DOM 3 级的引入的主要是对 XML 文档的支持，对于 HTML 文档的用处并不大。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="DOM-的组成"><a href="#DOM-的组成" class="headerlink" title="DOM 的组成"></a>DOM 的组成</h3><ul>
<li>Core DOM：也称核心DOM编程，定义了一套标准针对任何结构化文档的对象，包括HTML。 </li>
<li>XML DOM：定义了一套标准的针对 XML 文档的对象。 </li>
<li>HTML DOM:定义了一套标准的针对 HTML 文档的对象。</li>
</ul>
<h2 id="DOM-节点"><a href="#DOM-节点" class="headerlink" title="DOM 节点"></a>DOM 节点</h2><h3 id="DOM-节点树结构"><a href="#DOM-节点树结构" class="headerlink" title="DOM 节点树结构"></a>DOM 节点树结构</h3><p>DOM 将 HTML 页面表示为一个树形结构，方便访问和操作 HTML 页面中的内容。具体如何表示，我们可以通过以下示例来理解。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>  <span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> hello world <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fi7h5l70msj31680vkn20.jpg" alt=""></p>
<p>当浏览器加载 HTML 页面时，就会创建这个 HTML 页面的模型。这个模型就叫做 DOM 树结构。</p>
<h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><p>节点<code>node</code>是个网络术语，表示网络中的连接点。一个网络是由各种不同的节点构成的集合。</p>
<p>在 DOM 树结构中主要由以下四种节点组成：</p>
<ul>
<li>文档节点：表示整个 HTML 页面（相当于<code>document</code>对象）。当需要访问任何标签、属性或文本时，都可以通过文档节点进行导航。</li>
<li>元素节点：表示 HTML 页面中的标签（即 HTML 页面的结构）。当访问 DOM 树时，需要从查找元素节点（标签）开始。</li>
<li>文本节点：表示 HTML 页面中的标签所包含的文本内容。</li>
<li>属性节点：表示 HTML 页面中的开始标签包含的属性。</li>
</ul>
<p>附：代码注释也是一个注释节点，但一般情况不作考虑。</p>
<p>注意：在 DOM 树结构中，属性节点比较特殊，它并不是所有元素节点的子节点。</p>
<p>根据节点的分类，前面的 DOM 树结构就可以更详细的表示为如下示例。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fi7j1z4ppgj31820y6n3j.jpg" alt=""></p>
<h3 id="判断节点类型"><a href="#判断节点类型" class="headerlink" title="判断节点类型"></a>判断节点类型</h3><p>当通过 DOM 节点树获取 HTML 页面的某个节点时，我们如何可以判断出当前节点时哪种类型的呢？</p>
<table><br>    <tr><br>        <th>节点类型</th><br>        <th>nodeName</th><br>        <th>nodeType</th><br>        <th>nodeValue</th><br>    </tr><br>    <tr><br>        <td>文档节点</td><br>        <td>#document</td><br>        <td>9</td><br>        <td>null</td><br>    </tr><br>        <tr><br>        <td>元素节点</td><br>        <td>标签名</td><br>        <td>1</td><br>        <td>null</td><br>    </tr><br>        <tr><br>        <td>属性节点</td><br>        <td>属性名</td><br>        <td>2</td><br>        <td>属性值</td><br>    </tr><br>        <tr><br>        <td>文本节点</td><br>        <td>#text</td><br>        <td>3</td><br>        <td>文本内容</td><br>    </tr><br></table>

<h2 id="DOM-API"><a href="#DOM-API" class="headerlink" title="DOM API"></a>DOM API</h2><p>W3C 提供的 DOM 标准通过一系列对象实现，其中主要以 Document 对象、Element 对象和 Node 对象为主。</p>
<p>我们学习 DOM 标准的 API 内容，也主要通过 Document 对象、Element 对象和 Node 对象这三个对象学习。</p>
]]></content>
      
        <categories>
            
            <category> DOM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[变量提升和函数提升]]></title>
      <url>/2017/08/13/hoisting/</url>
      <content type="html"><![CDATA[<p>变量提升和函数提升本身不算是一个特别难的知识点，但是很多时候会跟一些比较难的知识点混合在一起使用，等那个时候再来挨着挨着去把每个知识点理顺就很头痛了。所以，今天把这个简单的知识点也单独的提出来写一篇博客。</p>
<a id="more"></a>
<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>我们先不急着解释“变量提升”是什么意思，先看几段代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( a );</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fig8e7r6czj31be01mt95.jpg" alt=""></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( a );</div><div class="line"><span class="keyword">var</span> a;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fifize00alj314i03cwem.jpg" alt=""></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( a );</div><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fifize00alj314i03cwem.jpg" alt=""></p>
<p>我们看到上面三段代码。第一段代码报错，因为<code>a</code>未定义，找不到变量<code>a</code>，这个比较容易理解。而第二段和第三段代码的运行结果都是<code>undefined</code>，那就说明，在浏览器执行<code>console.log(a)</code>时，就已经找到定义的变量<code>a</code>了，但是却没有找到它的值。</p>
<p>为什么会有这样的结果呢？第三段代码中的<code>10</code>去哪里了呢？</p>
<p>其实出现这样的结果就是因为我们的“变量提升”。</p>
<h3 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h3><p>在 JavaScript 解释器正式开始执行 JavaScript 代码之前，浏览器会做一些“准备工作”。也就是说在代码执行之前，还有一个代码预解析的过程。</p>
<p>在这个预解析过程中，浏览器会找到代码中所有通过<code>var</code>声明的变量，然后把这些变量的声明提升到代码头部。但因为只提升变量的声明，不提升变量的赋值，所以未赋值的变量默认值为<code>undefined</code>。而这一系列的操作，其实就是我们所说的“变量提升”。</p>
<p>也就是说，我们的第三段代码，在正式执行之前，已经变成了下面的样子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a;</div><div class="line"><span class="built_in">console</span>.log( a );</div><div class="line">a = <span class="number">10</span>;</div></pre></td></tr></table></figure>
<p>我们可以看到，在预解析的过程中，提升的只是变量的声明，赋值语句还是停留在原位置。这就是为什么我们的第三段代码运行结果<code>a</code>的值不是<code>10</code>。因为在执行输出<code>a</code>的时候，变量<code>a</code>的赋值还没执行。</p>
<p>注：变量提升只针对通过<code>var</code>声明的变量。</p>
<h2 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h2><p>其实在预解析过程中，除了做“变量提升”的准备工作之外，浏览器还要做一个“函数提升”的准备工作。前面弄明白了“变量提升”之后其实“函数提升”就很好理解了。</p>
<p>在代码预解析过程中除了提升所有<code>var</code>声明的变量之外，还会把所有的声明式函数提升到代码头部，这个过程就叫做“函数提升”。</p>
<p>我们通过代码来理解一下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fn();</div><div class="line"><span class="comment">// 声明式函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"hello world"</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fifl2cd863j314m03k0sx.jpg" alt=""></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fn();</div><div class="line"><span class="comment">// 函数表达式</span></div><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"hello world"</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fifl54evdwj315o01mjrt.jpg" alt=""></p>
<p>我们看到第一段代码，在定义函数之前调用函数<code>fn()</code>，可以正常的执行输出。就是因为我们的声明式函数被提升到了代码头部，也就是说在 JavaScript 解释器正式执行代码之前，我们的代码已经变成了如下样子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 声明式函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"hello world"</span> );</div><div class="line">&#125;</div><div class="line">fn();</div></pre></td></tr></table></figure>
<p>但是第二段代码调用函数<code>fn()</code>就出现了报错。这是因为<strong>“函数提升”只针对声明式函数，函数表达式不会有“函数提升”的过程。</strong></p>
<p>附：其实对于函数表达式，提升的是变量名，而不是函数。也就是说，我们的第二段代码，在 JavaScript 解释器正式执行代码之前，代码是如下样子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fn = <span class="literal">undefined</span>;</div><div class="line">fn();</div><div class="line"><span class="comment">// 函数表达式</span></div><div class="line">fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"hello world"</span> );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以在执行第四行赋值语句之前，<code>fn</code>只是一个值为<code>undefined</code>的普通变量，并不是函数名，所以调用变量名会报错。</p>
<h2 id="变量提升和函数提升"><a href="#变量提升和函数提升" class="headerlink" title="变量提升和函数提升"></a>变量提升和函数提升</h2><p>前面我们分别解释“变量提升”和“函数提升”。那么，如果当两种情况同时存在呢？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( foo );</div><div class="line"><span class="keyword">var</span> foo = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"hello world"</span> )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( foo );</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"hello world"</span> )</div><div class="line">&#125; </div><div class="line"><span class="keyword">var</span> foo = <span class="number">10</span>;</div></pre></td></tr></table></figure>
<p>运行结果都是：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fifm5nw8cgj314o05et97.jpg" alt=""></p>
<p>那这样的结果是不是就说明是变量先提升，函数后提升呢？这样代码执行时后面的函数将前面的变量覆盖了，所以最终结果显示为函数。</p>
<p>其实不是，在《你不知道的 JavaScript（上卷）》书中的第40页写道：</p>
<blockquote>
<p>函数声明和变量声明都会被提升。但是一个值的注意的细节（这个细节可以出现在有多个“重复”声明的代码中）是函数会首先提升，然后才是变量。</p>
</blockquote>
<p>我们上面的代码，在经过一系列的代码提升之后，变成了下面的样子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">"hello world"</span> )</div><div class="line">&#125; </div><div class="line"><span class="keyword">var</span> foo;</div><div class="line"><span class="built_in">console</span>.log( foo );</div><div class="line">foo = <span class="number">10</span>;</div></pre></td></tr></table></figure>
<p>正常情况下，发生“重复命名”时，后面的会覆盖前面的。但是，因为我们第四行的代码只是一个变量声明，并没有被赋值，所以当它跟函数声明重名时，是覆盖不了函数的，也就是说它是被忽略的。</p>
<p>我们可以写个例子验证一下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> a;</div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fifrz1e3xdj314k03a0sw.jpg" alt=""></p>
<p>但是，如果变量被赋值了，那么后面的就会覆盖前面的了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="string">"hello world"</span>;</div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fifs0wlmlbj314s03qdfw.jpg" alt=""></p>
<h2 id="函数内部的提升"><a href="#函数内部的提升" class="headerlink" title="函数内部的提升"></a>函数内部的提升</h2><p>JavaScript 在执行一个代码段之前，都会进行预解析过程中的这些“准备工作”。通过上面的例子我们可以发现，所有的代码都是在全局范围下执行的，也就是说，我们所有的变量提升或者函数提升都是将它们提升到全局范围的最头部。</p>
<p>但是，这个“代码段”其实是分三种情况的 —— 全局代码、函数体代码、<code>eval()</code>代码。</p>
<p>首先，全局代码应该很好理解了，就像我们前面的那些例子中的代码，直接写在某个外部的<code>.js</code>文件中，或者就是包含在<code>&lt;script&gt;</code>标签范围内的代码。这两种都属于全局范围中的代码。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="comment">// 全局范围的代码段</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其次，函数体代码，就是指写在某个函数内部的代码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">// 函数体内部的代码段</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当预解析发生时，函数体内部如果也有<code>var</code>声明的变量或者声明式函数，那么它们同样的也会发生提升。但是，因为函数体内部的代码作用范围就只在函数体内部，所以它们的提升也只会提升到当前函数体内部的最头部。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( a );</div><div class="line">	<span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>变量提升后：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a;</div><div class="line">	<span class="built_in">console</span>.log( a );</div><div class="line">	a = <span class="number">10</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，<code>eval</code>函数，这种不常用，也不推荐大家使用。所以也不讲了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>介绍完预解析过程中发生“变量提升”和“函数提升”的各种情况，我们来做一个总结。</p>
<p>在预解析的过程中浏览器到底做了哪些准备工作：</p>
<blockquote>
<ul>
<li>找到所有<code>var</code>声明的变量和声明式函数；</li>
<li>将变量的声明和声明式函数提升到当前作用域（代码段范围内）头部；</li>
<li>变量名和函数名重复时先提升函数声明，再提升变量声明（执行时未赋值的变量声明会被忽略）；</li>
</ul>
</blockquote>
<p>附：总结里提到的“作用域”其实就是我们前文说的“代码段”的作用范围。但是担心有些人对作用域的概念也不是太明白，所以为了方便大家理解，我们前面都没有提到作用域这个概念。</p>
]]></content>
      
        <categories>
            
            <category> 执行上下文 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 内存空间]]></title>
      <url>/2017/08/12/memory/</url>
      <content type="html"><![CDATA[<p>JS 解释器和 C#，Java 的运行环境一样有垃圾回收机制，程序员不需要手动跟踪释放内存。所以对于前端开发来说，内存空间并不是一个经常被提及的概念，很容易被大家忽视。但是，想要对 JavaScript 的理解更加深刻，就必须对内存空间有一个清晰的认知。</p>
<a id="more"></a>
<h2 id="内存空间管理"><a href="#内存空间管理" class="headerlink" title="内存空间管理"></a>内存空间管理</h2><h3 id="JavaScript-的内存生命周期"><a href="#JavaScript-的内存生命周期" class="headerlink" title="JavaScript 的内存生命周期"></a>JavaScript 的内存生命周期</h3><ol>
<li>分配你所需要的内存</li>
<li>使用（读、写）分配到的内存 </li>
<li>不需要时将内存释放、归还</li>
</ol>
<p>为了便于理解，我们使用一个简单的例子来解释这个周期。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">20</span>;               <span class="comment">// 第一步：分配变量 a 所需要的空间</span></div><div class="line"><span class="built_in">console</span>.log(a + <span class="number">100</span>);     <span class="comment">// 第二步：使用分配到的内存空间</span></div><div class="line">a = <span class="literal">null</span>;                 <span class="comment">// 第三步：使用完毕之后，释放内存空间</span></div></pre></td></tr></table></figure>
<p>前两步我们都很好理解，JavaScript 在定义变量的时候就完成了内存分配。第三步释放内存空间则是我们需要重点理解的一个点。</p>
<h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>JavaScript 有垃圾回收机制，那么这个机制的原理是什么呢？</p>
<p><strong>垃圾回收机制</strong>：其实就是找到那些不再继续使用的变量，什么是不再使用？就是生命周期结束的变量，可能是全局的和局部的。找到之后，释放其占用的内存。垃圾收集器每隔固定的时间段就会执行一次释放操作。</p>
<p>在 JavaScript 中，最常用的是通过<strong>标记清除</strong>算法来找到哪些变量是不再继续使用的，因此 <code>a = null</code> 其实仅仅只是做了一个释放引用的操作，让 a 原本对应的值失去引用，脱离执行环境。这个值会在下一次垃圾收集器执行操作时被找到，并释放。</p>
<h2 id="栈（stack）和堆（heap）"><a href="#栈（stack）和堆（heap）" class="headerlink" title="栈（stack）和堆（heap）"></a>栈（stack）和堆（heap）</h2><p>在 JavaScript 中，每一个数据都需要一个内存空间。内存空间又被分为两种：<strong>栈内存(stock)与堆内存(heap)</strong>。</p>
<p>栈（stack）为自动分配的内存空间，它由系统自动释放；而堆（heap）则是动态分配的内存，大小不定也不会自动释放。</p>
<h3 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h3><p>要简单的理解栈对数据的存取方式，我们可以通过类比乒乓球盒子来分析。如下图左侧：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fhkn1bcdozj31360p2tc1.jpg" alt=""></p>
<p>这种乒乓球的存放方式与栈中存取数据的方式如出一辙。</p>
<p>处于盒子中最顶层的乒乓球E，它一定是最后被放进去的，但可以最先被使用。而我们如果想要使用底层的乒乓球A，就必须将上面的4个乒乓球都取出来，让乒乓球A处于盒子开口处，这样才能拿到乒乓球A。</p>
<p>这个取乒乓球的过程，就符合栈空间<strong>先进后出，后进先出</strong>的特点。上图右侧已经详细的表明了栈空间的存储原理。</p>
<h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3><p>堆存取数据的方式，则与书架和书非常相似。</p>
<p>书虽然也整齐的存放在书架上，但是我们只要知道书的名字，我们就可以很方便的取出我们想要的书，而不用像从乒乓球盒子里取乒乓球一样，非得将上面的所有乒乓球都拿出来才能取到下面的某一个乒乓球。就比如在 JSON 格式的数据中，我们存储的 <code>key-value</code> 是可以无序的，因为顺序的不同并不影响我们的使用。所以对于书架上的书来说，我们也只需要关心书的名字。而堆存取数据，也就是这个特点。</p>
<h3 id="基础数据类型与栈内存"><a href="#基础数据类型与栈内存" class="headerlink" title="基础数据类型与栈内存"></a>基础数据类型与栈内存</h3><p>JavaScript 有五种基础数据类型：<code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>number</code>、<code>string</code>。</p>
<p>JavaScript 中的基础数据类型，都是一些简单的数据段，这些值都有固定的大小，往往保存在栈内存中，由系统自动分配存储空间，我们可以直接操作保存在栈内存空间的值.</p>
<blockquote>
<p>因此，基础数据类型都是按值访问的。</p>
</blockquote>
<h3 id="引用数据类型与堆内存"><a href="#引用数据类型与堆内存" class="headerlink" title="引用数据类型与堆内存"></a>引用数据类型与堆内存</h3><p>JavaScript 的引用数据类型，比如数组 <code>Array</code>，他们值的大小是不固定的。<strong>引用数据类型的值是保存在堆内存中的对象。</strong>JavaScript 不允许直接访问堆内存中的位置，因此我们不能直接操作对象的堆内存空间。</p>
<p>那么操作对象时，我们实际上是在操作对象的<strong>引用</strong>而不是实际的对象。这里的引用，我们可以粗浅地理解为保存在栈内存中的一个地址，该地址与堆内存的实际值相关联。</p>
<blockquote>
<p>因此，引用类型的值都是通过引用访问的。</p>
</blockquote>
<h3 id="图解举例"><a href="#图解举例" class="headerlink" title="图解举例"></a>图解举例</h3><p>为了更好的搞懂栈内存与堆内存，我们可以结合以下例子与图解进行理解。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">0</span>;   <span class="comment">// 栈</span></div><div class="line"><span class="keyword">var</span> b = <span class="string">"hello world"</span>;   <span class="comment">// 栈</span></div><div class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;   <span class="comment">// 栈</span></div><div class="line">	</div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">m</span>: <span class="number">20</span> &#125;;   <span class="comment">// 变量 obj 存在于栈中，&#123; m: 20 &#125; 作为对象存在于堆内存中</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];   <span class="comment">// 变量 arr 存在于栈中，[1, 2, 3] 作为对象存在于堆内存中</span></div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhknbpz837j30za0j0q56.jpg" alt=""></p>
<blockquote>
<p>因此，当我们要访问堆内存中的引用数据类型（如对象，数组，函数等）时，实际上我们首先是从栈中获取该对象的地址引用（或者地址指针），然后再通过这个地址从堆内存中取得我们需要的数据。</p>
</blockquote>
<h3 id="扩展练习"><a href="#扩展练习" class="headerlink" title="扩展练习"></a>扩展练习</h3><p>大致了解了 JavaScript 的内存空间，我们就可以借助内存空间的特性来验证一下引用类型的特点了。</p>
<p>例一：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> b = a;</div><div class="line">b = <span class="number">30</span>;</div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fhknn2es7ej311m0iydhx.jpg" alt=""></p>
<p>在栈内存中的数据发生复制行为时，系统会自动为新的变量分配一个新值。<code>var b = a</code> 执行之后，<code>a</code> 和 <code>b</code> 的值虽然都等于 20，但是他们其实已经是相互独立互不影响的值了。所以，我们修改了 <code>b</code> 的值以后，<code>a</code> 的值并不会发生变化。</p>
<p>例二：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person1 = &#123; <span class="attr">name</span>: <span class="string">"zhangsan"</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</div><div class="line"><span class="keyword">var</span> person2 = person1;</div><div class="line">person2.name = <span class="string">"lisi"</span>;</div><div class="line"><span class="built_in">console</span>.log(person1.name);</div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhkt5ff5syj30xe10etcp.jpg" alt=""></p>
<p>当我们通过 <code>var person2 = person1</code> 执行一次复制引用类型的操作时，引用类型的复制也会为新的变量分配一个新的值保存在栈内存中。但不同的是，这个新的值，仅仅只是引用类型的一个地址指针。当地址指针相同时，尽管他们相互独立，但是这两个地址指针指向的都是堆内存中的同一个地方，所以在堆内存中访问到的具体对象实际上是同一个。</p>
<p>因此，当我们改变 <code>person2</code> 的时候，就是在改变堆内存中 <code>person2</code> 指向的这个对象。而同时，<code>person1</code> 指向的也是这个对象，所以 <code>person1</code> 也会跟着发生变化。这就是引用类型的特性。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们通过一个表格对栈内存和堆内存做一个总结：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fih0gklmthj316u0go0w6.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 内存空间 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[数组的循环和迭代]]></title>
      <url>/2017/07/29/Array/</url>
      <content type="html"><![CDATA[<p>在 JavaScript 中，关于数组的操作方法有很多。其中，数组的遍历是我们需要掌握的一个重点。</p>
<p>从 JavaScript 发展到现在，数组的遍历方式也越来越多，所以这篇文章我们主要是讲关于数组的这几种遍历方式的使用方法和分析它们的一些异同点。</p>
<a id="more"></a>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p><strong>普通版<code>for</code>循环</strong></p>
<p><code>for</code>循环是遍历数组最简单的一种，也是使用频率最高的一种。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++ ) &#123;</div><div class="line">	<span class="built_in">console</span>.log( arr[i] ); <span class="comment">// a b c d </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种<code>for</code>循环方式虽然性能不算差，但也仍有优化的空间。</p>
<p><strong>优化版<code>for</code>循环</strong></p>
<p>优化版的<code>for</code>循环，就是在普通版的<code>for</code>循环基础之上，使用临时变量，将数组的长度 <code>arr.length</code>缓存起来，避免重复获取数组长度。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++ ) &#123;</div><div class="line">	<span class="built_in">console</span>.log( arr[i] ); <span class="comment">// a b c d </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式在数组较大时优化效果才会比较明显，但是这种方式基本上也是所有循环遍历方法中性能最高的一种了。</p>
<h3 id="for-in-循环"><a href="#for-in-循环" class="headerlink" title="for-in 循环"></a>for-in 循环</h3><p>这种循环方式很多人爱用，但实际上，经分析测试，在众多的循环遍历方式中，它的效率是最低的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> i <span class="keyword">in</span> arr ) &#123;</div><div class="line">	<span class="built_in">console</span>.log( arr[i] ); <span class="comment">// a b c d </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明：<code>for-in</code>循环实际是为了循环<strong>可枚举性</strong>（enumerable）对象而设计的。这里暂时不理解可枚举性没关系（在后面对象的文章中会细讲），但至少从这句话我们可以知道，虽然<code>for-in</code>也可以用来遍历数组，但实际上它更适合用来遍历对象。</p>
<h3 id="for-of-循环"><a href="#for-of-循环" class="headerlink" title="for-of 循环"></a>for-of 循环</h3><p><code>for-of</code>是 ES6 引进的新语法，它既比传统的<code>for</code>循环方式简洁，同时弥补了<code>for-in</code>循环的不足。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> item <span class="keyword">of</span> arr ) &#123;</div><div class="line">	<span class="built_in">console</span>.log( item ); <span class="comment">// a b c d </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li><code>for-in</code>是遍历集合对象的键名，<code>for-of</code>是直接遍历集合对象的键值。</li>
<li><code>for-of</code>的遍历方式性能要高于<code>for-in</code>，但仍比不上普通的<code>for</code>循环。</li>
<li><code>for-of</code>不仅支持数组的遍历，还支持大多数类数组对象。同时也支持 ES6 里新增的<code>Map</code>和<code>Set</code>对象。</li>
</ul>
<h2 id="数组迭代"><a href="#数组迭代" class="headerlink" title="数组迭代"></a>数组迭代</h2><p>ES5 为数组定义了几种迭代方法。</p>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><p>自 2009 年 ES5 正式发布后，我们开始可以使用<code>forEach</code>方法来遍历数组。 </p>
<p>描述：按顺序让数组中每一项依次执行某种相同的操作。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>];</div><div class="line"></div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( item );   <span class="comment">// 10 11 12 13 14</span></div><div class="line">	<span class="built_in">console</span>.log( index );  <span class="comment">// 0 1 2 3 4</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fhu3c7xbtrj313e0eijtj.jpg" alt=""></p>
<p>说明：</p>
<ul>
<li>数组自带的<code>forEach</code>循环，使用频率较高，但实际上性能比普通<code>for</code>循环弱。</li>
<li><code>forEach</code>不能使用<code>continue</code>和<code>break</code>语句中断循环，也不能使用<code>return</code>语句返回到外层函数。</li>
</ul>
<h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>描述：按顺序让数组中每一项依次执行某种相同的操作，然后返回一个新数组。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> newArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> item * <span class="number">2</span>;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log( newArr ); <span class="comment">// [20, 22, 24, 26, 28]</span></div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fhu3eseae8j30ys0nsgot.jpg" alt=""></p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p>描述：按顺序让数组中每一项依次执行某种相同的操作，然后筛选出符合条件的元素，组成新数组并返回。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> item % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [10, 12, 14]</span></div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fhu45uy6spj317o0p40wy.jpg" alt=""></p>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><p>描述：按顺序让数组中的前项和后项做某种计算，并累计返回最终值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, next</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> prev + next;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 60</span></div></pre></td></tr></table></figure>
<p>图解：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fhu6l2qukbj318q0sy0xb.jpg" alt=""></p>
<p>利用<code>reduce()</code>方法的特点，我们还可以通过该方法结合三目运算来求一个数组中的最大或最小值。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>];</div><div class="line"></div><div class="line"><span class="keyword">let</span> result = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, next</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> prev &gt; next ? prev : next;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure>
<h3 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h3><p>描述：按顺序让数组中每一项依次执行某种相同的操作，用来检测数组中每一项是否都符合条件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> item % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(result); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>说明：检测的元素中，如果全部都满足条件，返回<code>true</code>，只要有一项不满足条件，则返回<code>false</code>。即<strong>一假必假</strong>。</p>
<p>图解：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fhu6w9sywij318m0rytdj.jpg" alt=""></p>
<h3 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h3><p>描述：按顺序让数组中每一项依次执行某种相同的操作，用来检测数组中某一项是否都符合条件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> item % <span class="number">2</span> == <span class="number">0</span>;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(result); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>说明：检测的元素中，只要有一项符合条件，就返回结果<code>true</code>，如果全部都不满足条件，则返回结果<code>false</code>。即<strong>一真必真</strong>。</p>
<p>图解：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fhu70i4mncj319m0s0aez.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1figzpknccgj31780wm0zg.jpg" alt=""></p>
<p>附：本篇文章都只针对以上方法做了一些简单的讲解分析，并不全面。需要深入研究分析的朋友还需另查询其他资料。</p>
]]></content>
      
        <categories>
            
            <category> Array </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[创建 Github 个人博客(三)：设置 hexo 博客主题]]></title>
      <url>/2017/07/15/themeBlog/</url>
      <content type="html"><![CDATA[<p>之前写了两篇文章来教大家怎么去创建 GitHub 个人博客，然后再怎么配合 hexo 去开发博客。<br><a id="more"></a></p>
<ul>
<li><a href="https://runjaelyn.github.io/2017/06/09/signupBlog/" target="_blank" rel="external">创建 Github 个人博客(一)：搭建博客基础页面</a> </li>
<li><a href="https://runjaelyn.github.io/2017/06/25/hexoBlog/" target="_blank" rel="external">创建 Github 个人博客(二)：配合使用 hexo 开发博客</a>  </li>
</ul>
<p>本来这个教程到此也差不多结束了。但是后来有些笨鸡娃子找到我说，不会设置博客主题，所以还是决定再写最后一篇教程讲一下怎么去用 hexo 去设置博客的主题。</p>
<h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><p>在设置主题之前，首先需要去找一款喜欢的主题样式。hexo 有自己的博客主题官网 <a href="https://hexo.io/themes/" target="_blank" rel="external">Themes | Hexo</a>，可以在官网里去找喜欢的主题样式。百度上也可以搜到一些开发者们自己写的一些好看主题。具体的自行百度，随便一搜就出来很多了。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fi147brqq9j30w20fan17.jpg" alt=""></p>
<p>选择好主题后，找到该主题的地址。我们用官网的一个主题为例：</p>
<p>（1）点击主题名字进入主题详情页面。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhzlcff7x5j31kw0th47f.jpg" alt=""></p>
<ul>
<li><p>详情页面里有一个<code>README.md</code>的主题说明的文档。大部分的主题在这个文档里都会有下载安装配置的流程说明。</p>
<p>  <img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhzlgmy5d8j31ia0voq74.jpg" alt=""></p>
<p>  例如我们当前选择的这个主题，详情页面往下拉就能看到下载安装主题需要执行的相关命令，直接按照文档里给出的命令依次去执行就可以了。</p>
<p>  如果遇到文档没有写安装教程的，或者 … 看不懂英文的 … 那就继续看我们这个教程的下一步吧。</p>
</li>
</ul>
<p>（2）点击详情页面的绿色按钮，复制红框中的主题地址。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fhzjm91vxmj31kw0p77ac.jpg" alt=""></p>
<p>在其他网站找的主题也一样的会有一个主题的地址，同样的复制下来就行。</p>
<h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p>有了主题地址之后，接下来我们就可以开始安装了。</p>
<p>（1）打开命令行工具，进入到你的博客文件夹。然后执行以下格式的命令，将选中的主题克隆下来。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone <span class="string">"url"</span> themes/<span class="string">"themeName"</span>    <span class="comment">// 不要复制这一行！！！看下面解释！！！</span></div></pre></td></tr></table></figure>
<ul>
<li><code>&quot;url&quot;</code>就是我们刚刚复制的主题地址。</li>
<li><code>&quot;themeName&quot;</code>是我们当前选择的主题名字</li>
</ul>
<p>将你找到的主题地址和主题名字替换掉上面的<code>&quot;url&quot;</code>和<code>&quot;themeName&quot;</code>。</p>
<p>例如我们刚刚在官网找到的那个主题，执行命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/levblanc/hexo-theme-aero-dual.git themes/aero-dual</div></pre></td></tr></table></figure>
<ul>
<li><code>themes/aero-dual</code>前面的<code>themes</code>是存储所有主题文件的文件夹名字，<code>aero-dual</code>是当前主题文件夹的名字，也是当前主题的名字。</li>
</ul>
<p>（2）看到出现类似下面这种 100% 的命令，就表示主题下载成功了。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhzjxhuws9j311m05o412.jpg" alt=""></p>
<p>（3）下载成功之后，在我们的博客文件目录就可以看到我们刚刚下载好的主题文件。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fi14mvl2jjj30wg06mq3x.jpg" alt=""></p>
<p>（4）用编辑器打开博客文件目录中的<code>_config.yml</code>文件。将主题配置改为当前选择的主题名字。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Extensions</span></div><div class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></div><div class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></div><div class="line"><span class="attr">theme:</span> <span class="string">aero-dual</span></div></pre></td></tr></table></figure>
<p>（5）通过命令进入到当前主题文件夹，例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> themes/aero-dual</div></pre></td></tr></table></figure>
<p><code>aero-dual</code>这是我的主题名字！你们自己换成你们自己选择的主题名字。</p>
<p>（6）然后再执行下面的代码，将当前更改的信息进行合并。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure>
<p>（7）最后，主题配置完成。执行以下命令重新部署整个博客。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>好，完成。重新打开博客就可以发现新的主题已经生效了。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fhzqf6q16dj31kw10bgzu.jpg" alt=""></p>
<h2 id="功能配置"><a href="#功能配置" class="headerlink" title="功能配置"></a>功能配置</h2><p>到上一步，我们的主题其实就已经安装好了。博客基本上也可以正常使用了。</p>
<p>但是有的时候，博客或者主题的一些默认配置并不是我们想要的，所以我们还可以根据自己的需求去更改一些配置。这里简单梳理几个常用的配置信息。</p>
<h3 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h3><p>找到博客目录下的<code>_config.yml</code>文件。</p>
<p>注意：以下所有配置，冒号后面都要有一个空格。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span>                       <span class="comment">## 博客主标题 </span></div><div class="line"><span class="attr">subtitle:</span>                    <span class="comment">## 博客副标题  </span></div><div class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>              <span class="comment">## 语言 中文</span></div></pre></td></tr></table></figure>
<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>每一个主题的文件目录下也都有一个<code>_config.yml</code>文件，这个就是主题配置文件。不同的主题配置信息也不一样。</p>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><p><strong>文章摘要</strong></p>
<p>有一些主题博客首页默认显示全文，如果只希望现实某一个段落在首页，可以在文章内容中插入<code>&lt;!--more--&gt;</code>以隐藏后面的内容。</p>
<hr>
<p>所有关于博客搭建的教程就写到这了。以后想到还有什么漏掉的再来修改。</p>
]]></content>
      
        <categories>
            
            <category> github </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[创建 Github 个人博客(二)：配合使用 hexo 开发博客]]></title>
      <url>/2017/06/25/hexoBlog/</url>
      <content type="html"><![CDATA[<p>在<a href="https://runjaelyn.github.io/2017/06/09/signupBlog/" target="_blank" rel="external">《创建 Github 个人博客(一)：搭建博客基础页面》</a>中我们讲了怎么去搭建一个 GitHub 博客的基础页面。实际上，基础页面搭建完成之后，我们就已经可以通过 Github Pages 直接写 HTML 静态博客了。</p>
<a id="more"></a>
<p>但是尝试之后我们会发现，这种博客使用起来相当麻烦。页面不够好看，操作又不方便，后期维护起来又很繁杂。所以，我们需要借用一些静态博客框架来辅助我们开发 github 博客。</p>
<p>现在比较流行的静态博客框架也比较多，不同的静态程序可以说都有各自的好处。这篇文章我们主要讲的是使用<a href="https://hexo.io/" target="_blank" rel="external">HEXO</a>这个框架来搭建 GitHub 个人博客。</p>
<h2 id="运行环境准备"><a href="#运行环境准备" class="headerlink" title="运行环境准备"></a>运行环境准备</h2><p>hexo 是一款基于 Node.js 的静态博客框架，所以我们需要安装 Node.js。</p>
<ul>
<li><a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js</a>（下载最新版的Node.js）</li>
<li><a href="https://git-scm.com/" target="_blank" rel="external">Git</a></li>
<li>文本编辑器（用于修改配置文件以及写文章）</li>
</ul>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>当 Node.js 和 Git 都安装好了之后，就可以正式安装 hexo 了。</p>
<p>（1）打开命令行工具（Mac：终端 <code>Terminal</code> / windows：CMD） ，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g hexo</div></pre></td></tr></table></figure>
<p>注意：Hexo 官网上的安装命令是 <code>npm install -g hexo-cli</code>，安装时不要忘记前面加上<code>sudo</code>，否则会因为权限问题报错。</p>
<ul>
<li>选装 cnpm</li>
</ul>
<p>因为 npm 安装插件是从国外服务器下载，受网络影响大，可能出现异常。所以我们可以利用淘宝提供的国内镜像。</p>
<p>命令行执行以下代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm --registry=https://registry.npm.taobao.org install -g cnpm</div></pre></td></tr></table></figure>
<p>安装完后最好通过 <code>cnpm -v</code> 命令查看其版本号，或关闭终端重新打开。安装完直接使用有可能会出现错误。</p>
<p><code>cnpm</code> 跟 <code>npm</code> 用法完全一致，只是在执行命令时将 <code>npm</code> 改为 <code>cnpm</code>（如果使用了淘宝镜像，后面操作将以 <code>cnpm</code> 代替 <code>npm</code>）</p>
<p>（2）输入管理员密码即开始安装 </p>
<p>（3）新建一个文件夹，例如 <code>blog</code>。用来存放自己博客相关的文件。</p>
<p>（4）在终端里通过 <code>cd</code> 命令进入到 <code>blog</code> 文件夹。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fgxfdois13j30r804gwf5.jpg" alt=""></p>
<p>（5）确定进入到 <code>blog</code> 文件夹之后，执行以下命令，对 <code>blog</code> 文件夹进行初始化。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
<p>（6）初始化完成之后，执行以下命令，安装所有的依赖和插件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<p>（7）安装完成后，执行以下命令，开启 hexo 本地服务器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo sever		或简写 hexo s</div></pre></td></tr></table></figure>
<p>当看到以下命令出现，就表示服务器启动成功。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fgxfek2yetj30ru0143yr.jpg" alt=""></p>
<p>然后就可以在浏览器中打开<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>来查看博客了。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fgxff2rb0oj30qk0d1n3y.jpg" alt=""></p>
<p>至此，我们的 hexo 静态博客框架安装就完成了。</p>
<h2 id="关联-github"><a href="#关联-github" class="headerlink" title="关联 github"></a>关联 github</h2><p>现阶段，我们只是在本地搭建好了博客页面，其他人是无法访问的。所以，本地安装完成之后，接下来我们需要关联 github。</p>
<p>（1）用编辑器打开 <code>blog</code> 文件夹里面的一个 <code>_config.yml</code> 的文件。将文件末尾修改为以下内容：</p>
<p>注：<code>runjaelyn</code> 改为你自己 <code>github</code> 的用户名</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span> </div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/runjaelyn/runjaelyn.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure>
<p style="color:red">注意：在配置所有的 _config.yml 文件时（包括后面会用到的主题 theme 文件夹中的），所有的冒号 : 后边都要加一个空格，否则执行 hexo 命令会报错。</p>

<p>（2）修改完成并保存。然后通过 <code>cd</code> 命令进入到 <code>blog</code> 文件夹目录，在命令行执行生成静态页面的命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate		或简写 hexo g</div></pre></td></tr></table></figure>
<ul>
<li><p>此时若出现如下报错：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR Local hexo not found <span class="keyword">in</span> ~/blog</div><div class="line">ERROR Try runing: <span class="string">'npm install hexo --save'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>则执行命令：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo --save</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>若无报错，自行忽略此步骤。</li>
</ul>
<p>（3）静态页面生成成功之后，执行配置命令 <code>deploy</code>，部署网站。（以后每次部署网站前，都需要预先生成静态文件）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy		或简写 hexo d</div></pre></td></tr></table></figure>
<p>（4）部署网站执行成功后，会显示类似于下列的命令。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fgxffveqejj31100ae782.jpg" alt=""></p>
<p>但是，也有可能会出现几种报错的情况：</p>
<p style="color:red">1. 无法连接 Git 或找不到 Git。</p>

<p>则执行如下命令来安装 <code>hexo-deployer-git</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fgxfg618n4j30qw05ktae.jpg" alt=""></p>
<p style="color:red">2. 没有配置用户名和密码。</p>

<p>若在本机上是第一次使用 Git，那么 Git 会要求配置的是你个人的用户名称和电子邮件地址。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fgxfgf2dzij30ow05qq3n.jpg" alt=""></p>
<p>这两条配置很重要，每次 Git 提交时都会引用这两条信息，用来说明是谁提交了更新。所以，需要则执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"name"</span></div><div class="line">git config --global user.email <span class="string">"name@example.com"</span></div></pre></td></tr></table></figure>
<p>上面<code>&quot;&quot;</code>里的内容填写自己的名字和邮箱就可以了。</p>
<p style="color:red">3. 未关联 GitHub。</p>

<p>若你未关联 Github，那么在执行 <code>hexo deploy</code> 命令时终端会提示你输入Github 的用户名和密码，即</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fgxfh04943j31140baae1.jpg" alt=""></p>
<p>依次输入你自己的 github 账号和密码就可以了。</p>
<p>（5）以上报错问题解决好了之后，重新执行配置命令 <code>deploy</code>，部署网站。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy		或简写 hexo d</div></pre></td></tr></table></figure>
<p>（6）显示成功之后，打开浏览器，输入你自己的 GitHub 地址。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fgxfhczaskj30mc01qjri.jpg" alt=""></p>
<p><code>runjaelyn</code> 改为你自己的用户名。</p>
<p>至此，我们刚刚在本地搭建的博客页面，现在就已经关联到了 github 上，其他人可以通过你的 Github 博客地址访问你的博客了。</p>
<h2 id="发表新文章"><a href="#发表新文章" class="headerlink" title="发表新文章"></a>发表新文章</h2><p>博客搭建好了之后，我们就可以开始往博客里添加我们的博客内容了。</p>
<p>（1）通过 <code>cd</code> 进入到 <code>blog</code> 文件夹，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"文章标题"</span></div></pre></td></tr></table></figure>
<p>创建成功后会有如下提示：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fgxfice2lyj30ms01s0tb.jpg" alt=""></p>
<p>创建成功后，打开 <code>blog</code> 文件夹里的 <code>source／_posts</code> ，就可以看到我们刚刚通过 hexo <code>new</code> 出来的文章 <code>.md</code> 文件。    </p>
<p>然后我们就可以添加我们的文章内容了（内容遵循 <code>Markdown</code> 的语法规则）。 </p>
<p>（2）文章编辑好保存后，执行如下命令，重新生成并部署：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean </div><div class="line">hexo g </div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>（3）成功后刷新博客就可以看到新文章已经显示在页面了。</p>
<p>到此为止，我们的博客就搭建完成了。</p>
<p>如果觉得 hexo 默认主题样式不好看的话，还可以自己去网上找其他主题，更换主题模式。</p>
<p>以后，我们就都可以通过 hexo 来管理操作我们的博客了。</p>
]]></content>
      
        <categories>
            
            <category> github </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[创建 Github 个人博客(一)：搭建博客基础页面]]></title>
      <url>/2017/06/09/signupBlog/</url>
      <content type="html"><![CDATA[<p>现在网络上技术类相关的博客由很多，很多类似于CSDN、博客园也都可以写文章。我们这篇教程主要介绍的是用 githubpages 搭建自己独立的技术博客。</p>
<a id="more"></a>
<h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>要创建 GitHub 的个人技术博客，首先需要进入<a href="https://github.com/" target="_blank" rel="external">Github官网</a>注册一个 GitHub 的账号。</p>
<p>（如果已经有 <code>github</code> 账号，可跳前两个步骤，直接进入第三步。）</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcyl3w5wj31kw0yoaiu.jpg" alt=""></p>
<h2 id="初始设置"><a href="#初始设置" class="headerlink" title="初始设置"></a>初始设置</h2><p>账号注册成功之后会跳到一个账户初始设置的页面，一般情况下我们采用默认设置就行。不用做任何更改，直接点击绿色 <code>Continue</code> 按钮。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcykhxlbj31kw0xggtm.jpg" alt=""></p>
<h3 id="验证邮箱"><a href="#验证邮箱" class="headerlink" title="验证邮箱"></a>验证邮箱</h3><p>初始设置完成之后，打开你注册账号时填写的邮箱，查看 GitHub 发给你的邮件。</p>
<p>我们需要对邮箱进行验证，后面生成的个人主页才会被接受和发布。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcylv8fkj31kw0dy42y.jpg" alt=""></p>
<p>点击验证邮箱，验证成功后跳转到如下页面。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fgfc10zrt7j31kw0tcjx9.jpg" alt=""></p>
<p>点击第二个按钮，创建一个新项目。</p>
<h2 id="创建页面仓库"><a href="#创建页面仓库" class="headerlink" title="创建页面仓库"></a>创建页面仓库</h2><p>这个页面用来填写关于你新建的这个仓库的一些初始化设置。</p>
<p>（找不到页面入口的可以点击这里<a href="https://github.com/new" target="_blank" rel="external">创建页面仓库</a>）</p>
<p>注意：</p>
<ol>
<li><p>仓库名称尽量跟你的 GitHub 用户名（注册账号时填写的用户名）保持一致。</p>
</li>
<li><p>因为 Github Pages 发布的页面统一使用 <code>github.io</code> 域名，所以你的仓库名还需要在你的用户名后面加上后缀 <code>.github.io</code>。</p>
</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwgy1fgfcymfif2j31kw0ypgu4.jpg" alt=""></p>
<p>其他的一些可选选项根据自己需求填写，完成之后点击绿色按钮 <code>Create reponsitory</code> 创建仓库。</p>
<h2 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h2><p>仓库创建好后，接下来就是在仓库中生成我们的页面。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcyj5d3uj31kw0yrjyl.jpg" alt=""></p>
<p>点击页面内的 <code>setting</code> ，进入设置页面。</p>
<p>在生成完整的页面之前，我们需要先给我们的页面设置一个主题样式，所以滑到页面后面，可以看到有一个主题选择按钮，点击 <code>choose a theme</code>。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fgfcyjvaofj317s0yi44h.jpg" alt=""></p>
<p>在主题页面选择一个自己喜欢的主题，选定后点击 <code>select theme</code></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgfcymovenj31kw10gwok.jpg" alt=""></p>
<p>主题设置成功后会跳转到一个“README“文件的配置页面。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fgfcykpcpoj31kw0pjaeo.jpg" alt=""></p>
<p>因为我们是将“README”作为我们博客的首页，所以选择直接将它提交到主分支即可。</p>
<p>其他的设置在后面我们都可以修改，所以这里不做任何改动，采用默认设置。</p>
<p>然后点击绿色 <code>Commit changes</code> 按钮。</p>
<p>到这为止，我们的 GitHub 博客就已经搭建好了。</p>
<h2 id="博客地址"><a href="#博客地址" class="headerlink" title="博客地址"></a>博客地址</h2><p>那么，别人要怎么访问我们的博客呢？</p>
<p>还是进入到我们刚刚选择主题时的 <code>setting</code> 页面。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwgy1fgfcyiik04j315u0zmq8v.jpg" alt=""></p>
<p>在主题选择这一栏的上方，有一个链接。点击这个链接，就可以看到我们的博客首页了，里面有我们刚刚设置的博客主题，和“REANME”文件里的内容。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwgy1fgfcympialj31kw0xigs1.jpg" alt=""></p>
<p>这个链接地址就是我们的博客地址，别人也就可以通过这个地址来访问我们 GitHub 博客了。</p>
]]></content>
      
        <categories>
            
            <category> github </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
